//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/placement/v1/placement.proto

package placementconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/placement/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PlacementName is the fully-qualified name of the Placement service.
	PlacementName = "dapr.proto.placement.v1.Placement"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlacementReportDaprStatusProcedure is the fully-qualified name of the Placement's
	// ReportDaprStatus RPC.
	PlacementReportDaprStatusProcedure = "/dapr.proto.placement.v1.Placement/ReportDaprStatus"
)

// PlacementClient is a client for the dapr.proto.placement.v1.Placement service.
type PlacementClient interface {
	// Reports Dapr actor status and retrieves actor placement table.
	ReportDaprStatus(context.Context) *connect.BidiStreamForClient[v1.Host, v1.PlacementOrder]
}

// NewPlacementClient constructs a client for the dapr.proto.placement.v1.Placement service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlacementClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlacementClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &placementClient{
		reportDaprStatus: connect.NewClient[v1.Host, v1.PlacementOrder](
			httpClient,
			baseURL+PlacementReportDaprStatusProcedure,
			opts...,
		),
	}
}

// placementClient implements PlacementClient.
type placementClient struct {
	reportDaprStatus *connect.Client[v1.Host, v1.PlacementOrder]
}

// ReportDaprStatus calls dapr.proto.placement.v1.Placement.ReportDaprStatus.
func (c *placementClient) ReportDaprStatus(ctx context.Context) *connect.BidiStreamForClient[v1.Host, v1.PlacementOrder] {
	return c.reportDaprStatus.CallBidiStream(ctx)
}

// PlacementHandler is an implementation of the dapr.proto.placement.v1.Placement service.
type PlacementHandler interface {
	// Reports Dapr actor status and retrieves actor placement table.
	ReportDaprStatus(context.Context, *connect.BidiStream[v1.Host, v1.PlacementOrder]) error
}

// NewPlacementHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlacementHandler(svc PlacementHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	placementReportDaprStatusHandler := connect.NewBidiStreamHandler(
		PlacementReportDaprStatusProcedure,
		svc.ReportDaprStatus,
		opts...,
	)
	return "/dapr.proto.placement.v1.Placement/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlacementReportDaprStatusProcedure:
			placementReportDaprStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlacementHandler returns CodeUnimplemented from all methods.
type UnimplementedPlacementHandler struct{}

func (UnimplementedPlacementHandler) ReportDaprStatus(context.Context, *connect.BidiStream[v1.Host, v1.PlacementOrder]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.placement.v1.Placement.ReportDaprStatus is not implemented"))
}
