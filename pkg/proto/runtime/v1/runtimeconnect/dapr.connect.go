//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/runtime/v1/dapr.proto

package runtimeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/dapr/dapr/pkg/proto/common/v1"
	v1 "github.com/dapr/dapr/pkg/proto/runtime/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DaprName is the fully-qualified name of the Dapr service.
	DaprName = "dapr.proto.runtime.v1.Dapr"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DaprInvokeServiceProcedure is the fully-qualified name of the Dapr's InvokeService RPC.
	DaprInvokeServiceProcedure = "/dapr.proto.runtime.v1.Dapr/InvokeService"
	// DaprGetStateProcedure is the fully-qualified name of the Dapr's GetState RPC.
	DaprGetStateProcedure = "/dapr.proto.runtime.v1.Dapr/GetState"
	// DaprGetBulkStateProcedure is the fully-qualified name of the Dapr's GetBulkState RPC.
	DaprGetBulkStateProcedure = "/dapr.proto.runtime.v1.Dapr/GetBulkState"
	// DaprSaveStateProcedure is the fully-qualified name of the Dapr's SaveState RPC.
	DaprSaveStateProcedure = "/dapr.proto.runtime.v1.Dapr/SaveState"
	// DaprQueryStateAlpha1Procedure is the fully-qualified name of the Dapr's QueryStateAlpha1 RPC.
	DaprQueryStateAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/QueryStateAlpha1"
	// DaprDeleteStateProcedure is the fully-qualified name of the Dapr's DeleteState RPC.
	DaprDeleteStateProcedure = "/dapr.proto.runtime.v1.Dapr/DeleteState"
	// DaprDeleteBulkStateProcedure is the fully-qualified name of the Dapr's DeleteBulkState RPC.
	DaprDeleteBulkStateProcedure = "/dapr.proto.runtime.v1.Dapr/DeleteBulkState"
	// DaprExecuteStateTransactionProcedure is the fully-qualified name of the Dapr's
	// ExecuteStateTransaction RPC.
	DaprExecuteStateTransactionProcedure = "/dapr.proto.runtime.v1.Dapr/ExecuteStateTransaction"
	// DaprPublishEventProcedure is the fully-qualified name of the Dapr's PublishEvent RPC.
	DaprPublishEventProcedure = "/dapr.proto.runtime.v1.Dapr/PublishEvent"
	// DaprBulkPublishEventAlpha1Procedure is the fully-qualified name of the Dapr's
	// BulkPublishEventAlpha1 RPC.
	DaprBulkPublishEventAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/BulkPublishEventAlpha1"
	// DaprSubscribeTopicEventsAlpha1Procedure is the fully-qualified name of the Dapr's
	// SubscribeTopicEventsAlpha1 RPC.
	DaprSubscribeTopicEventsAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubscribeTopicEventsAlpha1"
	// DaprInvokeBindingProcedure is the fully-qualified name of the Dapr's InvokeBinding RPC.
	DaprInvokeBindingProcedure = "/dapr.proto.runtime.v1.Dapr/InvokeBinding"
	// DaprGetSecretProcedure is the fully-qualified name of the Dapr's GetSecret RPC.
	DaprGetSecretProcedure = "/dapr.proto.runtime.v1.Dapr/GetSecret"
	// DaprGetBulkSecretProcedure is the fully-qualified name of the Dapr's GetBulkSecret RPC.
	DaprGetBulkSecretProcedure = "/dapr.proto.runtime.v1.Dapr/GetBulkSecret"
	// DaprRegisterActorTimerProcedure is the fully-qualified name of the Dapr's RegisterActorTimer RPC.
	DaprRegisterActorTimerProcedure = "/dapr.proto.runtime.v1.Dapr/RegisterActorTimer"
	// DaprUnregisterActorTimerProcedure is the fully-qualified name of the Dapr's UnregisterActorTimer
	// RPC.
	DaprUnregisterActorTimerProcedure = "/dapr.proto.runtime.v1.Dapr/UnregisterActorTimer"
	// DaprRegisterActorReminderProcedure is the fully-qualified name of the Dapr's
	// RegisterActorReminder RPC.
	DaprRegisterActorReminderProcedure = "/dapr.proto.runtime.v1.Dapr/RegisterActorReminder"
	// DaprUnregisterActorReminderProcedure is the fully-qualified name of the Dapr's
	// UnregisterActorReminder RPC.
	DaprUnregisterActorReminderProcedure = "/dapr.proto.runtime.v1.Dapr/UnregisterActorReminder"
	// DaprGetActorStateProcedure is the fully-qualified name of the Dapr's GetActorState RPC.
	DaprGetActorStateProcedure = "/dapr.proto.runtime.v1.Dapr/GetActorState"
	// DaprExecuteActorStateTransactionProcedure is the fully-qualified name of the Dapr's
	// ExecuteActorStateTransaction RPC.
	DaprExecuteActorStateTransactionProcedure = "/dapr.proto.runtime.v1.Dapr/ExecuteActorStateTransaction"
	// DaprInvokeActorProcedure is the fully-qualified name of the Dapr's InvokeActor RPC.
	DaprInvokeActorProcedure = "/dapr.proto.runtime.v1.Dapr/InvokeActor"
	// DaprGetConfigurationAlpha1Procedure is the fully-qualified name of the Dapr's
	// GetConfigurationAlpha1 RPC.
	DaprGetConfigurationAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/GetConfigurationAlpha1"
	// DaprGetConfigurationProcedure is the fully-qualified name of the Dapr's GetConfiguration RPC.
	DaprGetConfigurationProcedure = "/dapr.proto.runtime.v1.Dapr/GetConfiguration"
	// DaprSubscribeConfigurationAlpha1Procedure is the fully-qualified name of the Dapr's
	// SubscribeConfigurationAlpha1 RPC.
	DaprSubscribeConfigurationAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubscribeConfigurationAlpha1"
	// DaprSubscribeConfigurationProcedure is the fully-qualified name of the Dapr's
	// SubscribeConfiguration RPC.
	DaprSubscribeConfigurationProcedure = "/dapr.proto.runtime.v1.Dapr/SubscribeConfiguration"
	// DaprUnsubscribeConfigurationAlpha1Procedure is the fully-qualified name of the Dapr's
	// UnsubscribeConfigurationAlpha1 RPC.
	DaprUnsubscribeConfigurationAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/UnsubscribeConfigurationAlpha1"
	// DaprUnsubscribeConfigurationProcedure is the fully-qualified name of the Dapr's
	// UnsubscribeConfiguration RPC.
	DaprUnsubscribeConfigurationProcedure = "/dapr.proto.runtime.v1.Dapr/UnsubscribeConfiguration"
	// DaprTryLockAlpha1Procedure is the fully-qualified name of the Dapr's TryLockAlpha1 RPC.
	DaprTryLockAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/TryLockAlpha1"
	// DaprUnlockAlpha1Procedure is the fully-qualified name of the Dapr's UnlockAlpha1 RPC.
	DaprUnlockAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/UnlockAlpha1"
	// DaprEncryptAlpha1Procedure is the fully-qualified name of the Dapr's EncryptAlpha1 RPC.
	DaprEncryptAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/EncryptAlpha1"
	// DaprDecryptAlpha1Procedure is the fully-qualified name of the Dapr's DecryptAlpha1 RPC.
	DaprDecryptAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/DecryptAlpha1"
	// DaprGetMetadataProcedure is the fully-qualified name of the Dapr's GetMetadata RPC.
	DaprGetMetadataProcedure = "/dapr.proto.runtime.v1.Dapr/GetMetadata"
	// DaprSetMetadataProcedure is the fully-qualified name of the Dapr's SetMetadata RPC.
	DaprSetMetadataProcedure = "/dapr.proto.runtime.v1.Dapr/SetMetadata"
	// DaprSubtleGetKeyAlpha1Procedure is the fully-qualified name of the Dapr's SubtleGetKeyAlpha1 RPC.
	DaprSubtleGetKeyAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubtleGetKeyAlpha1"
	// DaprSubtleEncryptAlpha1Procedure is the fully-qualified name of the Dapr's SubtleEncryptAlpha1
	// RPC.
	DaprSubtleEncryptAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubtleEncryptAlpha1"
	// DaprSubtleDecryptAlpha1Procedure is the fully-qualified name of the Dapr's SubtleDecryptAlpha1
	// RPC.
	DaprSubtleDecryptAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubtleDecryptAlpha1"
	// DaprSubtleWrapKeyAlpha1Procedure is the fully-qualified name of the Dapr's SubtleWrapKeyAlpha1
	// RPC.
	DaprSubtleWrapKeyAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubtleWrapKeyAlpha1"
	// DaprSubtleUnwrapKeyAlpha1Procedure is the fully-qualified name of the Dapr's
	// SubtleUnwrapKeyAlpha1 RPC.
	DaprSubtleUnwrapKeyAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubtleUnwrapKeyAlpha1"
	// DaprSubtleSignAlpha1Procedure is the fully-qualified name of the Dapr's SubtleSignAlpha1 RPC.
	DaprSubtleSignAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubtleSignAlpha1"
	// DaprSubtleVerifyAlpha1Procedure is the fully-qualified name of the Dapr's SubtleVerifyAlpha1 RPC.
	DaprSubtleVerifyAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/SubtleVerifyAlpha1"
	// DaprStartWorkflowAlpha1Procedure is the fully-qualified name of the Dapr's StartWorkflowAlpha1
	// RPC.
	DaprStartWorkflowAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/StartWorkflowAlpha1"
	// DaprGetWorkflowAlpha1Procedure is the fully-qualified name of the Dapr's GetWorkflowAlpha1 RPC.
	DaprGetWorkflowAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/GetWorkflowAlpha1"
	// DaprPurgeWorkflowAlpha1Procedure is the fully-qualified name of the Dapr's PurgeWorkflowAlpha1
	// RPC.
	DaprPurgeWorkflowAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/PurgeWorkflowAlpha1"
	// DaprTerminateWorkflowAlpha1Procedure is the fully-qualified name of the Dapr's
	// TerminateWorkflowAlpha1 RPC.
	DaprTerminateWorkflowAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/TerminateWorkflowAlpha1"
	// DaprPauseWorkflowAlpha1Procedure is the fully-qualified name of the Dapr's PauseWorkflowAlpha1
	// RPC.
	DaprPauseWorkflowAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/PauseWorkflowAlpha1"
	// DaprResumeWorkflowAlpha1Procedure is the fully-qualified name of the Dapr's ResumeWorkflowAlpha1
	// RPC.
	DaprResumeWorkflowAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/ResumeWorkflowAlpha1"
	// DaprRaiseEventWorkflowAlpha1Procedure is the fully-qualified name of the Dapr's
	// RaiseEventWorkflowAlpha1 RPC.
	DaprRaiseEventWorkflowAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/RaiseEventWorkflowAlpha1"
	// DaprStartWorkflowBeta1Procedure is the fully-qualified name of the Dapr's StartWorkflowBeta1 RPC.
	DaprStartWorkflowBeta1Procedure = "/dapr.proto.runtime.v1.Dapr/StartWorkflowBeta1"
	// DaprGetWorkflowBeta1Procedure is the fully-qualified name of the Dapr's GetWorkflowBeta1 RPC.
	DaprGetWorkflowBeta1Procedure = "/dapr.proto.runtime.v1.Dapr/GetWorkflowBeta1"
	// DaprPurgeWorkflowBeta1Procedure is the fully-qualified name of the Dapr's PurgeWorkflowBeta1 RPC.
	DaprPurgeWorkflowBeta1Procedure = "/dapr.proto.runtime.v1.Dapr/PurgeWorkflowBeta1"
	// DaprTerminateWorkflowBeta1Procedure is the fully-qualified name of the Dapr's
	// TerminateWorkflowBeta1 RPC.
	DaprTerminateWorkflowBeta1Procedure = "/dapr.proto.runtime.v1.Dapr/TerminateWorkflowBeta1"
	// DaprPauseWorkflowBeta1Procedure is the fully-qualified name of the Dapr's PauseWorkflowBeta1 RPC.
	DaprPauseWorkflowBeta1Procedure = "/dapr.proto.runtime.v1.Dapr/PauseWorkflowBeta1"
	// DaprResumeWorkflowBeta1Procedure is the fully-qualified name of the Dapr's ResumeWorkflowBeta1
	// RPC.
	DaprResumeWorkflowBeta1Procedure = "/dapr.proto.runtime.v1.Dapr/ResumeWorkflowBeta1"
	// DaprRaiseEventWorkflowBeta1Procedure is the fully-qualified name of the Dapr's
	// RaiseEventWorkflowBeta1 RPC.
	DaprRaiseEventWorkflowBeta1Procedure = "/dapr.proto.runtime.v1.Dapr/RaiseEventWorkflowBeta1"
	// DaprShutdownProcedure is the fully-qualified name of the Dapr's Shutdown RPC.
	DaprShutdownProcedure = "/dapr.proto.runtime.v1.Dapr/Shutdown"
	// DaprScheduleJobAlpha1Procedure is the fully-qualified name of the Dapr's ScheduleJobAlpha1 RPC.
	DaprScheduleJobAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/ScheduleJobAlpha1"
	// DaprGetJobAlpha1Procedure is the fully-qualified name of the Dapr's GetJobAlpha1 RPC.
	DaprGetJobAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/GetJobAlpha1"
	// DaprDeleteJobAlpha1Procedure is the fully-qualified name of the Dapr's DeleteJobAlpha1 RPC.
	DaprDeleteJobAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/DeleteJobAlpha1"
	// DaprConverseAlpha1Procedure is the fully-qualified name of the Dapr's ConverseAlpha1 RPC.
	DaprConverseAlpha1Procedure = "/dapr.proto.runtime.v1.Dapr/ConverseAlpha1"
	// DaprConverseAlpha2Procedure is the fully-qualified name of the Dapr's ConverseAlpha2 RPC.
	DaprConverseAlpha2Procedure = "/dapr.proto.runtime.v1.Dapr/ConverseAlpha2"
)

// DaprClient is a client for the dapr.proto.runtime.v1.Dapr service.
type DaprClient interface {
	// Invokes a method on a remote Dapr app.
	// Deprecated: Use proxy mode service invocation instead.
	InvokeService(context.Context, *connect.Request[v1.InvokeServiceRequest]) (*connect.Response[v11.InvokeResponse], error)
	// Gets the state for a specific key.
	GetState(context.Context, *connect.Request[v1.GetStateRequest]) (*connect.Response[v1.GetStateResponse], error)
	// Gets a bulk of state items for a list of keys
	GetBulkState(context.Context, *connect.Request[v1.GetBulkStateRequest]) (*connect.Response[v1.GetBulkStateResponse], error)
	// Saves the state for a specific key.
	SaveState(context.Context, *connect.Request[v1.SaveStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Queries the state.
	QueryStateAlpha1(context.Context, *connect.Request[v1.QueryStateRequest]) (*connect.Response[v1.QueryStateResponse], error)
	// Deletes the state for a specific key.
	DeleteState(context.Context, *connect.Request[v1.DeleteStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Deletes a bulk of state items for a list of keys
	DeleteBulkState(context.Context, *connect.Request[v1.DeleteBulkStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Executes transactions for a specified store
	ExecuteStateTransaction(context.Context, *connect.Request[v1.ExecuteStateTransactionRequest]) (*connect.Response[emptypb.Empty], error)
	// Publishes events to the specific topic.
	PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[emptypb.Empty], error)
	// Bulk Publishes multiple events to the specified topic.
	BulkPublishEventAlpha1(context.Context, *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error)
	// SubscribeTopicEventsAlpha1 subscribes to a PubSub topic and receives topic
	// events from it.
	SubscribeTopicEventsAlpha1(context.Context) *connect.BidiStreamForClient[v1.SubscribeTopicEventsRequestAlpha1, v1.SubscribeTopicEventsResponseAlpha1]
	// Invokes binding data to specific output bindings
	InvokeBinding(context.Context, *connect.Request[v1.InvokeBindingRequest]) (*connect.Response[v1.InvokeBindingResponse], error)
	// Gets secrets from secret stores.
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	// Gets a bulk of secrets
	GetBulkSecret(context.Context, *connect.Request[v1.GetBulkSecretRequest]) (*connect.Response[v1.GetBulkSecretResponse], error)
	// Register an actor timer.
	RegisterActorTimer(context.Context, *connect.Request[v1.RegisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error)
	// Unregister an actor timer.
	UnregisterActorTimer(context.Context, *connect.Request[v1.UnregisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error)
	// Register an actor reminder.
	RegisterActorReminder(context.Context, *connect.Request[v1.RegisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error)
	// Unregister an actor reminder.
	UnregisterActorReminder(context.Context, *connect.Request[v1.UnregisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error)
	// Gets the state for a specific actor.
	GetActorState(context.Context, *connect.Request[v1.GetActorStateRequest]) (*connect.Response[v1.GetActorStateResponse], error)
	// Executes state transactions for a specified actor
	ExecuteActorStateTransaction(context.Context, *connect.Request[v1.ExecuteActorStateTransactionRequest]) (*connect.Response[emptypb.Empty], error)
	// InvokeActor calls a method on an actor.
	InvokeActor(context.Context, *connect.Request[v1.InvokeActorRequest]) (*connect.Response[v1.InvokeActorResponse], error)
	// GetConfiguration gets configuration from configuration store.
	GetConfigurationAlpha1(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	// GetConfiguration gets configuration from configuration store.
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	// SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
	SubscribeConfigurationAlpha1(context.Context, *connect.Request[v1.SubscribeConfigurationRequest]) (*connect.ServerStreamForClient[v1.SubscribeConfigurationResponse], error)
	// SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
	SubscribeConfiguration(context.Context, *connect.Request[v1.SubscribeConfigurationRequest]) (*connect.ServerStreamForClient[v1.SubscribeConfigurationResponse], error)
	// UnSubscribeConfiguration unsubscribe the subscription of configuration
	UnsubscribeConfigurationAlpha1(context.Context, *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error)
	// UnSubscribeConfiguration unsubscribe the subscription of configuration
	UnsubscribeConfiguration(context.Context, *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error)
	// TryLockAlpha1 tries to get a lock with an expiry.
	TryLockAlpha1(context.Context, *connect.Request[v1.TryLockRequest]) (*connect.Response[v1.TryLockResponse], error)
	// UnlockAlpha1 unlocks a lock.
	UnlockAlpha1(context.Context, *connect.Request[v1.UnlockRequest]) (*connect.Response[v1.UnlockResponse], error)
	// EncryptAlpha1 encrypts a message using the Dapr encryption scheme and a key stored in the vault.
	EncryptAlpha1(context.Context) *connect.BidiStreamForClient[v1.EncryptRequest, v1.EncryptResponse]
	// DecryptAlpha1 decrypts a message using the Dapr encryption scheme and a key stored in the vault.
	DecryptAlpha1(context.Context) *connect.BidiStreamForClient[v1.DecryptRequest, v1.DecryptResponse]
	// Gets metadata of the sidecar
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	// Sets value in extended metadata of the sidecar
	SetMetadata(context.Context, *connect.Request[v1.SetMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	// SubtleGetKeyAlpha1 returns the public part of an asymmetric key stored in the vault.
	SubtleGetKeyAlpha1(context.Context, *connect.Request[v1.SubtleGetKeyRequest]) (*connect.Response[v1.SubtleGetKeyResponse], error)
	// SubtleEncryptAlpha1 encrypts a small message using a key stored in the vault.
	SubtleEncryptAlpha1(context.Context, *connect.Request[v1.SubtleEncryptRequest]) (*connect.Response[v1.SubtleEncryptResponse], error)
	// SubtleDecryptAlpha1 decrypts a small message using a key stored in the vault.
	SubtleDecryptAlpha1(context.Context, *connect.Request[v1.SubtleDecryptRequest]) (*connect.Response[v1.SubtleDecryptResponse], error)
	// SubtleWrapKeyAlpha1 wraps a key using a key stored in the vault.
	SubtleWrapKeyAlpha1(context.Context, *connect.Request[v1.SubtleWrapKeyRequest]) (*connect.Response[v1.SubtleWrapKeyResponse], error)
	// SubtleUnwrapKeyAlpha1 unwraps a key using a key stored in the vault.
	SubtleUnwrapKeyAlpha1(context.Context, *connect.Request[v1.SubtleUnwrapKeyRequest]) (*connect.Response[v1.SubtleUnwrapKeyResponse], error)
	// SubtleSignAlpha1 signs a message using a key stored in the vault.
	SubtleSignAlpha1(context.Context, *connect.Request[v1.SubtleSignRequest]) (*connect.Response[v1.SubtleSignResponse], error)
	// SubtleVerifyAlpha1 verifies the signature of a message using a key stored in the vault.
	SubtleVerifyAlpha1(context.Context, *connect.Request[v1.SubtleVerifyRequest]) (*connect.Response[v1.SubtleVerifyResponse], error)
	// Starts a new instance of a workflow
	//
	// Deprecated: do not use.
	StartWorkflowAlpha1(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error)
	// Gets details about a started workflow instance
	//
	// Deprecated: do not use.
	GetWorkflowAlpha1(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	// Purge Workflow
	//
	// Deprecated: do not use.
	PurgeWorkflowAlpha1(context.Context, *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Terminates a running workflow instance
	//
	// Deprecated: do not use.
	TerminateWorkflowAlpha1(context.Context, *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Pauses a running workflow instance
	//
	// Deprecated: do not use.
	PauseWorkflowAlpha1(context.Context, *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Resumes a paused workflow instance
	//
	// Deprecated: do not use.
	ResumeWorkflowAlpha1(context.Context, *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Raise an event to a running workflow instance
	//
	// Deprecated: do not use.
	RaiseEventWorkflowAlpha1(context.Context, *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Starts a new instance of a workflow
	StartWorkflowBeta1(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error)
	// Gets details about a started workflow instance
	GetWorkflowBeta1(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	// Purge Workflow
	PurgeWorkflowBeta1(context.Context, *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Terminates a running workflow instance
	TerminateWorkflowBeta1(context.Context, *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Pauses a running workflow instance
	PauseWorkflowBeta1(context.Context, *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Resumes a paused workflow instance
	ResumeWorkflowBeta1(context.Context, *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Raise an event to a running workflow instance
	RaiseEventWorkflowBeta1(context.Context, *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Shutdown the sidecar
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[emptypb.Empty], error)
	// Create and schedule a job
	ScheduleJobAlpha1(context.Context, *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error)
	// Gets a scheduled job
	GetJobAlpha1(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	// Delete a job
	DeleteJobAlpha1(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	// Converse with a LLM service
	ConverseAlpha1(context.Context, *connect.Request[v1.ConversationRequest]) (*connect.Response[v1.ConversationResponse], error)
	// Converse with a LLM service via alpha2 api
	ConverseAlpha2(context.Context, *connect.Request[v1.ConversationRequestAlpha2]) (*connect.Response[v1.ConversationResponseAlpha2], error)
}

// NewDaprClient constructs a client for the dapr.proto.runtime.v1.Dapr service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDaprClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DaprClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &daprClient{
		invokeService: connect.NewClient[v1.InvokeServiceRequest, v11.InvokeResponse](
			httpClient,
			baseURL+DaprInvokeServiceProcedure,
			opts...,
		),
		getState: connect.NewClient[v1.GetStateRequest, v1.GetStateResponse](
			httpClient,
			baseURL+DaprGetStateProcedure,
			opts...,
		),
		getBulkState: connect.NewClient[v1.GetBulkStateRequest, v1.GetBulkStateResponse](
			httpClient,
			baseURL+DaprGetBulkStateProcedure,
			opts...,
		),
		saveState: connect.NewClient[v1.SaveStateRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprSaveStateProcedure,
			opts...,
		),
		queryStateAlpha1: connect.NewClient[v1.QueryStateRequest, v1.QueryStateResponse](
			httpClient,
			baseURL+DaprQueryStateAlpha1Procedure,
			opts...,
		),
		deleteState: connect.NewClient[v1.DeleteStateRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprDeleteStateProcedure,
			opts...,
		),
		deleteBulkState: connect.NewClient[v1.DeleteBulkStateRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprDeleteBulkStateProcedure,
			opts...,
		),
		executeStateTransaction: connect.NewClient[v1.ExecuteStateTransactionRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprExecuteStateTransactionProcedure,
			opts...,
		),
		publishEvent: connect.NewClient[v1.PublishEventRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprPublishEventProcedure,
			opts...,
		),
		bulkPublishEventAlpha1: connect.NewClient[v1.BulkPublishRequest, v1.BulkPublishResponse](
			httpClient,
			baseURL+DaprBulkPublishEventAlpha1Procedure,
			opts...,
		),
		subscribeTopicEventsAlpha1: connect.NewClient[v1.SubscribeTopicEventsRequestAlpha1, v1.SubscribeTopicEventsResponseAlpha1](
			httpClient,
			baseURL+DaprSubscribeTopicEventsAlpha1Procedure,
			opts...,
		),
		invokeBinding: connect.NewClient[v1.InvokeBindingRequest, v1.InvokeBindingResponse](
			httpClient,
			baseURL+DaprInvokeBindingProcedure,
			opts...,
		),
		getSecret: connect.NewClient[v1.GetSecretRequest, v1.GetSecretResponse](
			httpClient,
			baseURL+DaprGetSecretProcedure,
			opts...,
		),
		getBulkSecret: connect.NewClient[v1.GetBulkSecretRequest, v1.GetBulkSecretResponse](
			httpClient,
			baseURL+DaprGetBulkSecretProcedure,
			opts...,
		),
		registerActorTimer: connect.NewClient[v1.RegisterActorTimerRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprRegisterActorTimerProcedure,
			opts...,
		),
		unregisterActorTimer: connect.NewClient[v1.UnregisterActorTimerRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprUnregisterActorTimerProcedure,
			opts...,
		),
		registerActorReminder: connect.NewClient[v1.RegisterActorReminderRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprRegisterActorReminderProcedure,
			opts...,
		),
		unregisterActorReminder: connect.NewClient[v1.UnregisterActorReminderRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprUnregisterActorReminderProcedure,
			opts...,
		),
		getActorState: connect.NewClient[v1.GetActorStateRequest, v1.GetActorStateResponse](
			httpClient,
			baseURL+DaprGetActorStateProcedure,
			opts...,
		),
		executeActorStateTransaction: connect.NewClient[v1.ExecuteActorStateTransactionRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprExecuteActorStateTransactionProcedure,
			opts...,
		),
		invokeActor: connect.NewClient[v1.InvokeActorRequest, v1.InvokeActorResponse](
			httpClient,
			baseURL+DaprInvokeActorProcedure,
			opts...,
		),
		getConfigurationAlpha1: connect.NewClient[v1.GetConfigurationRequest, v1.GetConfigurationResponse](
			httpClient,
			baseURL+DaprGetConfigurationAlpha1Procedure,
			opts...,
		),
		getConfiguration: connect.NewClient[v1.GetConfigurationRequest, v1.GetConfigurationResponse](
			httpClient,
			baseURL+DaprGetConfigurationProcedure,
			opts...,
		),
		subscribeConfigurationAlpha1: connect.NewClient[v1.SubscribeConfigurationRequest, v1.SubscribeConfigurationResponse](
			httpClient,
			baseURL+DaprSubscribeConfigurationAlpha1Procedure,
			opts...,
		),
		subscribeConfiguration: connect.NewClient[v1.SubscribeConfigurationRequest, v1.SubscribeConfigurationResponse](
			httpClient,
			baseURL+DaprSubscribeConfigurationProcedure,
			opts...,
		),
		unsubscribeConfigurationAlpha1: connect.NewClient[v1.UnsubscribeConfigurationRequest, v1.UnsubscribeConfigurationResponse](
			httpClient,
			baseURL+DaprUnsubscribeConfigurationAlpha1Procedure,
			opts...,
		),
		unsubscribeConfiguration: connect.NewClient[v1.UnsubscribeConfigurationRequest, v1.UnsubscribeConfigurationResponse](
			httpClient,
			baseURL+DaprUnsubscribeConfigurationProcedure,
			opts...,
		),
		tryLockAlpha1: connect.NewClient[v1.TryLockRequest, v1.TryLockResponse](
			httpClient,
			baseURL+DaprTryLockAlpha1Procedure,
			opts...,
		),
		unlockAlpha1: connect.NewClient[v1.UnlockRequest, v1.UnlockResponse](
			httpClient,
			baseURL+DaprUnlockAlpha1Procedure,
			opts...,
		),
		encryptAlpha1: connect.NewClient[v1.EncryptRequest, v1.EncryptResponse](
			httpClient,
			baseURL+DaprEncryptAlpha1Procedure,
			opts...,
		),
		decryptAlpha1: connect.NewClient[v1.DecryptRequest, v1.DecryptResponse](
			httpClient,
			baseURL+DaprDecryptAlpha1Procedure,
			opts...,
		),
		getMetadata: connect.NewClient[v1.GetMetadataRequest, v1.GetMetadataResponse](
			httpClient,
			baseURL+DaprGetMetadataProcedure,
			opts...,
		),
		setMetadata: connect.NewClient[v1.SetMetadataRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprSetMetadataProcedure,
			opts...,
		),
		subtleGetKeyAlpha1: connect.NewClient[v1.SubtleGetKeyRequest, v1.SubtleGetKeyResponse](
			httpClient,
			baseURL+DaprSubtleGetKeyAlpha1Procedure,
			opts...,
		),
		subtleEncryptAlpha1: connect.NewClient[v1.SubtleEncryptRequest, v1.SubtleEncryptResponse](
			httpClient,
			baseURL+DaprSubtleEncryptAlpha1Procedure,
			opts...,
		),
		subtleDecryptAlpha1: connect.NewClient[v1.SubtleDecryptRequest, v1.SubtleDecryptResponse](
			httpClient,
			baseURL+DaprSubtleDecryptAlpha1Procedure,
			opts...,
		),
		subtleWrapKeyAlpha1: connect.NewClient[v1.SubtleWrapKeyRequest, v1.SubtleWrapKeyResponse](
			httpClient,
			baseURL+DaprSubtleWrapKeyAlpha1Procedure,
			opts...,
		),
		subtleUnwrapKeyAlpha1: connect.NewClient[v1.SubtleUnwrapKeyRequest, v1.SubtleUnwrapKeyResponse](
			httpClient,
			baseURL+DaprSubtleUnwrapKeyAlpha1Procedure,
			opts...,
		),
		subtleSignAlpha1: connect.NewClient[v1.SubtleSignRequest, v1.SubtleSignResponse](
			httpClient,
			baseURL+DaprSubtleSignAlpha1Procedure,
			opts...,
		),
		subtleVerifyAlpha1: connect.NewClient[v1.SubtleVerifyRequest, v1.SubtleVerifyResponse](
			httpClient,
			baseURL+DaprSubtleVerifyAlpha1Procedure,
			opts...,
		),
		startWorkflowAlpha1: connect.NewClient[v1.StartWorkflowRequest, v1.StartWorkflowResponse](
			httpClient,
			baseURL+DaprStartWorkflowAlpha1Procedure,
			opts...,
		),
		getWorkflowAlpha1: connect.NewClient[v1.GetWorkflowRequest, v1.GetWorkflowResponse](
			httpClient,
			baseURL+DaprGetWorkflowAlpha1Procedure,
			opts...,
		),
		purgeWorkflowAlpha1: connect.NewClient[v1.PurgeWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprPurgeWorkflowAlpha1Procedure,
			opts...,
		),
		terminateWorkflowAlpha1: connect.NewClient[v1.TerminateWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprTerminateWorkflowAlpha1Procedure,
			opts...,
		),
		pauseWorkflowAlpha1: connect.NewClient[v1.PauseWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprPauseWorkflowAlpha1Procedure,
			opts...,
		),
		resumeWorkflowAlpha1: connect.NewClient[v1.ResumeWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprResumeWorkflowAlpha1Procedure,
			opts...,
		),
		raiseEventWorkflowAlpha1: connect.NewClient[v1.RaiseEventWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprRaiseEventWorkflowAlpha1Procedure,
			opts...,
		),
		startWorkflowBeta1: connect.NewClient[v1.StartWorkflowRequest, v1.StartWorkflowResponse](
			httpClient,
			baseURL+DaprStartWorkflowBeta1Procedure,
			opts...,
		),
		getWorkflowBeta1: connect.NewClient[v1.GetWorkflowRequest, v1.GetWorkflowResponse](
			httpClient,
			baseURL+DaprGetWorkflowBeta1Procedure,
			opts...,
		),
		purgeWorkflowBeta1: connect.NewClient[v1.PurgeWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprPurgeWorkflowBeta1Procedure,
			opts...,
		),
		terminateWorkflowBeta1: connect.NewClient[v1.TerminateWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprTerminateWorkflowBeta1Procedure,
			opts...,
		),
		pauseWorkflowBeta1: connect.NewClient[v1.PauseWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprPauseWorkflowBeta1Procedure,
			opts...,
		),
		resumeWorkflowBeta1: connect.NewClient[v1.ResumeWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprResumeWorkflowBeta1Procedure,
			opts...,
		),
		raiseEventWorkflowBeta1: connect.NewClient[v1.RaiseEventWorkflowRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprRaiseEventWorkflowBeta1Procedure,
			opts...,
		),
		shutdown: connect.NewClient[v1.ShutdownRequest, emptypb.Empty](
			httpClient,
			baseURL+DaprShutdownProcedure,
			opts...,
		),
		scheduleJobAlpha1: connect.NewClient[v1.ScheduleJobRequest, v1.ScheduleJobResponse](
			httpClient,
			baseURL+DaprScheduleJobAlpha1Procedure,
			opts...,
		),
		getJobAlpha1: connect.NewClient[v1.GetJobRequest, v1.GetJobResponse](
			httpClient,
			baseURL+DaprGetJobAlpha1Procedure,
			opts...,
		),
		deleteJobAlpha1: connect.NewClient[v1.DeleteJobRequest, v1.DeleteJobResponse](
			httpClient,
			baseURL+DaprDeleteJobAlpha1Procedure,
			opts...,
		),
		converseAlpha1: connect.NewClient[v1.ConversationRequest, v1.ConversationResponse](
			httpClient,
			baseURL+DaprConverseAlpha1Procedure,
			opts...,
		),
		converseAlpha2: connect.NewClient[v1.ConversationRequestAlpha2, v1.ConversationResponseAlpha2](
			httpClient,
			baseURL+DaprConverseAlpha2Procedure,
			opts...,
		),
	}
}

// daprClient implements DaprClient.
type daprClient struct {
	invokeService                  *connect.Client[v1.InvokeServiceRequest, v11.InvokeResponse]
	getState                       *connect.Client[v1.GetStateRequest, v1.GetStateResponse]
	getBulkState                   *connect.Client[v1.GetBulkStateRequest, v1.GetBulkStateResponse]
	saveState                      *connect.Client[v1.SaveStateRequest, emptypb.Empty]
	queryStateAlpha1               *connect.Client[v1.QueryStateRequest, v1.QueryStateResponse]
	deleteState                    *connect.Client[v1.DeleteStateRequest, emptypb.Empty]
	deleteBulkState                *connect.Client[v1.DeleteBulkStateRequest, emptypb.Empty]
	executeStateTransaction        *connect.Client[v1.ExecuteStateTransactionRequest, emptypb.Empty]
	publishEvent                   *connect.Client[v1.PublishEventRequest, emptypb.Empty]
	bulkPublishEventAlpha1         *connect.Client[v1.BulkPublishRequest, v1.BulkPublishResponse]
	subscribeTopicEventsAlpha1     *connect.Client[v1.SubscribeTopicEventsRequestAlpha1, v1.SubscribeTopicEventsResponseAlpha1]
	invokeBinding                  *connect.Client[v1.InvokeBindingRequest, v1.InvokeBindingResponse]
	getSecret                      *connect.Client[v1.GetSecretRequest, v1.GetSecretResponse]
	getBulkSecret                  *connect.Client[v1.GetBulkSecretRequest, v1.GetBulkSecretResponse]
	registerActorTimer             *connect.Client[v1.RegisterActorTimerRequest, emptypb.Empty]
	unregisterActorTimer           *connect.Client[v1.UnregisterActorTimerRequest, emptypb.Empty]
	registerActorReminder          *connect.Client[v1.RegisterActorReminderRequest, emptypb.Empty]
	unregisterActorReminder        *connect.Client[v1.UnregisterActorReminderRequest, emptypb.Empty]
	getActorState                  *connect.Client[v1.GetActorStateRequest, v1.GetActorStateResponse]
	executeActorStateTransaction   *connect.Client[v1.ExecuteActorStateTransactionRequest, emptypb.Empty]
	invokeActor                    *connect.Client[v1.InvokeActorRequest, v1.InvokeActorResponse]
	getConfigurationAlpha1         *connect.Client[v1.GetConfigurationRequest, v1.GetConfigurationResponse]
	getConfiguration               *connect.Client[v1.GetConfigurationRequest, v1.GetConfigurationResponse]
	subscribeConfigurationAlpha1   *connect.Client[v1.SubscribeConfigurationRequest, v1.SubscribeConfigurationResponse]
	subscribeConfiguration         *connect.Client[v1.SubscribeConfigurationRequest, v1.SubscribeConfigurationResponse]
	unsubscribeConfigurationAlpha1 *connect.Client[v1.UnsubscribeConfigurationRequest, v1.UnsubscribeConfigurationResponse]
	unsubscribeConfiguration       *connect.Client[v1.UnsubscribeConfigurationRequest, v1.UnsubscribeConfigurationResponse]
	tryLockAlpha1                  *connect.Client[v1.TryLockRequest, v1.TryLockResponse]
	unlockAlpha1                   *connect.Client[v1.UnlockRequest, v1.UnlockResponse]
	encryptAlpha1                  *connect.Client[v1.EncryptRequest, v1.EncryptResponse]
	decryptAlpha1                  *connect.Client[v1.DecryptRequest, v1.DecryptResponse]
	getMetadata                    *connect.Client[v1.GetMetadataRequest, v1.GetMetadataResponse]
	setMetadata                    *connect.Client[v1.SetMetadataRequest, emptypb.Empty]
	subtleGetKeyAlpha1             *connect.Client[v1.SubtleGetKeyRequest, v1.SubtleGetKeyResponse]
	subtleEncryptAlpha1            *connect.Client[v1.SubtleEncryptRequest, v1.SubtleEncryptResponse]
	subtleDecryptAlpha1            *connect.Client[v1.SubtleDecryptRequest, v1.SubtleDecryptResponse]
	subtleWrapKeyAlpha1            *connect.Client[v1.SubtleWrapKeyRequest, v1.SubtleWrapKeyResponse]
	subtleUnwrapKeyAlpha1          *connect.Client[v1.SubtleUnwrapKeyRequest, v1.SubtleUnwrapKeyResponse]
	subtleSignAlpha1               *connect.Client[v1.SubtleSignRequest, v1.SubtleSignResponse]
	subtleVerifyAlpha1             *connect.Client[v1.SubtleVerifyRequest, v1.SubtleVerifyResponse]
	startWorkflowAlpha1            *connect.Client[v1.StartWorkflowRequest, v1.StartWorkflowResponse]
	getWorkflowAlpha1              *connect.Client[v1.GetWorkflowRequest, v1.GetWorkflowResponse]
	purgeWorkflowAlpha1            *connect.Client[v1.PurgeWorkflowRequest, emptypb.Empty]
	terminateWorkflowAlpha1        *connect.Client[v1.TerminateWorkflowRequest, emptypb.Empty]
	pauseWorkflowAlpha1            *connect.Client[v1.PauseWorkflowRequest, emptypb.Empty]
	resumeWorkflowAlpha1           *connect.Client[v1.ResumeWorkflowRequest, emptypb.Empty]
	raiseEventWorkflowAlpha1       *connect.Client[v1.RaiseEventWorkflowRequest, emptypb.Empty]
	startWorkflowBeta1             *connect.Client[v1.StartWorkflowRequest, v1.StartWorkflowResponse]
	getWorkflowBeta1               *connect.Client[v1.GetWorkflowRequest, v1.GetWorkflowResponse]
	purgeWorkflowBeta1             *connect.Client[v1.PurgeWorkflowRequest, emptypb.Empty]
	terminateWorkflowBeta1         *connect.Client[v1.TerminateWorkflowRequest, emptypb.Empty]
	pauseWorkflowBeta1             *connect.Client[v1.PauseWorkflowRequest, emptypb.Empty]
	resumeWorkflowBeta1            *connect.Client[v1.ResumeWorkflowRequest, emptypb.Empty]
	raiseEventWorkflowBeta1        *connect.Client[v1.RaiseEventWorkflowRequest, emptypb.Empty]
	shutdown                       *connect.Client[v1.ShutdownRequest, emptypb.Empty]
	scheduleJobAlpha1              *connect.Client[v1.ScheduleJobRequest, v1.ScheduleJobResponse]
	getJobAlpha1                   *connect.Client[v1.GetJobRequest, v1.GetJobResponse]
	deleteJobAlpha1                *connect.Client[v1.DeleteJobRequest, v1.DeleteJobResponse]
	converseAlpha1                 *connect.Client[v1.ConversationRequest, v1.ConversationResponse]
	converseAlpha2                 *connect.Client[v1.ConversationRequestAlpha2, v1.ConversationResponseAlpha2]
}

// InvokeService calls dapr.proto.runtime.v1.Dapr.InvokeService.
func (c *daprClient) InvokeService(ctx context.Context, req *connect.Request[v1.InvokeServiceRequest]) (*connect.Response[v11.InvokeResponse], error) {
	return c.invokeService.CallUnary(ctx, req)
}

// GetState calls dapr.proto.runtime.v1.Dapr.GetState.
func (c *daprClient) GetState(ctx context.Context, req *connect.Request[v1.GetStateRequest]) (*connect.Response[v1.GetStateResponse], error) {
	return c.getState.CallUnary(ctx, req)
}

// GetBulkState calls dapr.proto.runtime.v1.Dapr.GetBulkState.
func (c *daprClient) GetBulkState(ctx context.Context, req *connect.Request[v1.GetBulkStateRequest]) (*connect.Response[v1.GetBulkStateResponse], error) {
	return c.getBulkState.CallUnary(ctx, req)
}

// SaveState calls dapr.proto.runtime.v1.Dapr.SaveState.
func (c *daprClient) SaveState(ctx context.Context, req *connect.Request[v1.SaveStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.saveState.CallUnary(ctx, req)
}

// QueryStateAlpha1 calls dapr.proto.runtime.v1.Dapr.QueryStateAlpha1.
func (c *daprClient) QueryStateAlpha1(ctx context.Context, req *connect.Request[v1.QueryStateRequest]) (*connect.Response[v1.QueryStateResponse], error) {
	return c.queryStateAlpha1.CallUnary(ctx, req)
}

// DeleteState calls dapr.proto.runtime.v1.Dapr.DeleteState.
func (c *daprClient) DeleteState(ctx context.Context, req *connect.Request[v1.DeleteStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteState.CallUnary(ctx, req)
}

// DeleteBulkState calls dapr.proto.runtime.v1.Dapr.DeleteBulkState.
func (c *daprClient) DeleteBulkState(ctx context.Context, req *connect.Request[v1.DeleteBulkStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteBulkState.CallUnary(ctx, req)
}

// ExecuteStateTransaction calls dapr.proto.runtime.v1.Dapr.ExecuteStateTransaction.
func (c *daprClient) ExecuteStateTransaction(ctx context.Context, req *connect.Request[v1.ExecuteStateTransactionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.executeStateTransaction.CallUnary(ctx, req)
}

// PublishEvent calls dapr.proto.runtime.v1.Dapr.PublishEvent.
func (c *daprClient) PublishEvent(ctx context.Context, req *connect.Request[v1.PublishEventRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.publishEvent.CallUnary(ctx, req)
}

// BulkPublishEventAlpha1 calls dapr.proto.runtime.v1.Dapr.BulkPublishEventAlpha1.
func (c *daprClient) BulkPublishEventAlpha1(ctx context.Context, req *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error) {
	return c.bulkPublishEventAlpha1.CallUnary(ctx, req)
}

// SubscribeTopicEventsAlpha1 calls dapr.proto.runtime.v1.Dapr.SubscribeTopicEventsAlpha1.
func (c *daprClient) SubscribeTopicEventsAlpha1(ctx context.Context) *connect.BidiStreamForClient[v1.SubscribeTopicEventsRequestAlpha1, v1.SubscribeTopicEventsResponseAlpha1] {
	return c.subscribeTopicEventsAlpha1.CallBidiStream(ctx)
}

// InvokeBinding calls dapr.proto.runtime.v1.Dapr.InvokeBinding.
func (c *daprClient) InvokeBinding(ctx context.Context, req *connect.Request[v1.InvokeBindingRequest]) (*connect.Response[v1.InvokeBindingResponse], error) {
	return c.invokeBinding.CallUnary(ctx, req)
}

// GetSecret calls dapr.proto.runtime.v1.Dapr.GetSecret.
func (c *daprClient) GetSecret(ctx context.Context, req *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return c.getSecret.CallUnary(ctx, req)
}

// GetBulkSecret calls dapr.proto.runtime.v1.Dapr.GetBulkSecret.
func (c *daprClient) GetBulkSecret(ctx context.Context, req *connect.Request[v1.GetBulkSecretRequest]) (*connect.Response[v1.GetBulkSecretResponse], error) {
	return c.getBulkSecret.CallUnary(ctx, req)
}

// RegisterActorTimer calls dapr.proto.runtime.v1.Dapr.RegisterActorTimer.
func (c *daprClient) RegisterActorTimer(ctx context.Context, req *connect.Request[v1.RegisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.registerActorTimer.CallUnary(ctx, req)
}

// UnregisterActorTimer calls dapr.proto.runtime.v1.Dapr.UnregisterActorTimer.
func (c *daprClient) UnregisterActorTimer(ctx context.Context, req *connect.Request[v1.UnregisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.unregisterActorTimer.CallUnary(ctx, req)
}

// RegisterActorReminder calls dapr.proto.runtime.v1.Dapr.RegisterActorReminder.
func (c *daprClient) RegisterActorReminder(ctx context.Context, req *connect.Request[v1.RegisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.registerActorReminder.CallUnary(ctx, req)
}

// UnregisterActorReminder calls dapr.proto.runtime.v1.Dapr.UnregisterActorReminder.
func (c *daprClient) UnregisterActorReminder(ctx context.Context, req *connect.Request[v1.UnregisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.unregisterActorReminder.CallUnary(ctx, req)
}

// GetActorState calls dapr.proto.runtime.v1.Dapr.GetActorState.
func (c *daprClient) GetActorState(ctx context.Context, req *connect.Request[v1.GetActorStateRequest]) (*connect.Response[v1.GetActorStateResponse], error) {
	return c.getActorState.CallUnary(ctx, req)
}

// ExecuteActorStateTransaction calls dapr.proto.runtime.v1.Dapr.ExecuteActorStateTransaction.
func (c *daprClient) ExecuteActorStateTransaction(ctx context.Context, req *connect.Request[v1.ExecuteActorStateTransactionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.executeActorStateTransaction.CallUnary(ctx, req)
}

// InvokeActor calls dapr.proto.runtime.v1.Dapr.InvokeActor.
func (c *daprClient) InvokeActor(ctx context.Context, req *connect.Request[v1.InvokeActorRequest]) (*connect.Response[v1.InvokeActorResponse], error) {
	return c.invokeActor.CallUnary(ctx, req)
}

// GetConfigurationAlpha1 calls dapr.proto.runtime.v1.Dapr.GetConfigurationAlpha1.
func (c *daprClient) GetConfigurationAlpha1(ctx context.Context, req *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return c.getConfigurationAlpha1.CallUnary(ctx, req)
}

// GetConfiguration calls dapr.proto.runtime.v1.Dapr.GetConfiguration.
func (c *daprClient) GetConfiguration(ctx context.Context, req *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// SubscribeConfigurationAlpha1 calls dapr.proto.runtime.v1.Dapr.SubscribeConfigurationAlpha1.
func (c *daprClient) SubscribeConfigurationAlpha1(ctx context.Context, req *connect.Request[v1.SubscribeConfigurationRequest]) (*connect.ServerStreamForClient[v1.SubscribeConfigurationResponse], error) {
	return c.subscribeConfigurationAlpha1.CallServerStream(ctx, req)
}

// SubscribeConfiguration calls dapr.proto.runtime.v1.Dapr.SubscribeConfiguration.
func (c *daprClient) SubscribeConfiguration(ctx context.Context, req *connect.Request[v1.SubscribeConfigurationRequest]) (*connect.ServerStreamForClient[v1.SubscribeConfigurationResponse], error) {
	return c.subscribeConfiguration.CallServerStream(ctx, req)
}

// UnsubscribeConfigurationAlpha1 calls dapr.proto.runtime.v1.Dapr.UnsubscribeConfigurationAlpha1.
func (c *daprClient) UnsubscribeConfigurationAlpha1(ctx context.Context, req *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error) {
	return c.unsubscribeConfigurationAlpha1.CallUnary(ctx, req)
}

// UnsubscribeConfiguration calls dapr.proto.runtime.v1.Dapr.UnsubscribeConfiguration.
func (c *daprClient) UnsubscribeConfiguration(ctx context.Context, req *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error) {
	return c.unsubscribeConfiguration.CallUnary(ctx, req)
}

// TryLockAlpha1 calls dapr.proto.runtime.v1.Dapr.TryLockAlpha1.
func (c *daprClient) TryLockAlpha1(ctx context.Context, req *connect.Request[v1.TryLockRequest]) (*connect.Response[v1.TryLockResponse], error) {
	return c.tryLockAlpha1.CallUnary(ctx, req)
}

// UnlockAlpha1 calls dapr.proto.runtime.v1.Dapr.UnlockAlpha1.
func (c *daprClient) UnlockAlpha1(ctx context.Context, req *connect.Request[v1.UnlockRequest]) (*connect.Response[v1.UnlockResponse], error) {
	return c.unlockAlpha1.CallUnary(ctx, req)
}

// EncryptAlpha1 calls dapr.proto.runtime.v1.Dapr.EncryptAlpha1.
func (c *daprClient) EncryptAlpha1(ctx context.Context) *connect.BidiStreamForClient[v1.EncryptRequest, v1.EncryptResponse] {
	return c.encryptAlpha1.CallBidiStream(ctx)
}

// DecryptAlpha1 calls dapr.proto.runtime.v1.Dapr.DecryptAlpha1.
func (c *daprClient) DecryptAlpha1(ctx context.Context) *connect.BidiStreamForClient[v1.DecryptRequest, v1.DecryptResponse] {
	return c.decryptAlpha1.CallBidiStream(ctx)
}

// GetMetadata calls dapr.proto.runtime.v1.Dapr.GetMetadata.
func (c *daprClient) GetMetadata(ctx context.Context, req *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return c.getMetadata.CallUnary(ctx, req)
}

// SetMetadata calls dapr.proto.runtime.v1.Dapr.SetMetadata.
func (c *daprClient) SetMetadata(ctx context.Context, req *connect.Request[v1.SetMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setMetadata.CallUnary(ctx, req)
}

// SubtleGetKeyAlpha1 calls dapr.proto.runtime.v1.Dapr.SubtleGetKeyAlpha1.
func (c *daprClient) SubtleGetKeyAlpha1(ctx context.Context, req *connect.Request[v1.SubtleGetKeyRequest]) (*connect.Response[v1.SubtleGetKeyResponse], error) {
	return c.subtleGetKeyAlpha1.CallUnary(ctx, req)
}

// SubtleEncryptAlpha1 calls dapr.proto.runtime.v1.Dapr.SubtleEncryptAlpha1.
func (c *daprClient) SubtleEncryptAlpha1(ctx context.Context, req *connect.Request[v1.SubtleEncryptRequest]) (*connect.Response[v1.SubtleEncryptResponse], error) {
	return c.subtleEncryptAlpha1.CallUnary(ctx, req)
}

// SubtleDecryptAlpha1 calls dapr.proto.runtime.v1.Dapr.SubtleDecryptAlpha1.
func (c *daprClient) SubtleDecryptAlpha1(ctx context.Context, req *connect.Request[v1.SubtleDecryptRequest]) (*connect.Response[v1.SubtleDecryptResponse], error) {
	return c.subtleDecryptAlpha1.CallUnary(ctx, req)
}

// SubtleWrapKeyAlpha1 calls dapr.proto.runtime.v1.Dapr.SubtleWrapKeyAlpha1.
func (c *daprClient) SubtleWrapKeyAlpha1(ctx context.Context, req *connect.Request[v1.SubtleWrapKeyRequest]) (*connect.Response[v1.SubtleWrapKeyResponse], error) {
	return c.subtleWrapKeyAlpha1.CallUnary(ctx, req)
}

// SubtleUnwrapKeyAlpha1 calls dapr.proto.runtime.v1.Dapr.SubtleUnwrapKeyAlpha1.
func (c *daprClient) SubtleUnwrapKeyAlpha1(ctx context.Context, req *connect.Request[v1.SubtleUnwrapKeyRequest]) (*connect.Response[v1.SubtleUnwrapKeyResponse], error) {
	return c.subtleUnwrapKeyAlpha1.CallUnary(ctx, req)
}

// SubtleSignAlpha1 calls dapr.proto.runtime.v1.Dapr.SubtleSignAlpha1.
func (c *daprClient) SubtleSignAlpha1(ctx context.Context, req *connect.Request[v1.SubtleSignRequest]) (*connect.Response[v1.SubtleSignResponse], error) {
	return c.subtleSignAlpha1.CallUnary(ctx, req)
}

// SubtleVerifyAlpha1 calls dapr.proto.runtime.v1.Dapr.SubtleVerifyAlpha1.
func (c *daprClient) SubtleVerifyAlpha1(ctx context.Context, req *connect.Request[v1.SubtleVerifyRequest]) (*connect.Response[v1.SubtleVerifyResponse], error) {
	return c.subtleVerifyAlpha1.CallUnary(ctx, req)
}

// StartWorkflowAlpha1 calls dapr.proto.runtime.v1.Dapr.StartWorkflowAlpha1.
//
// Deprecated: do not use.
func (c *daprClient) StartWorkflowAlpha1(ctx context.Context, req *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error) {
	return c.startWorkflowAlpha1.CallUnary(ctx, req)
}

// GetWorkflowAlpha1 calls dapr.proto.runtime.v1.Dapr.GetWorkflowAlpha1.
//
// Deprecated: do not use.
func (c *daprClient) GetWorkflowAlpha1(ctx context.Context, req *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return c.getWorkflowAlpha1.CallUnary(ctx, req)
}

// PurgeWorkflowAlpha1 calls dapr.proto.runtime.v1.Dapr.PurgeWorkflowAlpha1.
//
// Deprecated: do not use.
func (c *daprClient) PurgeWorkflowAlpha1(ctx context.Context, req *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.purgeWorkflowAlpha1.CallUnary(ctx, req)
}

// TerminateWorkflowAlpha1 calls dapr.proto.runtime.v1.Dapr.TerminateWorkflowAlpha1.
//
// Deprecated: do not use.
func (c *daprClient) TerminateWorkflowAlpha1(ctx context.Context, req *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.terminateWorkflowAlpha1.CallUnary(ctx, req)
}

// PauseWorkflowAlpha1 calls dapr.proto.runtime.v1.Dapr.PauseWorkflowAlpha1.
//
// Deprecated: do not use.
func (c *daprClient) PauseWorkflowAlpha1(ctx context.Context, req *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseWorkflowAlpha1.CallUnary(ctx, req)
}

// ResumeWorkflowAlpha1 calls dapr.proto.runtime.v1.Dapr.ResumeWorkflowAlpha1.
//
// Deprecated: do not use.
func (c *daprClient) ResumeWorkflowAlpha1(ctx context.Context, req *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.resumeWorkflowAlpha1.CallUnary(ctx, req)
}

// RaiseEventWorkflowAlpha1 calls dapr.proto.runtime.v1.Dapr.RaiseEventWorkflowAlpha1.
//
// Deprecated: do not use.
func (c *daprClient) RaiseEventWorkflowAlpha1(ctx context.Context, req *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.raiseEventWorkflowAlpha1.CallUnary(ctx, req)
}

// StartWorkflowBeta1 calls dapr.proto.runtime.v1.Dapr.StartWorkflowBeta1.
func (c *daprClient) StartWorkflowBeta1(ctx context.Context, req *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error) {
	return c.startWorkflowBeta1.CallUnary(ctx, req)
}

// GetWorkflowBeta1 calls dapr.proto.runtime.v1.Dapr.GetWorkflowBeta1.
func (c *daprClient) GetWorkflowBeta1(ctx context.Context, req *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return c.getWorkflowBeta1.CallUnary(ctx, req)
}

// PurgeWorkflowBeta1 calls dapr.proto.runtime.v1.Dapr.PurgeWorkflowBeta1.
func (c *daprClient) PurgeWorkflowBeta1(ctx context.Context, req *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.purgeWorkflowBeta1.CallUnary(ctx, req)
}

// TerminateWorkflowBeta1 calls dapr.proto.runtime.v1.Dapr.TerminateWorkflowBeta1.
func (c *daprClient) TerminateWorkflowBeta1(ctx context.Context, req *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.terminateWorkflowBeta1.CallUnary(ctx, req)
}

// PauseWorkflowBeta1 calls dapr.proto.runtime.v1.Dapr.PauseWorkflowBeta1.
func (c *daprClient) PauseWorkflowBeta1(ctx context.Context, req *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseWorkflowBeta1.CallUnary(ctx, req)
}

// ResumeWorkflowBeta1 calls dapr.proto.runtime.v1.Dapr.ResumeWorkflowBeta1.
func (c *daprClient) ResumeWorkflowBeta1(ctx context.Context, req *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.resumeWorkflowBeta1.CallUnary(ctx, req)
}

// RaiseEventWorkflowBeta1 calls dapr.proto.runtime.v1.Dapr.RaiseEventWorkflowBeta1.
func (c *daprClient) RaiseEventWorkflowBeta1(ctx context.Context, req *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.raiseEventWorkflowBeta1.CallUnary(ctx, req)
}

// Shutdown calls dapr.proto.runtime.v1.Dapr.Shutdown.
func (c *daprClient) Shutdown(ctx context.Context, req *connect.Request[v1.ShutdownRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.shutdown.CallUnary(ctx, req)
}

// ScheduleJobAlpha1 calls dapr.proto.runtime.v1.Dapr.ScheduleJobAlpha1.
func (c *daprClient) ScheduleJobAlpha1(ctx context.Context, req *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error) {
	return c.scheduleJobAlpha1.CallUnary(ctx, req)
}

// GetJobAlpha1 calls dapr.proto.runtime.v1.Dapr.GetJobAlpha1.
func (c *daprClient) GetJobAlpha1(ctx context.Context, req *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return c.getJobAlpha1.CallUnary(ctx, req)
}

// DeleteJobAlpha1 calls dapr.proto.runtime.v1.Dapr.DeleteJobAlpha1.
func (c *daprClient) DeleteJobAlpha1(ctx context.Context, req *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return c.deleteJobAlpha1.CallUnary(ctx, req)
}

// ConverseAlpha1 calls dapr.proto.runtime.v1.Dapr.ConverseAlpha1.
func (c *daprClient) ConverseAlpha1(ctx context.Context, req *connect.Request[v1.ConversationRequest]) (*connect.Response[v1.ConversationResponse], error) {
	return c.converseAlpha1.CallUnary(ctx, req)
}

// ConverseAlpha2 calls dapr.proto.runtime.v1.Dapr.ConverseAlpha2.
func (c *daprClient) ConverseAlpha2(ctx context.Context, req *connect.Request[v1.ConversationRequestAlpha2]) (*connect.Response[v1.ConversationResponseAlpha2], error) {
	return c.converseAlpha2.CallUnary(ctx, req)
}

// DaprHandler is an implementation of the dapr.proto.runtime.v1.Dapr service.
type DaprHandler interface {
	// Invokes a method on a remote Dapr app.
	// Deprecated: Use proxy mode service invocation instead.
	InvokeService(context.Context, *connect.Request[v1.InvokeServiceRequest]) (*connect.Response[v11.InvokeResponse], error)
	// Gets the state for a specific key.
	GetState(context.Context, *connect.Request[v1.GetStateRequest]) (*connect.Response[v1.GetStateResponse], error)
	// Gets a bulk of state items for a list of keys
	GetBulkState(context.Context, *connect.Request[v1.GetBulkStateRequest]) (*connect.Response[v1.GetBulkStateResponse], error)
	// Saves the state for a specific key.
	SaveState(context.Context, *connect.Request[v1.SaveStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Queries the state.
	QueryStateAlpha1(context.Context, *connect.Request[v1.QueryStateRequest]) (*connect.Response[v1.QueryStateResponse], error)
	// Deletes the state for a specific key.
	DeleteState(context.Context, *connect.Request[v1.DeleteStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Deletes a bulk of state items for a list of keys
	DeleteBulkState(context.Context, *connect.Request[v1.DeleteBulkStateRequest]) (*connect.Response[emptypb.Empty], error)
	// Executes transactions for a specified store
	ExecuteStateTransaction(context.Context, *connect.Request[v1.ExecuteStateTransactionRequest]) (*connect.Response[emptypb.Empty], error)
	// Publishes events to the specific topic.
	PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[emptypb.Empty], error)
	// Bulk Publishes multiple events to the specified topic.
	BulkPublishEventAlpha1(context.Context, *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error)
	// SubscribeTopicEventsAlpha1 subscribes to a PubSub topic and receives topic
	// events from it.
	SubscribeTopicEventsAlpha1(context.Context, *connect.BidiStream[v1.SubscribeTopicEventsRequestAlpha1, v1.SubscribeTopicEventsResponseAlpha1]) error
	// Invokes binding data to specific output bindings
	InvokeBinding(context.Context, *connect.Request[v1.InvokeBindingRequest]) (*connect.Response[v1.InvokeBindingResponse], error)
	// Gets secrets from secret stores.
	GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	// Gets a bulk of secrets
	GetBulkSecret(context.Context, *connect.Request[v1.GetBulkSecretRequest]) (*connect.Response[v1.GetBulkSecretResponse], error)
	// Register an actor timer.
	RegisterActorTimer(context.Context, *connect.Request[v1.RegisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error)
	// Unregister an actor timer.
	UnregisterActorTimer(context.Context, *connect.Request[v1.UnregisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error)
	// Register an actor reminder.
	RegisterActorReminder(context.Context, *connect.Request[v1.RegisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error)
	// Unregister an actor reminder.
	UnregisterActorReminder(context.Context, *connect.Request[v1.UnregisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error)
	// Gets the state for a specific actor.
	GetActorState(context.Context, *connect.Request[v1.GetActorStateRequest]) (*connect.Response[v1.GetActorStateResponse], error)
	// Executes state transactions for a specified actor
	ExecuteActorStateTransaction(context.Context, *connect.Request[v1.ExecuteActorStateTransactionRequest]) (*connect.Response[emptypb.Empty], error)
	// InvokeActor calls a method on an actor.
	InvokeActor(context.Context, *connect.Request[v1.InvokeActorRequest]) (*connect.Response[v1.InvokeActorResponse], error)
	// GetConfiguration gets configuration from configuration store.
	GetConfigurationAlpha1(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	// GetConfiguration gets configuration from configuration store.
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	// SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
	SubscribeConfigurationAlpha1(context.Context, *connect.Request[v1.SubscribeConfigurationRequest], *connect.ServerStream[v1.SubscribeConfigurationResponse]) error
	// SubscribeConfiguration gets configuration from configuration store and subscribe the updates event by grpc stream
	SubscribeConfiguration(context.Context, *connect.Request[v1.SubscribeConfigurationRequest], *connect.ServerStream[v1.SubscribeConfigurationResponse]) error
	// UnSubscribeConfiguration unsubscribe the subscription of configuration
	UnsubscribeConfigurationAlpha1(context.Context, *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error)
	// UnSubscribeConfiguration unsubscribe the subscription of configuration
	UnsubscribeConfiguration(context.Context, *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error)
	// TryLockAlpha1 tries to get a lock with an expiry.
	TryLockAlpha1(context.Context, *connect.Request[v1.TryLockRequest]) (*connect.Response[v1.TryLockResponse], error)
	// UnlockAlpha1 unlocks a lock.
	UnlockAlpha1(context.Context, *connect.Request[v1.UnlockRequest]) (*connect.Response[v1.UnlockResponse], error)
	// EncryptAlpha1 encrypts a message using the Dapr encryption scheme and a key stored in the vault.
	EncryptAlpha1(context.Context, *connect.BidiStream[v1.EncryptRequest, v1.EncryptResponse]) error
	// DecryptAlpha1 decrypts a message using the Dapr encryption scheme and a key stored in the vault.
	DecryptAlpha1(context.Context, *connect.BidiStream[v1.DecryptRequest, v1.DecryptResponse]) error
	// Gets metadata of the sidecar
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	// Sets value in extended metadata of the sidecar
	SetMetadata(context.Context, *connect.Request[v1.SetMetadataRequest]) (*connect.Response[emptypb.Empty], error)
	// SubtleGetKeyAlpha1 returns the public part of an asymmetric key stored in the vault.
	SubtleGetKeyAlpha1(context.Context, *connect.Request[v1.SubtleGetKeyRequest]) (*connect.Response[v1.SubtleGetKeyResponse], error)
	// SubtleEncryptAlpha1 encrypts a small message using a key stored in the vault.
	SubtleEncryptAlpha1(context.Context, *connect.Request[v1.SubtleEncryptRequest]) (*connect.Response[v1.SubtleEncryptResponse], error)
	// SubtleDecryptAlpha1 decrypts a small message using a key stored in the vault.
	SubtleDecryptAlpha1(context.Context, *connect.Request[v1.SubtleDecryptRequest]) (*connect.Response[v1.SubtleDecryptResponse], error)
	// SubtleWrapKeyAlpha1 wraps a key using a key stored in the vault.
	SubtleWrapKeyAlpha1(context.Context, *connect.Request[v1.SubtleWrapKeyRequest]) (*connect.Response[v1.SubtleWrapKeyResponse], error)
	// SubtleUnwrapKeyAlpha1 unwraps a key using a key stored in the vault.
	SubtleUnwrapKeyAlpha1(context.Context, *connect.Request[v1.SubtleUnwrapKeyRequest]) (*connect.Response[v1.SubtleUnwrapKeyResponse], error)
	// SubtleSignAlpha1 signs a message using a key stored in the vault.
	SubtleSignAlpha1(context.Context, *connect.Request[v1.SubtleSignRequest]) (*connect.Response[v1.SubtleSignResponse], error)
	// SubtleVerifyAlpha1 verifies the signature of a message using a key stored in the vault.
	SubtleVerifyAlpha1(context.Context, *connect.Request[v1.SubtleVerifyRequest]) (*connect.Response[v1.SubtleVerifyResponse], error)
	// Starts a new instance of a workflow
	//
	// Deprecated: do not use.
	StartWorkflowAlpha1(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error)
	// Gets details about a started workflow instance
	//
	// Deprecated: do not use.
	GetWorkflowAlpha1(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	// Purge Workflow
	//
	// Deprecated: do not use.
	PurgeWorkflowAlpha1(context.Context, *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Terminates a running workflow instance
	//
	// Deprecated: do not use.
	TerminateWorkflowAlpha1(context.Context, *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Pauses a running workflow instance
	//
	// Deprecated: do not use.
	PauseWorkflowAlpha1(context.Context, *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Resumes a paused workflow instance
	//
	// Deprecated: do not use.
	ResumeWorkflowAlpha1(context.Context, *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Raise an event to a running workflow instance
	//
	// Deprecated: do not use.
	RaiseEventWorkflowAlpha1(context.Context, *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Starts a new instance of a workflow
	StartWorkflowBeta1(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error)
	// Gets details about a started workflow instance
	GetWorkflowBeta1(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error)
	// Purge Workflow
	PurgeWorkflowBeta1(context.Context, *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Terminates a running workflow instance
	TerminateWorkflowBeta1(context.Context, *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Pauses a running workflow instance
	PauseWorkflowBeta1(context.Context, *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Resumes a paused workflow instance
	ResumeWorkflowBeta1(context.Context, *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Raise an event to a running workflow instance
	RaiseEventWorkflowBeta1(context.Context, *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error)
	// Shutdown the sidecar
	Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[emptypb.Empty], error)
	// Create and schedule a job
	ScheduleJobAlpha1(context.Context, *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error)
	// Gets a scheduled job
	GetJobAlpha1(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	// Delete a job
	DeleteJobAlpha1(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	// Converse with a LLM service
	ConverseAlpha1(context.Context, *connect.Request[v1.ConversationRequest]) (*connect.Response[v1.ConversationResponse], error)
	// Converse with a LLM service via alpha2 api
	ConverseAlpha2(context.Context, *connect.Request[v1.ConversationRequestAlpha2]) (*connect.Response[v1.ConversationResponseAlpha2], error)
}

// NewDaprHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDaprHandler(svc DaprHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	daprInvokeServiceHandler := connect.NewUnaryHandler(
		DaprInvokeServiceProcedure,
		svc.InvokeService,
		opts...,
	)
	daprGetStateHandler := connect.NewUnaryHandler(
		DaprGetStateProcedure,
		svc.GetState,
		opts...,
	)
	daprGetBulkStateHandler := connect.NewUnaryHandler(
		DaprGetBulkStateProcedure,
		svc.GetBulkState,
		opts...,
	)
	daprSaveStateHandler := connect.NewUnaryHandler(
		DaprSaveStateProcedure,
		svc.SaveState,
		opts...,
	)
	daprQueryStateAlpha1Handler := connect.NewUnaryHandler(
		DaprQueryStateAlpha1Procedure,
		svc.QueryStateAlpha1,
		opts...,
	)
	daprDeleteStateHandler := connect.NewUnaryHandler(
		DaprDeleteStateProcedure,
		svc.DeleteState,
		opts...,
	)
	daprDeleteBulkStateHandler := connect.NewUnaryHandler(
		DaprDeleteBulkStateProcedure,
		svc.DeleteBulkState,
		opts...,
	)
	daprExecuteStateTransactionHandler := connect.NewUnaryHandler(
		DaprExecuteStateTransactionProcedure,
		svc.ExecuteStateTransaction,
		opts...,
	)
	daprPublishEventHandler := connect.NewUnaryHandler(
		DaprPublishEventProcedure,
		svc.PublishEvent,
		opts...,
	)
	daprBulkPublishEventAlpha1Handler := connect.NewUnaryHandler(
		DaprBulkPublishEventAlpha1Procedure,
		svc.BulkPublishEventAlpha1,
		opts...,
	)
	daprSubscribeTopicEventsAlpha1Handler := connect.NewBidiStreamHandler(
		DaprSubscribeTopicEventsAlpha1Procedure,
		svc.SubscribeTopicEventsAlpha1,
		opts...,
	)
	daprInvokeBindingHandler := connect.NewUnaryHandler(
		DaprInvokeBindingProcedure,
		svc.InvokeBinding,
		opts...,
	)
	daprGetSecretHandler := connect.NewUnaryHandler(
		DaprGetSecretProcedure,
		svc.GetSecret,
		opts...,
	)
	daprGetBulkSecretHandler := connect.NewUnaryHandler(
		DaprGetBulkSecretProcedure,
		svc.GetBulkSecret,
		opts...,
	)
	daprRegisterActorTimerHandler := connect.NewUnaryHandler(
		DaprRegisterActorTimerProcedure,
		svc.RegisterActorTimer,
		opts...,
	)
	daprUnregisterActorTimerHandler := connect.NewUnaryHandler(
		DaprUnregisterActorTimerProcedure,
		svc.UnregisterActorTimer,
		opts...,
	)
	daprRegisterActorReminderHandler := connect.NewUnaryHandler(
		DaprRegisterActorReminderProcedure,
		svc.RegisterActorReminder,
		opts...,
	)
	daprUnregisterActorReminderHandler := connect.NewUnaryHandler(
		DaprUnregisterActorReminderProcedure,
		svc.UnregisterActorReminder,
		opts...,
	)
	daprGetActorStateHandler := connect.NewUnaryHandler(
		DaprGetActorStateProcedure,
		svc.GetActorState,
		opts...,
	)
	daprExecuteActorStateTransactionHandler := connect.NewUnaryHandler(
		DaprExecuteActorStateTransactionProcedure,
		svc.ExecuteActorStateTransaction,
		opts...,
	)
	daprInvokeActorHandler := connect.NewUnaryHandler(
		DaprInvokeActorProcedure,
		svc.InvokeActor,
		opts...,
	)
	daprGetConfigurationAlpha1Handler := connect.NewUnaryHandler(
		DaprGetConfigurationAlpha1Procedure,
		svc.GetConfigurationAlpha1,
		opts...,
	)
	daprGetConfigurationHandler := connect.NewUnaryHandler(
		DaprGetConfigurationProcedure,
		svc.GetConfiguration,
		opts...,
	)
	daprSubscribeConfigurationAlpha1Handler := connect.NewServerStreamHandler(
		DaprSubscribeConfigurationAlpha1Procedure,
		svc.SubscribeConfigurationAlpha1,
		opts...,
	)
	daprSubscribeConfigurationHandler := connect.NewServerStreamHandler(
		DaprSubscribeConfigurationProcedure,
		svc.SubscribeConfiguration,
		opts...,
	)
	daprUnsubscribeConfigurationAlpha1Handler := connect.NewUnaryHandler(
		DaprUnsubscribeConfigurationAlpha1Procedure,
		svc.UnsubscribeConfigurationAlpha1,
		opts...,
	)
	daprUnsubscribeConfigurationHandler := connect.NewUnaryHandler(
		DaprUnsubscribeConfigurationProcedure,
		svc.UnsubscribeConfiguration,
		opts...,
	)
	daprTryLockAlpha1Handler := connect.NewUnaryHandler(
		DaprTryLockAlpha1Procedure,
		svc.TryLockAlpha1,
		opts...,
	)
	daprUnlockAlpha1Handler := connect.NewUnaryHandler(
		DaprUnlockAlpha1Procedure,
		svc.UnlockAlpha1,
		opts...,
	)
	daprEncryptAlpha1Handler := connect.NewBidiStreamHandler(
		DaprEncryptAlpha1Procedure,
		svc.EncryptAlpha1,
		opts...,
	)
	daprDecryptAlpha1Handler := connect.NewBidiStreamHandler(
		DaprDecryptAlpha1Procedure,
		svc.DecryptAlpha1,
		opts...,
	)
	daprGetMetadataHandler := connect.NewUnaryHandler(
		DaprGetMetadataProcedure,
		svc.GetMetadata,
		opts...,
	)
	daprSetMetadataHandler := connect.NewUnaryHandler(
		DaprSetMetadataProcedure,
		svc.SetMetadata,
		opts...,
	)
	daprSubtleGetKeyAlpha1Handler := connect.NewUnaryHandler(
		DaprSubtleGetKeyAlpha1Procedure,
		svc.SubtleGetKeyAlpha1,
		opts...,
	)
	daprSubtleEncryptAlpha1Handler := connect.NewUnaryHandler(
		DaprSubtleEncryptAlpha1Procedure,
		svc.SubtleEncryptAlpha1,
		opts...,
	)
	daprSubtleDecryptAlpha1Handler := connect.NewUnaryHandler(
		DaprSubtleDecryptAlpha1Procedure,
		svc.SubtleDecryptAlpha1,
		opts...,
	)
	daprSubtleWrapKeyAlpha1Handler := connect.NewUnaryHandler(
		DaprSubtleWrapKeyAlpha1Procedure,
		svc.SubtleWrapKeyAlpha1,
		opts...,
	)
	daprSubtleUnwrapKeyAlpha1Handler := connect.NewUnaryHandler(
		DaprSubtleUnwrapKeyAlpha1Procedure,
		svc.SubtleUnwrapKeyAlpha1,
		opts...,
	)
	daprSubtleSignAlpha1Handler := connect.NewUnaryHandler(
		DaprSubtleSignAlpha1Procedure,
		svc.SubtleSignAlpha1,
		opts...,
	)
	daprSubtleVerifyAlpha1Handler := connect.NewUnaryHandler(
		DaprSubtleVerifyAlpha1Procedure,
		svc.SubtleVerifyAlpha1,
		opts...,
	)
	daprStartWorkflowAlpha1Handler := connect.NewUnaryHandler(
		DaprStartWorkflowAlpha1Procedure,
		svc.StartWorkflowAlpha1,
		opts...,
	)
	daprGetWorkflowAlpha1Handler := connect.NewUnaryHandler(
		DaprGetWorkflowAlpha1Procedure,
		svc.GetWorkflowAlpha1,
		opts...,
	)
	daprPurgeWorkflowAlpha1Handler := connect.NewUnaryHandler(
		DaprPurgeWorkflowAlpha1Procedure,
		svc.PurgeWorkflowAlpha1,
		opts...,
	)
	daprTerminateWorkflowAlpha1Handler := connect.NewUnaryHandler(
		DaprTerminateWorkflowAlpha1Procedure,
		svc.TerminateWorkflowAlpha1,
		opts...,
	)
	daprPauseWorkflowAlpha1Handler := connect.NewUnaryHandler(
		DaprPauseWorkflowAlpha1Procedure,
		svc.PauseWorkflowAlpha1,
		opts...,
	)
	daprResumeWorkflowAlpha1Handler := connect.NewUnaryHandler(
		DaprResumeWorkflowAlpha1Procedure,
		svc.ResumeWorkflowAlpha1,
		opts...,
	)
	daprRaiseEventWorkflowAlpha1Handler := connect.NewUnaryHandler(
		DaprRaiseEventWorkflowAlpha1Procedure,
		svc.RaiseEventWorkflowAlpha1,
		opts...,
	)
	daprStartWorkflowBeta1Handler := connect.NewUnaryHandler(
		DaprStartWorkflowBeta1Procedure,
		svc.StartWorkflowBeta1,
		opts...,
	)
	daprGetWorkflowBeta1Handler := connect.NewUnaryHandler(
		DaprGetWorkflowBeta1Procedure,
		svc.GetWorkflowBeta1,
		opts...,
	)
	daprPurgeWorkflowBeta1Handler := connect.NewUnaryHandler(
		DaprPurgeWorkflowBeta1Procedure,
		svc.PurgeWorkflowBeta1,
		opts...,
	)
	daprTerminateWorkflowBeta1Handler := connect.NewUnaryHandler(
		DaprTerminateWorkflowBeta1Procedure,
		svc.TerminateWorkflowBeta1,
		opts...,
	)
	daprPauseWorkflowBeta1Handler := connect.NewUnaryHandler(
		DaprPauseWorkflowBeta1Procedure,
		svc.PauseWorkflowBeta1,
		opts...,
	)
	daprResumeWorkflowBeta1Handler := connect.NewUnaryHandler(
		DaprResumeWorkflowBeta1Procedure,
		svc.ResumeWorkflowBeta1,
		opts...,
	)
	daprRaiseEventWorkflowBeta1Handler := connect.NewUnaryHandler(
		DaprRaiseEventWorkflowBeta1Procedure,
		svc.RaiseEventWorkflowBeta1,
		opts...,
	)
	daprShutdownHandler := connect.NewUnaryHandler(
		DaprShutdownProcedure,
		svc.Shutdown,
		opts...,
	)
	daprScheduleJobAlpha1Handler := connect.NewUnaryHandler(
		DaprScheduleJobAlpha1Procedure,
		svc.ScheduleJobAlpha1,
		opts...,
	)
	daprGetJobAlpha1Handler := connect.NewUnaryHandler(
		DaprGetJobAlpha1Procedure,
		svc.GetJobAlpha1,
		opts...,
	)
	daprDeleteJobAlpha1Handler := connect.NewUnaryHandler(
		DaprDeleteJobAlpha1Procedure,
		svc.DeleteJobAlpha1,
		opts...,
	)
	daprConverseAlpha1Handler := connect.NewUnaryHandler(
		DaprConverseAlpha1Procedure,
		svc.ConverseAlpha1,
		opts...,
	)
	daprConverseAlpha2Handler := connect.NewUnaryHandler(
		DaprConverseAlpha2Procedure,
		svc.ConverseAlpha2,
		opts...,
	)
	return "/dapr.proto.runtime.v1.Dapr/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DaprInvokeServiceProcedure:
			daprInvokeServiceHandler.ServeHTTP(w, r)
		case DaprGetStateProcedure:
			daprGetStateHandler.ServeHTTP(w, r)
		case DaprGetBulkStateProcedure:
			daprGetBulkStateHandler.ServeHTTP(w, r)
		case DaprSaveStateProcedure:
			daprSaveStateHandler.ServeHTTP(w, r)
		case DaprQueryStateAlpha1Procedure:
			daprQueryStateAlpha1Handler.ServeHTTP(w, r)
		case DaprDeleteStateProcedure:
			daprDeleteStateHandler.ServeHTTP(w, r)
		case DaprDeleteBulkStateProcedure:
			daprDeleteBulkStateHandler.ServeHTTP(w, r)
		case DaprExecuteStateTransactionProcedure:
			daprExecuteStateTransactionHandler.ServeHTTP(w, r)
		case DaprPublishEventProcedure:
			daprPublishEventHandler.ServeHTTP(w, r)
		case DaprBulkPublishEventAlpha1Procedure:
			daprBulkPublishEventAlpha1Handler.ServeHTTP(w, r)
		case DaprSubscribeTopicEventsAlpha1Procedure:
			daprSubscribeTopicEventsAlpha1Handler.ServeHTTP(w, r)
		case DaprInvokeBindingProcedure:
			daprInvokeBindingHandler.ServeHTTP(w, r)
		case DaprGetSecretProcedure:
			daprGetSecretHandler.ServeHTTP(w, r)
		case DaprGetBulkSecretProcedure:
			daprGetBulkSecretHandler.ServeHTTP(w, r)
		case DaprRegisterActorTimerProcedure:
			daprRegisterActorTimerHandler.ServeHTTP(w, r)
		case DaprUnregisterActorTimerProcedure:
			daprUnregisterActorTimerHandler.ServeHTTP(w, r)
		case DaprRegisterActorReminderProcedure:
			daprRegisterActorReminderHandler.ServeHTTP(w, r)
		case DaprUnregisterActorReminderProcedure:
			daprUnregisterActorReminderHandler.ServeHTTP(w, r)
		case DaprGetActorStateProcedure:
			daprGetActorStateHandler.ServeHTTP(w, r)
		case DaprExecuteActorStateTransactionProcedure:
			daprExecuteActorStateTransactionHandler.ServeHTTP(w, r)
		case DaprInvokeActorProcedure:
			daprInvokeActorHandler.ServeHTTP(w, r)
		case DaprGetConfigurationAlpha1Procedure:
			daprGetConfigurationAlpha1Handler.ServeHTTP(w, r)
		case DaprGetConfigurationProcedure:
			daprGetConfigurationHandler.ServeHTTP(w, r)
		case DaprSubscribeConfigurationAlpha1Procedure:
			daprSubscribeConfigurationAlpha1Handler.ServeHTTP(w, r)
		case DaprSubscribeConfigurationProcedure:
			daprSubscribeConfigurationHandler.ServeHTTP(w, r)
		case DaprUnsubscribeConfigurationAlpha1Procedure:
			daprUnsubscribeConfigurationAlpha1Handler.ServeHTTP(w, r)
		case DaprUnsubscribeConfigurationProcedure:
			daprUnsubscribeConfigurationHandler.ServeHTTP(w, r)
		case DaprTryLockAlpha1Procedure:
			daprTryLockAlpha1Handler.ServeHTTP(w, r)
		case DaprUnlockAlpha1Procedure:
			daprUnlockAlpha1Handler.ServeHTTP(w, r)
		case DaprEncryptAlpha1Procedure:
			daprEncryptAlpha1Handler.ServeHTTP(w, r)
		case DaprDecryptAlpha1Procedure:
			daprDecryptAlpha1Handler.ServeHTTP(w, r)
		case DaprGetMetadataProcedure:
			daprGetMetadataHandler.ServeHTTP(w, r)
		case DaprSetMetadataProcedure:
			daprSetMetadataHandler.ServeHTTP(w, r)
		case DaprSubtleGetKeyAlpha1Procedure:
			daprSubtleGetKeyAlpha1Handler.ServeHTTP(w, r)
		case DaprSubtleEncryptAlpha1Procedure:
			daprSubtleEncryptAlpha1Handler.ServeHTTP(w, r)
		case DaprSubtleDecryptAlpha1Procedure:
			daprSubtleDecryptAlpha1Handler.ServeHTTP(w, r)
		case DaprSubtleWrapKeyAlpha1Procedure:
			daprSubtleWrapKeyAlpha1Handler.ServeHTTP(w, r)
		case DaprSubtleUnwrapKeyAlpha1Procedure:
			daprSubtleUnwrapKeyAlpha1Handler.ServeHTTP(w, r)
		case DaprSubtleSignAlpha1Procedure:
			daprSubtleSignAlpha1Handler.ServeHTTP(w, r)
		case DaprSubtleVerifyAlpha1Procedure:
			daprSubtleVerifyAlpha1Handler.ServeHTTP(w, r)
		case DaprStartWorkflowAlpha1Procedure:
			daprStartWorkflowAlpha1Handler.ServeHTTP(w, r)
		case DaprGetWorkflowAlpha1Procedure:
			daprGetWorkflowAlpha1Handler.ServeHTTP(w, r)
		case DaprPurgeWorkflowAlpha1Procedure:
			daprPurgeWorkflowAlpha1Handler.ServeHTTP(w, r)
		case DaprTerminateWorkflowAlpha1Procedure:
			daprTerminateWorkflowAlpha1Handler.ServeHTTP(w, r)
		case DaprPauseWorkflowAlpha1Procedure:
			daprPauseWorkflowAlpha1Handler.ServeHTTP(w, r)
		case DaprResumeWorkflowAlpha1Procedure:
			daprResumeWorkflowAlpha1Handler.ServeHTTP(w, r)
		case DaprRaiseEventWorkflowAlpha1Procedure:
			daprRaiseEventWorkflowAlpha1Handler.ServeHTTP(w, r)
		case DaprStartWorkflowBeta1Procedure:
			daprStartWorkflowBeta1Handler.ServeHTTP(w, r)
		case DaprGetWorkflowBeta1Procedure:
			daprGetWorkflowBeta1Handler.ServeHTTP(w, r)
		case DaprPurgeWorkflowBeta1Procedure:
			daprPurgeWorkflowBeta1Handler.ServeHTTP(w, r)
		case DaprTerminateWorkflowBeta1Procedure:
			daprTerminateWorkflowBeta1Handler.ServeHTTP(w, r)
		case DaprPauseWorkflowBeta1Procedure:
			daprPauseWorkflowBeta1Handler.ServeHTTP(w, r)
		case DaprResumeWorkflowBeta1Procedure:
			daprResumeWorkflowBeta1Handler.ServeHTTP(w, r)
		case DaprRaiseEventWorkflowBeta1Procedure:
			daprRaiseEventWorkflowBeta1Handler.ServeHTTP(w, r)
		case DaprShutdownProcedure:
			daprShutdownHandler.ServeHTTP(w, r)
		case DaprScheduleJobAlpha1Procedure:
			daprScheduleJobAlpha1Handler.ServeHTTP(w, r)
		case DaprGetJobAlpha1Procedure:
			daprGetJobAlpha1Handler.ServeHTTP(w, r)
		case DaprDeleteJobAlpha1Procedure:
			daprDeleteJobAlpha1Handler.ServeHTTP(w, r)
		case DaprConverseAlpha1Procedure:
			daprConverseAlpha1Handler.ServeHTTP(w, r)
		case DaprConverseAlpha2Procedure:
			daprConverseAlpha2Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDaprHandler returns CodeUnimplemented from all methods.
type UnimplementedDaprHandler struct{}

func (UnimplementedDaprHandler) InvokeService(context.Context, *connect.Request[v1.InvokeServiceRequest]) (*connect.Response[v11.InvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.InvokeService is not implemented"))
}

func (UnimplementedDaprHandler) GetState(context.Context, *connect.Request[v1.GetStateRequest]) (*connect.Response[v1.GetStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetState is not implemented"))
}

func (UnimplementedDaprHandler) GetBulkState(context.Context, *connect.Request[v1.GetBulkStateRequest]) (*connect.Response[v1.GetBulkStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetBulkState is not implemented"))
}

func (UnimplementedDaprHandler) SaveState(context.Context, *connect.Request[v1.SaveStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SaveState is not implemented"))
}

func (UnimplementedDaprHandler) QueryStateAlpha1(context.Context, *connect.Request[v1.QueryStateRequest]) (*connect.Response[v1.QueryStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.QueryStateAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) DeleteState(context.Context, *connect.Request[v1.DeleteStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.DeleteState is not implemented"))
}

func (UnimplementedDaprHandler) DeleteBulkState(context.Context, *connect.Request[v1.DeleteBulkStateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.DeleteBulkState is not implemented"))
}

func (UnimplementedDaprHandler) ExecuteStateTransaction(context.Context, *connect.Request[v1.ExecuteStateTransactionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.ExecuteStateTransaction is not implemented"))
}

func (UnimplementedDaprHandler) PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.PublishEvent is not implemented"))
}

func (UnimplementedDaprHandler) BulkPublishEventAlpha1(context.Context, *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.BulkPublishEventAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubscribeTopicEventsAlpha1(context.Context, *connect.BidiStream[v1.SubscribeTopicEventsRequestAlpha1, v1.SubscribeTopicEventsResponseAlpha1]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubscribeTopicEventsAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) InvokeBinding(context.Context, *connect.Request[v1.InvokeBindingRequest]) (*connect.Response[v1.InvokeBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.InvokeBinding is not implemented"))
}

func (UnimplementedDaprHandler) GetSecret(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetSecret is not implemented"))
}

func (UnimplementedDaprHandler) GetBulkSecret(context.Context, *connect.Request[v1.GetBulkSecretRequest]) (*connect.Response[v1.GetBulkSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetBulkSecret is not implemented"))
}

func (UnimplementedDaprHandler) RegisterActorTimer(context.Context, *connect.Request[v1.RegisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.RegisterActorTimer is not implemented"))
}

func (UnimplementedDaprHandler) UnregisterActorTimer(context.Context, *connect.Request[v1.UnregisterActorTimerRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.UnregisterActorTimer is not implemented"))
}

func (UnimplementedDaprHandler) RegisterActorReminder(context.Context, *connect.Request[v1.RegisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.RegisterActorReminder is not implemented"))
}

func (UnimplementedDaprHandler) UnregisterActorReminder(context.Context, *connect.Request[v1.UnregisterActorReminderRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.UnregisterActorReminder is not implemented"))
}

func (UnimplementedDaprHandler) GetActorState(context.Context, *connect.Request[v1.GetActorStateRequest]) (*connect.Response[v1.GetActorStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetActorState is not implemented"))
}

func (UnimplementedDaprHandler) ExecuteActorStateTransaction(context.Context, *connect.Request[v1.ExecuteActorStateTransactionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.ExecuteActorStateTransaction is not implemented"))
}

func (UnimplementedDaprHandler) InvokeActor(context.Context, *connect.Request[v1.InvokeActorRequest]) (*connect.Response[v1.InvokeActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.InvokeActor is not implemented"))
}

func (UnimplementedDaprHandler) GetConfigurationAlpha1(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetConfigurationAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetConfiguration is not implemented"))
}

func (UnimplementedDaprHandler) SubscribeConfigurationAlpha1(context.Context, *connect.Request[v1.SubscribeConfigurationRequest], *connect.ServerStream[v1.SubscribeConfigurationResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubscribeConfigurationAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubscribeConfiguration(context.Context, *connect.Request[v1.SubscribeConfigurationRequest], *connect.ServerStream[v1.SubscribeConfigurationResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubscribeConfiguration is not implemented"))
}

func (UnimplementedDaprHandler) UnsubscribeConfigurationAlpha1(context.Context, *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.UnsubscribeConfigurationAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) UnsubscribeConfiguration(context.Context, *connect.Request[v1.UnsubscribeConfigurationRequest]) (*connect.Response[v1.UnsubscribeConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.UnsubscribeConfiguration is not implemented"))
}

func (UnimplementedDaprHandler) TryLockAlpha1(context.Context, *connect.Request[v1.TryLockRequest]) (*connect.Response[v1.TryLockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.TryLockAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) UnlockAlpha1(context.Context, *connect.Request[v1.UnlockRequest]) (*connect.Response[v1.UnlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.UnlockAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) EncryptAlpha1(context.Context, *connect.BidiStream[v1.EncryptRequest, v1.EncryptResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.EncryptAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) DecryptAlpha1(context.Context, *connect.BidiStream[v1.DecryptRequest, v1.DecryptResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.DecryptAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetMetadata is not implemented"))
}

func (UnimplementedDaprHandler) SetMetadata(context.Context, *connect.Request[v1.SetMetadataRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SetMetadata is not implemented"))
}

func (UnimplementedDaprHandler) SubtleGetKeyAlpha1(context.Context, *connect.Request[v1.SubtleGetKeyRequest]) (*connect.Response[v1.SubtleGetKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubtleGetKeyAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubtleEncryptAlpha1(context.Context, *connect.Request[v1.SubtleEncryptRequest]) (*connect.Response[v1.SubtleEncryptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubtleEncryptAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubtleDecryptAlpha1(context.Context, *connect.Request[v1.SubtleDecryptRequest]) (*connect.Response[v1.SubtleDecryptResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubtleDecryptAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubtleWrapKeyAlpha1(context.Context, *connect.Request[v1.SubtleWrapKeyRequest]) (*connect.Response[v1.SubtleWrapKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubtleWrapKeyAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubtleUnwrapKeyAlpha1(context.Context, *connect.Request[v1.SubtleUnwrapKeyRequest]) (*connect.Response[v1.SubtleUnwrapKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubtleUnwrapKeyAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubtleSignAlpha1(context.Context, *connect.Request[v1.SubtleSignRequest]) (*connect.Response[v1.SubtleSignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubtleSignAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) SubtleVerifyAlpha1(context.Context, *connect.Request[v1.SubtleVerifyRequest]) (*connect.Response[v1.SubtleVerifyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.SubtleVerifyAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) StartWorkflowAlpha1(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.StartWorkflowAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) GetWorkflowAlpha1(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetWorkflowAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) PurgeWorkflowAlpha1(context.Context, *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.PurgeWorkflowAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) TerminateWorkflowAlpha1(context.Context, *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.TerminateWorkflowAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) PauseWorkflowAlpha1(context.Context, *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.PauseWorkflowAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) ResumeWorkflowAlpha1(context.Context, *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.ResumeWorkflowAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) RaiseEventWorkflowAlpha1(context.Context, *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.RaiseEventWorkflowAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) StartWorkflowBeta1(context.Context, *connect.Request[v1.StartWorkflowRequest]) (*connect.Response[v1.StartWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.StartWorkflowBeta1 is not implemented"))
}

func (UnimplementedDaprHandler) GetWorkflowBeta1(context.Context, *connect.Request[v1.GetWorkflowRequest]) (*connect.Response[v1.GetWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetWorkflowBeta1 is not implemented"))
}

func (UnimplementedDaprHandler) PurgeWorkflowBeta1(context.Context, *connect.Request[v1.PurgeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.PurgeWorkflowBeta1 is not implemented"))
}

func (UnimplementedDaprHandler) TerminateWorkflowBeta1(context.Context, *connect.Request[v1.TerminateWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.TerminateWorkflowBeta1 is not implemented"))
}

func (UnimplementedDaprHandler) PauseWorkflowBeta1(context.Context, *connect.Request[v1.PauseWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.PauseWorkflowBeta1 is not implemented"))
}

func (UnimplementedDaprHandler) ResumeWorkflowBeta1(context.Context, *connect.Request[v1.ResumeWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.ResumeWorkflowBeta1 is not implemented"))
}

func (UnimplementedDaprHandler) RaiseEventWorkflowBeta1(context.Context, *connect.Request[v1.RaiseEventWorkflowRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.RaiseEventWorkflowBeta1 is not implemented"))
}

func (UnimplementedDaprHandler) Shutdown(context.Context, *connect.Request[v1.ShutdownRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.Shutdown is not implemented"))
}

func (UnimplementedDaprHandler) ScheduleJobAlpha1(context.Context, *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.ScheduleJobAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) GetJobAlpha1(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.GetJobAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) DeleteJobAlpha1(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.DeleteJobAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) ConverseAlpha1(context.Context, *connect.Request[v1.ConversationRequest]) (*connect.Response[v1.ConversationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.ConverseAlpha1 is not implemented"))
}

func (UnimplementedDaprHandler) ConverseAlpha2(context.Context, *connect.Request[v1.ConversationRequestAlpha2]) (*connect.Response[v1.ConversationResponseAlpha2], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.Dapr.ConverseAlpha2 is not implemented"))
}
