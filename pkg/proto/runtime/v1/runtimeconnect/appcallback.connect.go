//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/runtime/v1/appcallback.proto

package runtimeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/common/v1"
	v11 "github.com/dapr/dapr/pkg/proto/runtime/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AppCallbackName is the fully-qualified name of the AppCallback service.
	AppCallbackName = "dapr.proto.runtime.v1.AppCallback"
	// AppCallbackHealthCheckName is the fully-qualified name of the AppCallbackHealthCheck service.
	AppCallbackHealthCheckName = "dapr.proto.runtime.v1.AppCallbackHealthCheck"
	// AppCallbackAlphaName is the fully-qualified name of the AppCallbackAlpha service.
	AppCallbackAlphaName = "dapr.proto.runtime.v1.AppCallbackAlpha"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppCallbackOnInvokeProcedure is the fully-qualified name of the AppCallback's OnInvoke RPC.
	AppCallbackOnInvokeProcedure = "/dapr.proto.runtime.v1.AppCallback/OnInvoke"
	// AppCallbackListTopicSubscriptionsProcedure is the fully-qualified name of the AppCallback's
	// ListTopicSubscriptions RPC.
	AppCallbackListTopicSubscriptionsProcedure = "/dapr.proto.runtime.v1.AppCallback/ListTopicSubscriptions"
	// AppCallbackOnTopicEventProcedure is the fully-qualified name of the AppCallback's OnTopicEvent
	// RPC.
	AppCallbackOnTopicEventProcedure = "/dapr.proto.runtime.v1.AppCallback/OnTopicEvent"
	// AppCallbackListInputBindingsProcedure is the fully-qualified name of the AppCallback's
	// ListInputBindings RPC.
	AppCallbackListInputBindingsProcedure = "/dapr.proto.runtime.v1.AppCallback/ListInputBindings"
	// AppCallbackOnBindingEventProcedure is the fully-qualified name of the AppCallback's
	// OnBindingEvent RPC.
	AppCallbackOnBindingEventProcedure = "/dapr.proto.runtime.v1.AppCallback/OnBindingEvent"
	// AppCallbackHealthCheckHealthCheckProcedure is the fully-qualified name of the
	// AppCallbackHealthCheck's HealthCheck RPC.
	AppCallbackHealthCheckHealthCheckProcedure = "/dapr.proto.runtime.v1.AppCallbackHealthCheck/HealthCheck"
	// AppCallbackAlphaOnBulkTopicEventAlpha1Procedure is the fully-qualified name of the
	// AppCallbackAlpha's OnBulkTopicEventAlpha1 RPC.
	AppCallbackAlphaOnBulkTopicEventAlpha1Procedure = "/dapr.proto.runtime.v1.AppCallbackAlpha/OnBulkTopicEventAlpha1"
	// AppCallbackAlphaOnJobEventAlpha1Procedure is the fully-qualified name of the AppCallbackAlpha's
	// OnJobEventAlpha1 RPC.
	AppCallbackAlphaOnJobEventAlpha1Procedure = "/dapr.proto.runtime.v1.AppCallbackAlpha/OnJobEventAlpha1"
)

// AppCallbackClient is a client for the dapr.proto.runtime.v1.AppCallback service.
type AppCallbackClient interface {
	// Invokes service method with InvokeRequest.
	OnInvoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error)
	// Lists all topics subscribed by this app.
	ListTopicSubscriptions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListTopicSubscriptionsResponse], error)
	// Subscribes events from Pubsub
	OnTopicEvent(context.Context, *connect.Request[v11.TopicEventRequest]) (*connect.Response[v11.TopicEventResponse], error)
	// Lists all input bindings subscribed by this app.
	ListInputBindings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListInputBindingsResponse], error)
	// Listens events from the input bindings
	//
	// User application can save the states or send the events to the output
	// bindings optionally by returning BindingEventResponse.
	OnBindingEvent(context.Context, *connect.Request[v11.BindingEventRequest]) (*connect.Response[v11.BindingEventResponse], error)
}

// NewAppCallbackClient constructs a client for the dapr.proto.runtime.v1.AppCallback service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppCallbackClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppCallbackClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appCallbackClient{
		onInvoke: connect.NewClient[v1.InvokeRequest, v1.InvokeResponse](
			httpClient,
			baseURL+AppCallbackOnInvokeProcedure,
			opts...,
		),
		listTopicSubscriptions: connect.NewClient[emptypb.Empty, v11.ListTopicSubscriptionsResponse](
			httpClient,
			baseURL+AppCallbackListTopicSubscriptionsProcedure,
			opts...,
		),
		onTopicEvent: connect.NewClient[v11.TopicEventRequest, v11.TopicEventResponse](
			httpClient,
			baseURL+AppCallbackOnTopicEventProcedure,
			opts...,
		),
		listInputBindings: connect.NewClient[emptypb.Empty, v11.ListInputBindingsResponse](
			httpClient,
			baseURL+AppCallbackListInputBindingsProcedure,
			opts...,
		),
		onBindingEvent: connect.NewClient[v11.BindingEventRequest, v11.BindingEventResponse](
			httpClient,
			baseURL+AppCallbackOnBindingEventProcedure,
			opts...,
		),
	}
}

// appCallbackClient implements AppCallbackClient.
type appCallbackClient struct {
	onInvoke               *connect.Client[v1.InvokeRequest, v1.InvokeResponse]
	listTopicSubscriptions *connect.Client[emptypb.Empty, v11.ListTopicSubscriptionsResponse]
	onTopicEvent           *connect.Client[v11.TopicEventRequest, v11.TopicEventResponse]
	listInputBindings      *connect.Client[emptypb.Empty, v11.ListInputBindingsResponse]
	onBindingEvent         *connect.Client[v11.BindingEventRequest, v11.BindingEventResponse]
}

// OnInvoke calls dapr.proto.runtime.v1.AppCallback.OnInvoke.
func (c *appCallbackClient) OnInvoke(ctx context.Context, req *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error) {
	return c.onInvoke.CallUnary(ctx, req)
}

// ListTopicSubscriptions calls dapr.proto.runtime.v1.AppCallback.ListTopicSubscriptions.
func (c *appCallbackClient) ListTopicSubscriptions(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListTopicSubscriptionsResponse], error) {
	return c.listTopicSubscriptions.CallUnary(ctx, req)
}

// OnTopicEvent calls dapr.proto.runtime.v1.AppCallback.OnTopicEvent.
func (c *appCallbackClient) OnTopicEvent(ctx context.Context, req *connect.Request[v11.TopicEventRequest]) (*connect.Response[v11.TopicEventResponse], error) {
	return c.onTopicEvent.CallUnary(ctx, req)
}

// ListInputBindings calls dapr.proto.runtime.v1.AppCallback.ListInputBindings.
func (c *appCallbackClient) ListInputBindings(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListInputBindingsResponse], error) {
	return c.listInputBindings.CallUnary(ctx, req)
}

// OnBindingEvent calls dapr.proto.runtime.v1.AppCallback.OnBindingEvent.
func (c *appCallbackClient) OnBindingEvent(ctx context.Context, req *connect.Request[v11.BindingEventRequest]) (*connect.Response[v11.BindingEventResponse], error) {
	return c.onBindingEvent.CallUnary(ctx, req)
}

// AppCallbackHandler is an implementation of the dapr.proto.runtime.v1.AppCallback service.
type AppCallbackHandler interface {
	// Invokes service method with InvokeRequest.
	OnInvoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error)
	// Lists all topics subscribed by this app.
	ListTopicSubscriptions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListTopicSubscriptionsResponse], error)
	// Subscribes events from Pubsub
	OnTopicEvent(context.Context, *connect.Request[v11.TopicEventRequest]) (*connect.Response[v11.TopicEventResponse], error)
	// Lists all input bindings subscribed by this app.
	ListInputBindings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListInputBindingsResponse], error)
	// Listens events from the input bindings
	//
	// User application can save the states or send the events to the output
	// bindings optionally by returning BindingEventResponse.
	OnBindingEvent(context.Context, *connect.Request[v11.BindingEventRequest]) (*connect.Response[v11.BindingEventResponse], error)
}

// NewAppCallbackHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppCallbackHandler(svc AppCallbackHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appCallbackOnInvokeHandler := connect.NewUnaryHandler(
		AppCallbackOnInvokeProcedure,
		svc.OnInvoke,
		opts...,
	)
	appCallbackListTopicSubscriptionsHandler := connect.NewUnaryHandler(
		AppCallbackListTopicSubscriptionsProcedure,
		svc.ListTopicSubscriptions,
		opts...,
	)
	appCallbackOnTopicEventHandler := connect.NewUnaryHandler(
		AppCallbackOnTopicEventProcedure,
		svc.OnTopicEvent,
		opts...,
	)
	appCallbackListInputBindingsHandler := connect.NewUnaryHandler(
		AppCallbackListInputBindingsProcedure,
		svc.ListInputBindings,
		opts...,
	)
	appCallbackOnBindingEventHandler := connect.NewUnaryHandler(
		AppCallbackOnBindingEventProcedure,
		svc.OnBindingEvent,
		opts...,
	)
	return "/dapr.proto.runtime.v1.AppCallback/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppCallbackOnInvokeProcedure:
			appCallbackOnInvokeHandler.ServeHTTP(w, r)
		case AppCallbackListTopicSubscriptionsProcedure:
			appCallbackListTopicSubscriptionsHandler.ServeHTTP(w, r)
		case AppCallbackOnTopicEventProcedure:
			appCallbackOnTopicEventHandler.ServeHTTP(w, r)
		case AppCallbackListInputBindingsProcedure:
			appCallbackListInputBindingsHandler.ServeHTTP(w, r)
		case AppCallbackOnBindingEventProcedure:
			appCallbackOnBindingEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppCallbackHandler returns CodeUnimplemented from all methods.
type UnimplementedAppCallbackHandler struct{}

func (UnimplementedAppCallbackHandler) OnInvoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallback.OnInvoke is not implemented"))
}

func (UnimplementedAppCallbackHandler) ListTopicSubscriptions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListTopicSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallback.ListTopicSubscriptions is not implemented"))
}

func (UnimplementedAppCallbackHandler) OnTopicEvent(context.Context, *connect.Request[v11.TopicEventRequest]) (*connect.Response[v11.TopicEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallback.OnTopicEvent is not implemented"))
}

func (UnimplementedAppCallbackHandler) ListInputBindings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.ListInputBindingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallback.ListInputBindings is not implemented"))
}

func (UnimplementedAppCallbackHandler) OnBindingEvent(context.Context, *connect.Request[v11.BindingEventRequest]) (*connect.Response[v11.BindingEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallback.OnBindingEvent is not implemented"))
}

// AppCallbackHealthCheckClient is a client for the dapr.proto.runtime.v1.AppCallbackHealthCheck
// service.
type AppCallbackHealthCheckClient interface {
	// Health check.
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error)
}

// NewAppCallbackHealthCheckClient constructs a client for the
// dapr.proto.runtime.v1.AppCallbackHealthCheck service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppCallbackHealthCheckClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppCallbackHealthCheckClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appCallbackHealthCheckClient{
		healthCheck: connect.NewClient[emptypb.Empty, v11.HealthCheckResponse](
			httpClient,
			baseURL+AppCallbackHealthCheckHealthCheckProcedure,
			opts...,
		),
	}
}

// appCallbackHealthCheckClient implements AppCallbackHealthCheckClient.
type appCallbackHealthCheckClient struct {
	healthCheck *connect.Client[emptypb.Empty, v11.HealthCheckResponse]
}

// HealthCheck calls dapr.proto.runtime.v1.AppCallbackHealthCheck.HealthCheck.
func (c *appCallbackHealthCheckClient) HealthCheck(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// AppCallbackHealthCheckHandler is an implementation of the
// dapr.proto.runtime.v1.AppCallbackHealthCheck service.
type AppCallbackHealthCheckHandler interface {
	// Health check.
	HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error)
}

// NewAppCallbackHealthCheckHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppCallbackHealthCheckHandler(svc AppCallbackHealthCheckHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appCallbackHealthCheckHealthCheckHandler := connect.NewUnaryHandler(
		AppCallbackHealthCheckHealthCheckProcedure,
		svc.HealthCheck,
		opts...,
	)
	return "/dapr.proto.runtime.v1.AppCallbackHealthCheck/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppCallbackHealthCheckHealthCheckProcedure:
			appCallbackHealthCheckHealthCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppCallbackHealthCheckHandler returns CodeUnimplemented from all methods.
type UnimplementedAppCallbackHealthCheckHandler struct{}

func (UnimplementedAppCallbackHealthCheckHandler) HealthCheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallbackHealthCheck.HealthCheck is not implemented"))
}

// AppCallbackAlphaClient is a client for the dapr.proto.runtime.v1.AppCallbackAlpha service.
type AppCallbackAlphaClient interface {
	// Subscribes bulk events from Pubsub
	OnBulkTopicEventAlpha1(context.Context, *connect.Request[v11.TopicEventBulkRequest]) (*connect.Response[v11.TopicEventBulkResponse], error)
	// Sends job back to the app's endpoint at trigger time.
	OnJobEventAlpha1(context.Context, *connect.Request[v11.JobEventRequest]) (*connect.Response[v11.JobEventResponse], error)
}

// NewAppCallbackAlphaClient constructs a client for the dapr.proto.runtime.v1.AppCallbackAlpha
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppCallbackAlphaClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppCallbackAlphaClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appCallbackAlphaClient{
		onBulkTopicEventAlpha1: connect.NewClient[v11.TopicEventBulkRequest, v11.TopicEventBulkResponse](
			httpClient,
			baseURL+AppCallbackAlphaOnBulkTopicEventAlpha1Procedure,
			opts...,
		),
		onJobEventAlpha1: connect.NewClient[v11.JobEventRequest, v11.JobEventResponse](
			httpClient,
			baseURL+AppCallbackAlphaOnJobEventAlpha1Procedure,
			opts...,
		),
	}
}

// appCallbackAlphaClient implements AppCallbackAlphaClient.
type appCallbackAlphaClient struct {
	onBulkTopicEventAlpha1 *connect.Client[v11.TopicEventBulkRequest, v11.TopicEventBulkResponse]
	onJobEventAlpha1       *connect.Client[v11.JobEventRequest, v11.JobEventResponse]
}

// OnBulkTopicEventAlpha1 calls dapr.proto.runtime.v1.AppCallbackAlpha.OnBulkTopicEventAlpha1.
func (c *appCallbackAlphaClient) OnBulkTopicEventAlpha1(ctx context.Context, req *connect.Request[v11.TopicEventBulkRequest]) (*connect.Response[v11.TopicEventBulkResponse], error) {
	return c.onBulkTopicEventAlpha1.CallUnary(ctx, req)
}

// OnJobEventAlpha1 calls dapr.proto.runtime.v1.AppCallbackAlpha.OnJobEventAlpha1.
func (c *appCallbackAlphaClient) OnJobEventAlpha1(ctx context.Context, req *connect.Request[v11.JobEventRequest]) (*connect.Response[v11.JobEventResponse], error) {
	return c.onJobEventAlpha1.CallUnary(ctx, req)
}

// AppCallbackAlphaHandler is an implementation of the dapr.proto.runtime.v1.AppCallbackAlpha
// service.
type AppCallbackAlphaHandler interface {
	// Subscribes bulk events from Pubsub
	OnBulkTopicEventAlpha1(context.Context, *connect.Request[v11.TopicEventBulkRequest]) (*connect.Response[v11.TopicEventBulkResponse], error)
	// Sends job back to the app's endpoint at trigger time.
	OnJobEventAlpha1(context.Context, *connect.Request[v11.JobEventRequest]) (*connect.Response[v11.JobEventResponse], error)
}

// NewAppCallbackAlphaHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppCallbackAlphaHandler(svc AppCallbackAlphaHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appCallbackAlphaOnBulkTopicEventAlpha1Handler := connect.NewUnaryHandler(
		AppCallbackAlphaOnBulkTopicEventAlpha1Procedure,
		svc.OnBulkTopicEventAlpha1,
		opts...,
	)
	appCallbackAlphaOnJobEventAlpha1Handler := connect.NewUnaryHandler(
		AppCallbackAlphaOnJobEventAlpha1Procedure,
		svc.OnJobEventAlpha1,
		opts...,
	)
	return "/dapr.proto.runtime.v1.AppCallbackAlpha/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppCallbackAlphaOnBulkTopicEventAlpha1Procedure:
			appCallbackAlphaOnBulkTopicEventAlpha1Handler.ServeHTTP(w, r)
		case AppCallbackAlphaOnJobEventAlpha1Procedure:
			appCallbackAlphaOnJobEventAlpha1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppCallbackAlphaHandler returns CodeUnimplemented from all methods.
type UnimplementedAppCallbackAlphaHandler struct{}

func (UnimplementedAppCallbackAlphaHandler) OnBulkTopicEventAlpha1(context.Context, *connect.Request[v11.TopicEventBulkRequest]) (*connect.Response[v11.TopicEventBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallbackAlpha.OnBulkTopicEventAlpha1 is not implemented"))
}

func (UnimplementedAppCallbackAlphaHandler) OnJobEventAlpha1(context.Context, *connect.Request[v11.JobEventRequest]) (*connect.Response[v11.JobEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.runtime.v1.AppCallbackAlpha.OnJobEventAlpha1 is not implemented"))
}
