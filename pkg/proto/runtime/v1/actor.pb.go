//
//Copyright 2025 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.29.3
// source: dapr/proto/runtime/v1/actor.proto

package runtime

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The message containing the details for subscribing an actor to a topic via
// streaming.
type SubscribeActorEventRequestAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required: The name of the PubSub component the subscription applied to.
	PubsubName string `protobuf:"bytes,1,opt,name=pubsub_name,json=pubsubName,proto3" json:"pubsub_name,omitempty"`
	// Required: The name of the topic being subscribed to.
	TopicName string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Optional: The types of events the subscription is filtered to receiving
	// (evaluated against the CloudEvent `type` attribute) - must match at least
	// one.
	// Defaults to Daprs pubslish event types:
	// ["com.dapr.event.sent", "com.dapr.event.sent.bulk"]
	Types []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	// Optional: The filters to apply to the subscription - all must evaluate as
	// true to allow event delivery to subscription
	Filters []*SubscribeActorEventRequestFilterAlpha1 `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	// Required: The destination actor type or instance that is subscribing to
	// the event
	Sink *SubscribeActorEventRequestSinkAlpha1 `protobuf:"bytes,5,opt,name=sink,proto3" json:"sink,omitempty"`
}

func (x *SubscribeActorEventRequestAlpha1) Reset() {
	*x = SubscribeActorEventRequestAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeActorEventRequestAlpha1) GetPubsubName() string {
	if x != nil {
		return x.PubsubName
	}
	return ""
}

func (x *SubscribeActorEventRequestAlpha1) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *SubscribeActorEventRequestAlpha1) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *SubscribeActorEventRequestAlpha1) GetFilters() []*SubscribeActorEventRequestFilterAlpha1 {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SubscribeActorEventRequestAlpha1) GetSink() *SubscribeActorEventRequestSinkAlpha1 {
	if x != nil {
		return x.Sink
	}
	return nil
}

type SubscribeActorEventResponseAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeActorEventResponseAlpha1) Reset() {
	*x = SubscribeActorEventResponseAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventResponseAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventResponseAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventResponseAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventResponseAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventResponseAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{1}
}

// SubscribeActorEventRequestFilterAlpha1 is the filter for the
// SubscribeActorEventRequestAlpha1 message. It is used to filter events
// based on the attribute of the event.
type SubscribeActorEventRequestFilterAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*SubscribeActorEventRequestFilterAlpha1_Exact
	//	*SubscribeActorEventRequestFilterAlpha1_Prefix
	//	*SubscribeActorEventRequestFilterAlpha1_Suffix
	//	*SubscribeActorEventRequestFilterAlpha1_All
	//	*SubscribeActorEventRequestFilterAlpha1_Any
	//	*SubscribeActorEventRequestFilterAlpha1_None
	Filter isSubscribeActorEventRequestFilterAlpha1_Filter `protobuf_oneof:"filter"`
}

func (x *SubscribeActorEventRequestFilterAlpha1) Reset() {
	*x = SubscribeActorEventRequestFilterAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestFilterAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestFilterAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestFilterAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestFilterAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestFilterAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{2}
}

func (m *SubscribeActorEventRequestFilterAlpha1) GetFilter() isSubscribeActorEventRequestFilterAlpha1_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *SubscribeActorEventRequestFilterAlpha1) GetExact() *SubscribeActorEventRequestFilterExactAlpha1 {
	if x, ok := x.GetFilter().(*SubscribeActorEventRequestFilterAlpha1_Exact); ok {
		return x.Exact
	}
	return nil
}

func (x *SubscribeActorEventRequestFilterAlpha1) GetPrefix() *SubscribeActorEventRequestFilterPrefixAlpha1 {
	if x, ok := x.GetFilter().(*SubscribeActorEventRequestFilterAlpha1_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (x *SubscribeActorEventRequestFilterAlpha1) GetSuffix() *SubscribeActorEventRequestFilterSuffixAlpha1 {
	if x, ok := x.GetFilter().(*SubscribeActorEventRequestFilterAlpha1_Suffix); ok {
		return x.Suffix
	}
	return nil
}

func (x *SubscribeActorEventRequestFilterAlpha1) GetAll() *SubscribeActorEventRequestFilterAllAlpha1 {
	if x, ok := x.GetFilter().(*SubscribeActorEventRequestFilterAlpha1_All); ok {
		return x.All
	}
	return nil
}

func (x *SubscribeActorEventRequestFilterAlpha1) GetAny() *SubscribeActorEventRequestFilterAnyAlpha1 {
	if x, ok := x.GetFilter().(*SubscribeActorEventRequestFilterAlpha1_Any); ok {
		return x.Any
	}
	return nil
}

func (x *SubscribeActorEventRequestFilterAlpha1) GetNone() *SubscribeActorEventRequestFilterNoneAlpha1 {
	if x, ok := x.GetFilter().(*SubscribeActorEventRequestFilterAlpha1_None); ok {
		return x.None
	}
	return nil
}

type isSubscribeActorEventRequestFilterAlpha1_Filter interface {
	isSubscribeActorEventRequestFilterAlpha1_Filter()
}

type SubscribeActorEventRequestFilterAlpha1_Exact struct {
	Exact *SubscribeActorEventRequestFilterExactAlpha1 `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type SubscribeActorEventRequestFilterAlpha1_Prefix struct {
	Prefix *SubscribeActorEventRequestFilterPrefixAlpha1 `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

type SubscribeActorEventRequestFilterAlpha1_Suffix struct {
	Suffix *SubscribeActorEventRequestFilterSuffixAlpha1 `protobuf:"bytes,3,opt,name=suffix,proto3,oneof"`
}

type SubscribeActorEventRequestFilterAlpha1_All struct {
	All *SubscribeActorEventRequestFilterAllAlpha1 `protobuf:"bytes,4,opt,name=all,proto3,oneof"`
}

type SubscribeActorEventRequestFilterAlpha1_Any struct {
	Any *SubscribeActorEventRequestFilterAnyAlpha1 `protobuf:"bytes,5,opt,name=any,proto3,oneof"`
}

type SubscribeActorEventRequestFilterAlpha1_None struct {
	None *SubscribeActorEventRequestFilterNoneAlpha1 `protobuf:"bytes,6,opt,name=none,proto3,oneof"`
}

func (*SubscribeActorEventRequestFilterAlpha1_Exact) isSubscribeActorEventRequestFilterAlpha1_Filter() {
}

func (*SubscribeActorEventRequestFilterAlpha1_Prefix) isSubscribeActorEventRequestFilterAlpha1_Filter() {
}

func (*SubscribeActorEventRequestFilterAlpha1_Suffix) isSubscribeActorEventRequestFilterAlpha1_Filter() {
}

func (*SubscribeActorEventRequestFilterAlpha1_All) isSubscribeActorEventRequestFilterAlpha1_Filter() {
}

func (*SubscribeActorEventRequestFilterAlpha1_Any) isSubscribeActorEventRequestFilterAlpha1_Filter() {
}

func (*SubscribeActorEventRequestFilterAlpha1_None) isSubscribeActorEventRequestFilterAlpha1_Filter() {
}

// SubscribeActorEventRequestFilterSuffixAlpha1 is the expression to match
// suffixes of the cloud event attribute.
type SubscribeActorEventRequestFilterExactAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression []*SubscribeActorEventRequestExpressionAlpha1 `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *SubscribeActorEventRequestFilterExactAlpha1) Reset() {
	*x = SubscribeActorEventRequestFilterExactAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestFilterExactAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestFilterExactAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestFilterExactAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestFilterExactAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestFilterExactAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeActorEventRequestFilterExactAlpha1) GetExpression() []*SubscribeActorEventRequestExpressionAlpha1 {
	if x != nil {
		return x.Expression
	}
	return nil
}

// SubscribeActorEventRequestFilterSuffixAlpha1 is the expression to match
// suffixes of the cloud event attribute.
type SubscribeActorEventRequestFilterPrefixAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression []*SubscribeActorEventRequestExpressionAlpha1 `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *SubscribeActorEventRequestFilterPrefixAlpha1) Reset() {
	*x = SubscribeActorEventRequestFilterPrefixAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestFilterPrefixAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestFilterPrefixAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestFilterPrefixAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestFilterPrefixAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestFilterPrefixAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeActorEventRequestFilterPrefixAlpha1) GetExpression() []*SubscribeActorEventRequestExpressionAlpha1 {
	if x != nil {
		return x.Expression
	}
	return nil
}

// SubscribeActorEventRequestFilterSuffixAlpha1 is the expression to match
// suffixes of the cloud event attribute.
type SubscribeActorEventRequestFilterSuffixAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression []*SubscribeActorEventRequestExpressionAlpha1 `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *SubscribeActorEventRequestFilterSuffixAlpha1) Reset() {
	*x = SubscribeActorEventRequestFilterSuffixAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestFilterSuffixAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestFilterSuffixAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestFilterSuffixAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestFilterSuffixAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestFilterSuffixAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeActorEventRequestFilterSuffixAlpha1) GetExpression() []*SubscribeActorEventRequestExpressionAlpha1 {
	if x != nil {
		return x.Expression
	}
	return nil
}

// SubscribeActorEventRequestFilterAllAlpha1 is the filter where all nested
// filter expressions MUST evaluate to true in order for the all filter
// expression to be true. (AND)
type SubscribeActorEventRequestFilterAllAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*SubscribeActorEventRequestFilterAlpha1 `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SubscribeActorEventRequestFilterAllAlpha1) Reset() {
	*x = SubscribeActorEventRequestFilterAllAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestFilterAllAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestFilterAllAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestFilterAllAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestFilterAllAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestFilterAllAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{6}
}

func (x *SubscribeActorEventRequestFilterAllAlpha1) GetFilters() []*SubscribeActorEventRequestFilterAlpha1 {
	if x != nil {
		return x.Filters
	}
	return nil
}

// SubscribeActorEventRequestFilterAnyAlpha1 is the filter where ANY nested
// filter expressions MUST evaluate to true in order for the any filter
// expression to be true. (OR)
type SubscribeActorEventRequestFilterAnyAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*SubscribeActorEventRequestFilterAlpha1 `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SubscribeActorEventRequestFilterAnyAlpha1) Reset() {
	*x = SubscribeActorEventRequestFilterAnyAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestFilterAnyAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestFilterAnyAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestFilterAnyAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestFilterAnyAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestFilterAnyAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeActorEventRequestFilterAnyAlpha1) GetFilters() []*SubscribeActorEventRequestFilterAlpha1 {
	if x != nil {
		return x.Filters
	}
	return nil
}

// SubscribeActorEventRequestFilterNoneAlpha1 is the filter where NONE nested
// filter expressions MUST evaluate to true in order for the none filter
// expression to be true. (NOT)
type SubscribeActorEventRequestFilterNoneAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*SubscribeActorEventRequestFilterAlpha1 `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *SubscribeActorEventRequestFilterNoneAlpha1) Reset() {
	*x = SubscribeActorEventRequestFilterNoneAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestFilterNoneAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestFilterNoneAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestFilterNoneAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestFilterNoneAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestFilterNoneAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeActorEventRequestFilterNoneAlpha1) GetFilters() []*SubscribeActorEventRequestFilterAlpha1 {
	if x != nil {
		return x.Filters
	}
	return nil
}

// SubscribeActorEventRequestExpressionAlpha1 is the expression to match
// attribute of the cloud event. The expression is a key-value pair where
// the key is the attribute name and the value is the attribute value.
type SubscribeActorEventRequestExpressionAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SubscribeActorEventRequestExpressionAlpha1) Reset() {
	*x = SubscribeActorEventRequestExpressionAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestExpressionAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestExpressionAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestExpressionAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestExpressionAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestExpressionAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeActorEventRequestExpressionAlpha1) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *SubscribeActorEventRequestExpressionAlpha1) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// SubscribeActorEventRequestSinkAlpha1 is the sink for the
// SubscribeActorEventRequestAlpha1 message. It is used to specify the
// destination actor type or instance that is subscribing to the event.
type SubscribeActorEventRequestSinkAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sink:
	//
	//	*SubscribeActorEventRequestSinkAlpha1_Type
	//	*SubscribeActorEventRequestSinkAlpha1_Instance
	Sink isSubscribeActorEventRequestSinkAlpha1_Sink `protobuf_oneof:"sink"`
}

func (x *SubscribeActorEventRequestSinkAlpha1) Reset() {
	*x = SubscribeActorEventRequestSinkAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestSinkAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestSinkAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestSinkAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestSinkAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestSinkAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{10}
}

func (m *SubscribeActorEventRequestSinkAlpha1) GetSink() isSubscribeActorEventRequestSinkAlpha1_Sink {
	if m != nil {
		return m.Sink
	}
	return nil
}

func (x *SubscribeActorEventRequestSinkAlpha1) GetType() *SubscribeActorEventRequestSinkActorTypeAlpha1 {
	if x, ok := x.GetSink().(*SubscribeActorEventRequestSinkAlpha1_Type); ok {
		return x.Type
	}
	return nil
}

func (x *SubscribeActorEventRequestSinkAlpha1) GetInstance() *SubscribeActorEventRequestSinkActorInstanceAlpha1 {
	if x, ok := x.GetSink().(*SubscribeActorEventRequestSinkAlpha1_Instance); ok {
		return x.Instance
	}
	return nil
}

type isSubscribeActorEventRequestSinkAlpha1_Sink interface {
	isSubscribeActorEventRequestSinkAlpha1_Sink()
}

type SubscribeActorEventRequestSinkAlpha1_Type struct {
	Type *SubscribeActorEventRequestSinkActorTypeAlpha1 `protobuf:"bytes,1,opt,name=type,proto3,oneof"`
}

type SubscribeActorEventRequestSinkAlpha1_Instance struct {
	Instance *SubscribeActorEventRequestSinkActorInstanceAlpha1 `protobuf:"bytes,2,opt,name=instance,proto3,oneof"`
}

func (*SubscribeActorEventRequestSinkAlpha1_Type) isSubscribeActorEventRequestSinkAlpha1_Sink() {}

func (*SubscribeActorEventRequestSinkAlpha1_Instance) isSubscribeActorEventRequestSinkAlpha1_Sink() {}

// SubscribeActorEventRequestSinkActorTypeAlpha1 is the sink for the
// SubscribeActorEventRequestAlpha1 message. It is used to specify the
// destination actor type that is subscribing to the event. It matches on all
// actor ID instances with that type _that are currently active_ on this host.
type SubscribeActorEventRequestSinkActorTypeAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	Method    string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *SubscribeActorEventRequestSinkActorTypeAlpha1) Reset() {
	*x = SubscribeActorEventRequestSinkActorTypeAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestSinkActorTypeAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestSinkActorTypeAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestSinkActorTypeAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestSinkActorTypeAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestSinkActorTypeAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeActorEventRequestSinkActorTypeAlpha1) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *SubscribeActorEventRequestSinkActorTypeAlpha1) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// SubscribeActorEventRequestSinkActorInstanceAlpha1 is the sink for the
// SubscribeActorEventRequestAlpha1 message. It is used to specify the
// destination actor instance that is subscribing to the event. It matches on
// the actor ID instance with that type. The actor Instance may not be active
// on this host.
type SubscribeActorEventRequestSinkActorInstanceAlpha1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorType string `protobuf:"bytes,1,opt,name=actor_type,json=actorType,proto3" json:"actor_type,omitempty"`
	Method    string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	ActorId   string `protobuf:"bytes,3,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
}

func (x *SubscribeActorEventRequestSinkActorInstanceAlpha1) Reset() {
	*x = SubscribeActorEventRequestSinkActorInstanceAlpha1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeActorEventRequestSinkActorInstanceAlpha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActorEventRequestSinkActorInstanceAlpha1) ProtoMessage() {}

func (x *SubscribeActorEventRequestSinkActorInstanceAlpha1) ProtoReflect() protoreflect.Message {
	mi := &file_dapr_proto_runtime_v1_actor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActorEventRequestSinkActorInstanceAlpha1.ProtoReflect.Descriptor instead.
func (*SubscribeActorEventRequestSinkActorInstanceAlpha1) Descriptor() ([]byte, []int) {
	return file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribeActorEventRequestSinkActorInstanceAlpha1) GetActorType() string {
	if x != nil {
		return x.ActorType
	}
	return ""
}

func (x *SubscribeActorEventRequestSinkActorInstanceAlpha1) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SubscribeActorEventRequestSinkActorInstanceAlpha1) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

var File_dapr_proto_runtime_v1_actor_proto protoreflect.FileDescriptor

var file_dapr_proto_runtime_v1_actor_proto_rawDesc = []byte{
	0x0a, 0x21, 0x64, 0x61, 0x70, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xa2, 0x02, 0x0a, 0x20, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4f,
	0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64,
	0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x6e, 0x6b, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x22,
	0x23, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x22, 0xd1, 0x04, 0x0a, 0x26, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12,
	0x5a, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x61,
	0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x61, 0x70,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x54, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12,
	0x54, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64,
	0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x79, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x57, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x65,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x2b, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x61,
	0x63, 0x74, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12, 0x61, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64,
	0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x2c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12, 0x61, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x91, 0x01, 0x0a, 0x2c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x12, 0x61, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x29, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x12, 0x57, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x29, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x6e, 0x79, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12, 0x57, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x61, 0x70, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x85, 0x01, 0x0a, 0x2a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x12, 0x57, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x2a, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x24,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x12, 0x5a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x66, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b,
	0x22, 0x66, 0x0a, 0x2d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69,
	0x6e, 0x6b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x31, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x42, 0x6d, 0x0a, 0x0a, 0x69, 0x6f, 0x2e, 0x64, 0x61, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0f,
	0x44, 0x61, 0x70, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x70, 0x72,
	0x2f, 0x64, 0x61, 0x70, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0xaa, 0x02, 0x1a, 0x44, 0x61, 0x70, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dapr_proto_runtime_v1_actor_proto_rawDescOnce sync.Once
	file_dapr_proto_runtime_v1_actor_proto_rawDescData = file_dapr_proto_runtime_v1_actor_proto_rawDesc
)

func file_dapr_proto_runtime_v1_actor_proto_rawDescGZIP() []byte {
	file_dapr_proto_runtime_v1_actor_proto_rawDescOnce.Do(func() {
		file_dapr_proto_runtime_v1_actor_proto_rawDescData = protoimpl.X.CompressGZIP(file_dapr_proto_runtime_v1_actor_proto_rawDescData)
	})
	return file_dapr_proto_runtime_v1_actor_proto_rawDescData
}

var file_dapr_proto_runtime_v1_actor_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_dapr_proto_runtime_v1_actor_proto_goTypes = []interface{}{
	(*SubscribeActorEventRequestAlpha1)(nil),                  // 0: dapr.proto.runtime.v1.SubscribeActorEventRequestAlpha1
	(*SubscribeActorEventResponseAlpha1)(nil),                 // 1: dapr.proto.runtime.v1.SubscribeActorEventResponseAlpha1
	(*SubscribeActorEventRequestFilterAlpha1)(nil),            // 2: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1
	(*SubscribeActorEventRequestFilterExactAlpha1)(nil),       // 3: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterExactAlpha1
	(*SubscribeActorEventRequestFilterPrefixAlpha1)(nil),      // 4: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterPrefixAlpha1
	(*SubscribeActorEventRequestFilterSuffixAlpha1)(nil),      // 5: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterSuffixAlpha1
	(*SubscribeActorEventRequestFilterAllAlpha1)(nil),         // 6: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAllAlpha1
	(*SubscribeActorEventRequestFilterAnyAlpha1)(nil),         // 7: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAnyAlpha1
	(*SubscribeActorEventRequestFilterNoneAlpha1)(nil),        // 8: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterNoneAlpha1
	(*SubscribeActorEventRequestExpressionAlpha1)(nil),        // 9: dapr.proto.runtime.v1.SubscribeActorEventRequestExpressionAlpha1
	(*SubscribeActorEventRequestSinkAlpha1)(nil),              // 10: dapr.proto.runtime.v1.SubscribeActorEventRequestSinkAlpha1
	(*SubscribeActorEventRequestSinkActorTypeAlpha1)(nil),     // 11: dapr.proto.runtime.v1.SubscribeActorEventRequestSinkActorTypeAlpha1
	(*SubscribeActorEventRequestSinkActorInstanceAlpha1)(nil), // 12: dapr.proto.runtime.v1.SubscribeActorEventRequestSinkActorInstanceAlpha1
}
var file_dapr_proto_runtime_v1_actor_proto_depIdxs = []int32{
	2,  // 0: dapr.proto.runtime.v1.SubscribeActorEventRequestAlpha1.filters:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1
	10, // 1: dapr.proto.runtime.v1.SubscribeActorEventRequestAlpha1.sink:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestSinkAlpha1
	3,  // 2: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1.exact:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterExactAlpha1
	4,  // 3: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1.prefix:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterPrefixAlpha1
	5,  // 4: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1.suffix:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterSuffixAlpha1
	6,  // 5: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1.all:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAllAlpha1
	7,  // 6: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1.any:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAnyAlpha1
	8,  // 7: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1.none:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterNoneAlpha1
	9,  // 8: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterExactAlpha1.expression:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestExpressionAlpha1
	9,  // 9: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterPrefixAlpha1.expression:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestExpressionAlpha1
	9,  // 10: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterSuffixAlpha1.expression:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestExpressionAlpha1
	2,  // 11: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAllAlpha1.filters:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1
	2,  // 12: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAnyAlpha1.filters:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1
	2,  // 13: dapr.proto.runtime.v1.SubscribeActorEventRequestFilterNoneAlpha1.filters:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestFilterAlpha1
	11, // 14: dapr.proto.runtime.v1.SubscribeActorEventRequestSinkAlpha1.type:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestSinkActorTypeAlpha1
	12, // 15: dapr.proto.runtime.v1.SubscribeActorEventRequestSinkAlpha1.instance:type_name -> dapr.proto.runtime.v1.SubscribeActorEventRequestSinkActorInstanceAlpha1
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_dapr_proto_runtime_v1_actor_proto_init() }
func file_dapr_proto_runtime_v1_actor_proto_init() {
	if File_dapr_proto_runtime_v1_actor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventResponseAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestFilterAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestFilterExactAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestFilterPrefixAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestFilterSuffixAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestFilterAllAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestFilterAnyAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestFilterNoneAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestExpressionAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestSinkAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestSinkActorTypeAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapr_proto_runtime_v1_actor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeActorEventRequestSinkActorInstanceAlpha1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dapr_proto_runtime_v1_actor_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SubscribeActorEventRequestFilterAlpha1_Exact)(nil),
		(*SubscribeActorEventRequestFilterAlpha1_Prefix)(nil),
		(*SubscribeActorEventRequestFilterAlpha1_Suffix)(nil),
		(*SubscribeActorEventRequestFilterAlpha1_All)(nil),
		(*SubscribeActorEventRequestFilterAlpha1_Any)(nil),
		(*SubscribeActorEventRequestFilterAlpha1_None)(nil),
	}
	file_dapr_proto_runtime_v1_actor_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SubscribeActorEventRequestSinkAlpha1_Type)(nil),
		(*SubscribeActorEventRequestSinkAlpha1_Instance)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dapr_proto_runtime_v1_actor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dapr_proto_runtime_v1_actor_proto_goTypes,
		DependencyIndexes: file_dapr_proto_runtime_v1_actor_proto_depIdxs,
		MessageInfos:      file_dapr_proto_runtime_v1_actor_proto_msgTypes,
	}.Build()
	File_dapr_proto_runtime_v1_actor_proto = out.File
	file_dapr_proto_runtime_v1_actor_proto_rawDesc = nil
	file_dapr_proto_runtime_v1_actor_proto_goTypes = nil
	file_dapr_proto_runtime_v1_actor_proto_depIdxs = nil
}
