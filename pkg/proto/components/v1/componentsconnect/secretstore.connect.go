//
//Copyright 2023 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/components/v1/secretstore.proto

package componentsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/components/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SecretStoreName is the fully-qualified name of the SecretStore service.
	SecretStoreName = "dapr.proto.components.v1.SecretStore"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SecretStoreInitProcedure is the fully-qualified name of the SecretStore's Init RPC.
	SecretStoreInitProcedure = "/dapr.proto.components.v1.SecretStore/Init"
	// SecretStoreFeaturesProcedure is the fully-qualified name of the SecretStore's Features RPC.
	SecretStoreFeaturesProcedure = "/dapr.proto.components.v1.SecretStore/Features"
	// SecretStoreGetProcedure is the fully-qualified name of the SecretStore's Get RPC.
	SecretStoreGetProcedure = "/dapr.proto.components.v1.SecretStore/Get"
	// SecretStoreBulkGetProcedure is the fully-qualified name of the SecretStore's BulkGet RPC.
	SecretStoreBulkGetProcedure = "/dapr.proto.components.v1.SecretStore/BulkGet"
	// SecretStorePingProcedure is the fully-qualified name of the SecretStore's Ping RPC.
	SecretStorePingProcedure = "/dapr.proto.components.v1.SecretStore/Ping"
)

// SecretStoreClient is a client for the dapr.proto.components.v1.SecretStore service.
type SecretStoreClient interface {
	// Initializes the secret store with the given metadata.
	Init(context.Context, *connect.Request[v1.SecretStoreInitRequest]) (*connect.Response[v1.SecretStoreInitResponse], error)
	// Returns a list of implemented secret store features.
	Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error)
	// Get an individual secret from the store.
	Get(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	// Get all secrets from the store.
	BulkGet(context.Context, *connect.Request[v1.BulkGetSecretRequest]) (*connect.Response[v1.BulkGetSecretResponse], error)
	// Ping the pubsub. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewSecretStoreClient constructs a client for the dapr.proto.components.v1.SecretStore service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSecretStoreClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SecretStoreClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &secretStoreClient{
		init: connect.NewClient[v1.SecretStoreInitRequest, v1.SecretStoreInitResponse](
			httpClient,
			baseURL+SecretStoreInitProcedure,
			opts...,
		),
		features: connect.NewClient[v1.FeaturesRequest, v1.FeaturesResponse](
			httpClient,
			baseURL+SecretStoreFeaturesProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetSecretRequest, v1.GetSecretResponse](
			httpClient,
			baseURL+SecretStoreGetProcedure,
			opts...,
		),
		bulkGet: connect.NewClient[v1.BulkGetSecretRequest, v1.BulkGetSecretResponse](
			httpClient,
			baseURL+SecretStoreBulkGetProcedure,
			opts...,
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+SecretStorePingProcedure,
			opts...,
		),
	}
}

// secretStoreClient implements SecretStoreClient.
type secretStoreClient struct {
	init     *connect.Client[v1.SecretStoreInitRequest, v1.SecretStoreInitResponse]
	features *connect.Client[v1.FeaturesRequest, v1.FeaturesResponse]
	get      *connect.Client[v1.GetSecretRequest, v1.GetSecretResponse]
	bulkGet  *connect.Client[v1.BulkGetSecretRequest, v1.BulkGetSecretResponse]
	ping     *connect.Client[v1.PingRequest, v1.PingResponse]
}

// Init calls dapr.proto.components.v1.SecretStore.Init.
func (c *secretStoreClient) Init(ctx context.Context, req *connect.Request[v1.SecretStoreInitRequest]) (*connect.Response[v1.SecretStoreInitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// Features calls dapr.proto.components.v1.SecretStore.Features.
func (c *secretStoreClient) Features(ctx context.Context, req *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error) {
	return c.features.CallUnary(ctx, req)
}

// Get calls dapr.proto.components.v1.SecretStore.Get.
func (c *secretStoreClient) Get(ctx context.Context, req *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// BulkGet calls dapr.proto.components.v1.SecretStore.BulkGet.
func (c *secretStoreClient) BulkGet(ctx context.Context, req *connect.Request[v1.BulkGetSecretRequest]) (*connect.Response[v1.BulkGetSecretResponse], error) {
	return c.bulkGet.CallUnary(ctx, req)
}

// Ping calls dapr.proto.components.v1.SecretStore.Ping.
func (c *secretStoreClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// SecretStoreHandler is an implementation of the dapr.proto.components.v1.SecretStore service.
type SecretStoreHandler interface {
	// Initializes the secret store with the given metadata.
	Init(context.Context, *connect.Request[v1.SecretStoreInitRequest]) (*connect.Response[v1.SecretStoreInitResponse], error)
	// Returns a list of implemented secret store features.
	Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error)
	// Get an individual secret from the store.
	Get(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error)
	// Get all secrets from the store.
	BulkGet(context.Context, *connect.Request[v1.BulkGetSecretRequest]) (*connect.Response[v1.BulkGetSecretResponse], error)
	// Ping the pubsub. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewSecretStoreHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSecretStoreHandler(svc SecretStoreHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	secretStoreInitHandler := connect.NewUnaryHandler(
		SecretStoreInitProcedure,
		svc.Init,
		opts...,
	)
	secretStoreFeaturesHandler := connect.NewUnaryHandler(
		SecretStoreFeaturesProcedure,
		svc.Features,
		opts...,
	)
	secretStoreGetHandler := connect.NewUnaryHandler(
		SecretStoreGetProcedure,
		svc.Get,
		opts...,
	)
	secretStoreBulkGetHandler := connect.NewUnaryHandler(
		SecretStoreBulkGetProcedure,
		svc.BulkGet,
		opts...,
	)
	secretStorePingHandler := connect.NewUnaryHandler(
		SecretStorePingProcedure,
		svc.Ping,
		opts...,
	)
	return "/dapr.proto.components.v1.SecretStore/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SecretStoreInitProcedure:
			secretStoreInitHandler.ServeHTTP(w, r)
		case SecretStoreFeaturesProcedure:
			secretStoreFeaturesHandler.ServeHTTP(w, r)
		case SecretStoreGetProcedure:
			secretStoreGetHandler.ServeHTTP(w, r)
		case SecretStoreBulkGetProcedure:
			secretStoreBulkGetHandler.ServeHTTP(w, r)
		case SecretStorePingProcedure:
			secretStorePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSecretStoreHandler returns CodeUnimplemented from all methods.
type UnimplementedSecretStoreHandler struct{}

func (UnimplementedSecretStoreHandler) Init(context.Context, *connect.Request[v1.SecretStoreInitRequest]) (*connect.Response[v1.SecretStoreInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.SecretStore.Init is not implemented"))
}

func (UnimplementedSecretStoreHandler) Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.SecretStore.Features is not implemented"))
}

func (UnimplementedSecretStoreHandler) Get(context.Context, *connect.Request[v1.GetSecretRequest]) (*connect.Response[v1.GetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.SecretStore.Get is not implemented"))
}

func (UnimplementedSecretStoreHandler) BulkGet(context.Context, *connect.Request[v1.BulkGetSecretRequest]) (*connect.Response[v1.BulkGetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.SecretStore.BulkGet is not implemented"))
}

func (UnimplementedSecretStoreHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.SecretStore.Ping is not implemented"))
}
