//
//Copyright 2022 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/components/v1/bindings.proto

package componentsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/components/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// InputBindingName is the fully-qualified name of the InputBinding service.
	InputBindingName = "dapr.proto.components.v1.InputBinding"
	// OutputBindingName is the fully-qualified name of the OutputBinding service.
	OutputBindingName = "dapr.proto.components.v1.OutputBinding"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InputBindingInitProcedure is the fully-qualified name of the InputBinding's Init RPC.
	InputBindingInitProcedure = "/dapr.proto.components.v1.InputBinding/Init"
	// InputBindingReadProcedure is the fully-qualified name of the InputBinding's Read RPC.
	InputBindingReadProcedure = "/dapr.proto.components.v1.InputBinding/Read"
	// InputBindingPingProcedure is the fully-qualified name of the InputBinding's Ping RPC.
	InputBindingPingProcedure = "/dapr.proto.components.v1.InputBinding/Ping"
	// OutputBindingInitProcedure is the fully-qualified name of the OutputBinding's Init RPC.
	OutputBindingInitProcedure = "/dapr.proto.components.v1.OutputBinding/Init"
	// OutputBindingInvokeProcedure is the fully-qualified name of the OutputBinding's Invoke RPC.
	OutputBindingInvokeProcedure = "/dapr.proto.components.v1.OutputBinding/Invoke"
	// OutputBindingListOperationsProcedure is the fully-qualified name of the OutputBinding's
	// ListOperations RPC.
	OutputBindingListOperationsProcedure = "/dapr.proto.components.v1.OutputBinding/ListOperations"
	// OutputBindingPingProcedure is the fully-qualified name of the OutputBinding's Ping RPC.
	OutputBindingPingProcedure = "/dapr.proto.components.v1.OutputBinding/Ping"
)

// InputBindingClient is a client for the dapr.proto.components.v1.InputBinding service.
type InputBindingClient interface {
	// Initializes the inputbinding component component with the given metadata.
	Init(context.Context, *connect.Request[v1.InputBindingInitRequest]) (*connect.Response[v1.InputBindingInitResponse], error)
	// Establishes a stream with the server, which sends messages down to the
	// client. The client streams acknowledgements back to the server. The server
	// will close the stream and return the status on any error. In case of closed
	// connection, the client should re-establish the stream.
	Read(context.Context) *connect.BidiStreamForClient[v1.ReadRequest, v1.ReadResponse]
	// Ping the InputBinding. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewInputBindingClient constructs a client for the dapr.proto.components.v1.InputBinding service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInputBindingClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InputBindingClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inputBindingClient{
		init: connect.NewClient[v1.InputBindingInitRequest, v1.InputBindingInitResponse](
			httpClient,
			baseURL+InputBindingInitProcedure,
			opts...,
		),
		read: connect.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+InputBindingReadProcedure,
			opts...,
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+InputBindingPingProcedure,
			opts...,
		),
	}
}

// inputBindingClient implements InputBindingClient.
type inputBindingClient struct {
	init *connect.Client[v1.InputBindingInitRequest, v1.InputBindingInitResponse]
	read *connect.Client[v1.ReadRequest, v1.ReadResponse]
	ping *connect.Client[v1.PingRequest, v1.PingResponse]
}

// Init calls dapr.proto.components.v1.InputBinding.Init.
func (c *inputBindingClient) Init(ctx context.Context, req *connect.Request[v1.InputBindingInitRequest]) (*connect.Response[v1.InputBindingInitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// Read calls dapr.proto.components.v1.InputBinding.Read.
func (c *inputBindingClient) Read(ctx context.Context) *connect.BidiStreamForClient[v1.ReadRequest, v1.ReadResponse] {
	return c.read.CallBidiStream(ctx)
}

// Ping calls dapr.proto.components.v1.InputBinding.Ping.
func (c *inputBindingClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// InputBindingHandler is an implementation of the dapr.proto.components.v1.InputBinding service.
type InputBindingHandler interface {
	// Initializes the inputbinding component component with the given metadata.
	Init(context.Context, *connect.Request[v1.InputBindingInitRequest]) (*connect.Response[v1.InputBindingInitResponse], error)
	// Establishes a stream with the server, which sends messages down to the
	// client. The client streams acknowledgements back to the server. The server
	// will close the stream and return the status on any error. In case of closed
	// connection, the client should re-establish the stream.
	Read(context.Context, *connect.BidiStream[v1.ReadRequest, v1.ReadResponse]) error
	// Ping the InputBinding. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewInputBindingHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInputBindingHandler(svc InputBindingHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inputBindingInitHandler := connect.NewUnaryHandler(
		InputBindingInitProcedure,
		svc.Init,
		opts...,
	)
	inputBindingReadHandler := connect.NewBidiStreamHandler(
		InputBindingReadProcedure,
		svc.Read,
		opts...,
	)
	inputBindingPingHandler := connect.NewUnaryHandler(
		InputBindingPingProcedure,
		svc.Ping,
		opts...,
	)
	return "/dapr.proto.components.v1.InputBinding/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InputBindingInitProcedure:
			inputBindingInitHandler.ServeHTTP(w, r)
		case InputBindingReadProcedure:
			inputBindingReadHandler.ServeHTTP(w, r)
		case InputBindingPingProcedure:
			inputBindingPingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInputBindingHandler returns CodeUnimplemented from all methods.
type UnimplementedInputBindingHandler struct{}

func (UnimplementedInputBindingHandler) Init(context.Context, *connect.Request[v1.InputBindingInitRequest]) (*connect.Response[v1.InputBindingInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.InputBinding.Init is not implemented"))
}

func (UnimplementedInputBindingHandler) Read(context.Context, *connect.BidiStream[v1.ReadRequest, v1.ReadResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.InputBinding.Read is not implemented"))
}

func (UnimplementedInputBindingHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.InputBinding.Ping is not implemented"))
}

// OutputBindingClient is a client for the dapr.proto.components.v1.OutputBinding service.
type OutputBindingClient interface {
	// Initializes the outputbinding component component with the given metadata.
	Init(context.Context, *connect.Request[v1.OutputBindingInitRequest]) (*connect.Response[v1.OutputBindingInitResponse], error)
	// Invoke remote systems with optional payloads.
	Invoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error)
	// ListOperations list system supported operations.
	ListOperations(context.Context, *connect.Request[v1.ListOperationsRequest]) (*connect.Response[v1.ListOperationsResponse], error)
	// Ping the OutputBinding. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewOutputBindingClient constructs a client for the dapr.proto.components.v1.OutputBinding
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOutputBindingClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OutputBindingClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &outputBindingClient{
		init: connect.NewClient[v1.OutputBindingInitRequest, v1.OutputBindingInitResponse](
			httpClient,
			baseURL+OutputBindingInitProcedure,
			opts...,
		),
		invoke: connect.NewClient[v1.InvokeRequest, v1.InvokeResponse](
			httpClient,
			baseURL+OutputBindingInvokeProcedure,
			opts...,
		),
		listOperations: connect.NewClient[v1.ListOperationsRequest, v1.ListOperationsResponse](
			httpClient,
			baseURL+OutputBindingListOperationsProcedure,
			opts...,
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+OutputBindingPingProcedure,
			opts...,
		),
	}
}

// outputBindingClient implements OutputBindingClient.
type outputBindingClient struct {
	init           *connect.Client[v1.OutputBindingInitRequest, v1.OutputBindingInitResponse]
	invoke         *connect.Client[v1.InvokeRequest, v1.InvokeResponse]
	listOperations *connect.Client[v1.ListOperationsRequest, v1.ListOperationsResponse]
	ping           *connect.Client[v1.PingRequest, v1.PingResponse]
}

// Init calls dapr.proto.components.v1.OutputBinding.Init.
func (c *outputBindingClient) Init(ctx context.Context, req *connect.Request[v1.OutputBindingInitRequest]) (*connect.Response[v1.OutputBindingInitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// Invoke calls dapr.proto.components.v1.OutputBinding.Invoke.
func (c *outputBindingClient) Invoke(ctx context.Context, req *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error) {
	return c.invoke.CallUnary(ctx, req)
}

// ListOperations calls dapr.proto.components.v1.OutputBinding.ListOperations.
func (c *outputBindingClient) ListOperations(ctx context.Context, req *connect.Request[v1.ListOperationsRequest]) (*connect.Response[v1.ListOperationsResponse], error) {
	return c.listOperations.CallUnary(ctx, req)
}

// Ping calls dapr.proto.components.v1.OutputBinding.Ping.
func (c *outputBindingClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// OutputBindingHandler is an implementation of the dapr.proto.components.v1.OutputBinding service.
type OutputBindingHandler interface {
	// Initializes the outputbinding component component with the given metadata.
	Init(context.Context, *connect.Request[v1.OutputBindingInitRequest]) (*connect.Response[v1.OutputBindingInitResponse], error)
	// Invoke remote systems with optional payloads.
	Invoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error)
	// ListOperations list system supported operations.
	ListOperations(context.Context, *connect.Request[v1.ListOperationsRequest]) (*connect.Response[v1.ListOperationsResponse], error)
	// Ping the OutputBinding. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewOutputBindingHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOutputBindingHandler(svc OutputBindingHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	outputBindingInitHandler := connect.NewUnaryHandler(
		OutputBindingInitProcedure,
		svc.Init,
		opts...,
	)
	outputBindingInvokeHandler := connect.NewUnaryHandler(
		OutputBindingInvokeProcedure,
		svc.Invoke,
		opts...,
	)
	outputBindingListOperationsHandler := connect.NewUnaryHandler(
		OutputBindingListOperationsProcedure,
		svc.ListOperations,
		opts...,
	)
	outputBindingPingHandler := connect.NewUnaryHandler(
		OutputBindingPingProcedure,
		svc.Ping,
		opts...,
	)
	return "/dapr.proto.components.v1.OutputBinding/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OutputBindingInitProcedure:
			outputBindingInitHandler.ServeHTTP(w, r)
		case OutputBindingInvokeProcedure:
			outputBindingInvokeHandler.ServeHTTP(w, r)
		case OutputBindingListOperationsProcedure:
			outputBindingListOperationsHandler.ServeHTTP(w, r)
		case OutputBindingPingProcedure:
			outputBindingPingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOutputBindingHandler returns CodeUnimplemented from all methods.
type UnimplementedOutputBindingHandler struct{}

func (UnimplementedOutputBindingHandler) Init(context.Context, *connect.Request[v1.OutputBindingInitRequest]) (*connect.Response[v1.OutputBindingInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.OutputBinding.Init is not implemented"))
}

func (UnimplementedOutputBindingHandler) Invoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.OutputBinding.Invoke is not implemented"))
}

func (UnimplementedOutputBindingHandler) ListOperations(context.Context, *connect.Request[v1.ListOperationsRequest]) (*connect.Response[v1.ListOperationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.OutputBinding.ListOperations is not implemented"))
}

func (UnimplementedOutputBindingHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.OutputBinding.Ping is not implemented"))
}
