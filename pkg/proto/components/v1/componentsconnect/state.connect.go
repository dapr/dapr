//
//Copyright 2022 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/components/v1/state.proto

package componentsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/components/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// QueriableStateStoreName is the fully-qualified name of the QueriableStateStore service.
	QueriableStateStoreName = "dapr.proto.components.v1.QueriableStateStore"
	// TransactionalStateStoreName is the fully-qualified name of the TransactionalStateStore service.
	TransactionalStateStoreName = "dapr.proto.components.v1.TransactionalStateStore"
	// StateStoreName is the fully-qualified name of the StateStore service.
	StateStoreName = "dapr.proto.components.v1.StateStore"
	// TransactionalStoreMultiMaxSizeName is the fully-qualified name of the
	// TransactionalStoreMultiMaxSize service.
	TransactionalStoreMultiMaxSizeName = "dapr.proto.components.v1.TransactionalStoreMultiMaxSize"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueriableStateStoreQueryProcedure is the fully-qualified name of the QueriableStateStore's Query
	// RPC.
	QueriableStateStoreQueryProcedure = "/dapr.proto.components.v1.QueriableStateStore/Query"
	// TransactionalStateStoreTransactProcedure is the fully-qualified name of the
	// TransactionalStateStore's Transact RPC.
	TransactionalStateStoreTransactProcedure = "/dapr.proto.components.v1.TransactionalStateStore/Transact"
	// StateStoreInitProcedure is the fully-qualified name of the StateStore's Init RPC.
	StateStoreInitProcedure = "/dapr.proto.components.v1.StateStore/Init"
	// StateStoreFeaturesProcedure is the fully-qualified name of the StateStore's Features RPC.
	StateStoreFeaturesProcedure = "/dapr.proto.components.v1.StateStore/Features"
	// StateStoreDeleteProcedure is the fully-qualified name of the StateStore's Delete RPC.
	StateStoreDeleteProcedure = "/dapr.proto.components.v1.StateStore/Delete"
	// StateStoreGetProcedure is the fully-qualified name of the StateStore's Get RPC.
	StateStoreGetProcedure = "/dapr.proto.components.v1.StateStore/Get"
	// StateStoreSetProcedure is the fully-qualified name of the StateStore's Set RPC.
	StateStoreSetProcedure = "/dapr.proto.components.v1.StateStore/Set"
	// StateStorePingProcedure is the fully-qualified name of the StateStore's Ping RPC.
	StateStorePingProcedure = "/dapr.proto.components.v1.StateStore/Ping"
	// StateStoreBulkDeleteProcedure is the fully-qualified name of the StateStore's BulkDelete RPC.
	StateStoreBulkDeleteProcedure = "/dapr.proto.components.v1.StateStore/BulkDelete"
	// StateStoreBulkGetProcedure is the fully-qualified name of the StateStore's BulkGet RPC.
	StateStoreBulkGetProcedure = "/dapr.proto.components.v1.StateStore/BulkGet"
	// StateStoreBulkSetProcedure is the fully-qualified name of the StateStore's BulkSet RPC.
	StateStoreBulkSetProcedure = "/dapr.proto.components.v1.StateStore/BulkSet"
	// TransactionalStoreMultiMaxSizeMultiMaxSizeProcedure is the fully-qualified name of the
	// TransactionalStoreMultiMaxSize's MultiMaxSize RPC.
	TransactionalStoreMultiMaxSizeMultiMaxSizeProcedure = "/dapr.proto.components.v1.TransactionalStoreMultiMaxSize/MultiMaxSize"
)

// QueriableStateStoreClient is a client for the dapr.proto.components.v1.QueriableStateStore
// service.
type QueriableStateStoreClient interface {
	// Query performs a query request on the statestore.
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewQueriableStateStoreClient constructs a client for the
// dapr.proto.components.v1.QueriableStateStore service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueriableStateStoreClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueriableStateStoreClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queriableStateStoreClient{
		query: connect.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+QueriableStateStoreQueryProcedure,
			opts...,
		),
	}
}

// queriableStateStoreClient implements QueriableStateStoreClient.
type queriableStateStoreClient struct {
	query *connect.Client[v1.QueryRequest, v1.QueryResponse]
}

// Query calls dapr.proto.components.v1.QueriableStateStore.Query.
func (c *queriableStateStoreClient) Query(ctx context.Context, req *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// QueriableStateStoreHandler is an implementation of the
// dapr.proto.components.v1.QueriableStateStore service.
type QueriableStateStoreHandler interface {
	// Query performs a query request on the statestore.
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewQueriableStateStoreHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueriableStateStoreHandler(svc QueriableStateStoreHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queriableStateStoreQueryHandler := connect.NewUnaryHandler(
		QueriableStateStoreQueryProcedure,
		svc.Query,
		opts...,
	)
	return "/dapr.proto.components.v1.QueriableStateStore/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueriableStateStoreQueryProcedure:
			queriableStateStoreQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueriableStateStoreHandler returns CodeUnimplemented from all methods.
type UnimplementedQueriableStateStoreHandler struct{}

func (UnimplementedQueriableStateStoreHandler) Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.QueriableStateStore.Query is not implemented"))
}

// TransactionalStateStoreClient is a client for the
// dapr.proto.components.v1.TransactionalStateStore service.
type TransactionalStateStoreClient interface {
	// Transact executes multiples operation in a transactional environment.
	Transact(context.Context, *connect.Request[v1.TransactionalStateRequest]) (*connect.Response[v1.TransactionalStateResponse], error)
}

// NewTransactionalStateStoreClient constructs a client for the
// dapr.proto.components.v1.TransactionalStateStore service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionalStateStoreClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionalStateStoreClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionalStateStoreClient{
		transact: connect.NewClient[v1.TransactionalStateRequest, v1.TransactionalStateResponse](
			httpClient,
			baseURL+TransactionalStateStoreTransactProcedure,
			opts...,
		),
	}
}

// transactionalStateStoreClient implements TransactionalStateStoreClient.
type transactionalStateStoreClient struct {
	transact *connect.Client[v1.TransactionalStateRequest, v1.TransactionalStateResponse]
}

// Transact calls dapr.proto.components.v1.TransactionalStateStore.Transact.
func (c *transactionalStateStoreClient) Transact(ctx context.Context, req *connect.Request[v1.TransactionalStateRequest]) (*connect.Response[v1.TransactionalStateResponse], error) {
	return c.transact.CallUnary(ctx, req)
}

// TransactionalStateStoreHandler is an implementation of the
// dapr.proto.components.v1.TransactionalStateStore service.
type TransactionalStateStoreHandler interface {
	// Transact executes multiples operation in a transactional environment.
	Transact(context.Context, *connect.Request[v1.TransactionalStateRequest]) (*connect.Response[v1.TransactionalStateResponse], error)
}

// NewTransactionalStateStoreHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionalStateStoreHandler(svc TransactionalStateStoreHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionalStateStoreTransactHandler := connect.NewUnaryHandler(
		TransactionalStateStoreTransactProcedure,
		svc.Transact,
		opts...,
	)
	return "/dapr.proto.components.v1.TransactionalStateStore/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionalStateStoreTransactProcedure:
			transactionalStateStoreTransactHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionalStateStoreHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionalStateStoreHandler struct{}

func (UnimplementedTransactionalStateStoreHandler) Transact(context.Context, *connect.Request[v1.TransactionalStateRequest]) (*connect.Response[v1.TransactionalStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.TransactionalStateStore.Transact is not implemented"))
}

// StateStoreClient is a client for the dapr.proto.components.v1.StateStore service.
type StateStoreClient interface {
	// Initializes the state store component with the given metadata.
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
	// Returns a list of implemented state store features.
	Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error)
	// Deletes the specified key from the state store.
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// Get data from the given key.
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// Sets the value of the specified key.
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	// Ping the state store. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Deletes many keys at once.
	BulkDelete(context.Context, *connect.Request[v1.BulkDeleteRequest]) (*connect.Response[v1.BulkDeleteResponse], error)
	// Retrieves many keys at once.
	BulkGet(context.Context, *connect.Request[v1.BulkGetRequest]) (*connect.Response[v1.BulkGetResponse], error)
	// Set the value of many keys at once.
	BulkSet(context.Context, *connect.Request[v1.BulkSetRequest]) (*connect.Response[v1.BulkSetResponse], error)
}

// NewStateStoreClient constructs a client for the dapr.proto.components.v1.StateStore service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStateStoreClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StateStoreClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stateStoreClient{
		init: connect.NewClient[v1.InitRequest, v1.InitResponse](
			httpClient,
			baseURL+StateStoreInitProcedure,
			opts...,
		),
		features: connect.NewClient[v1.FeaturesRequest, v1.FeaturesResponse](
			httpClient,
			baseURL+StateStoreFeaturesProcedure,
			opts...,
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+StateStoreDeleteProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+StateStoreGetProcedure,
			opts...,
		),
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+StateStoreSetProcedure,
			opts...,
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+StateStorePingProcedure,
			opts...,
		),
		bulkDelete: connect.NewClient[v1.BulkDeleteRequest, v1.BulkDeleteResponse](
			httpClient,
			baseURL+StateStoreBulkDeleteProcedure,
			opts...,
		),
		bulkGet: connect.NewClient[v1.BulkGetRequest, v1.BulkGetResponse](
			httpClient,
			baseURL+StateStoreBulkGetProcedure,
			opts...,
		),
		bulkSet: connect.NewClient[v1.BulkSetRequest, v1.BulkSetResponse](
			httpClient,
			baseURL+StateStoreBulkSetProcedure,
			opts...,
		),
	}
}

// stateStoreClient implements StateStoreClient.
type stateStoreClient struct {
	init       *connect.Client[v1.InitRequest, v1.InitResponse]
	features   *connect.Client[v1.FeaturesRequest, v1.FeaturesResponse]
	delete     *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	get        *connect.Client[v1.GetRequest, v1.GetResponse]
	set        *connect.Client[v1.SetRequest, v1.SetResponse]
	ping       *connect.Client[v1.PingRequest, v1.PingResponse]
	bulkDelete *connect.Client[v1.BulkDeleteRequest, v1.BulkDeleteResponse]
	bulkGet    *connect.Client[v1.BulkGetRequest, v1.BulkGetResponse]
	bulkSet    *connect.Client[v1.BulkSetRequest, v1.BulkSetResponse]
}

// Init calls dapr.proto.components.v1.StateStore.Init.
func (c *stateStoreClient) Init(ctx context.Context, req *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// Features calls dapr.proto.components.v1.StateStore.Features.
func (c *stateStoreClient) Features(ctx context.Context, req *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error) {
	return c.features.CallUnary(ctx, req)
}

// Delete calls dapr.proto.components.v1.StateStore.Delete.
func (c *stateStoreClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Get calls dapr.proto.components.v1.StateStore.Get.
func (c *stateStoreClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Set calls dapr.proto.components.v1.StateStore.Set.
func (c *stateStoreClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Ping calls dapr.proto.components.v1.StateStore.Ping.
func (c *stateStoreClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// BulkDelete calls dapr.proto.components.v1.StateStore.BulkDelete.
func (c *stateStoreClient) BulkDelete(ctx context.Context, req *connect.Request[v1.BulkDeleteRequest]) (*connect.Response[v1.BulkDeleteResponse], error) {
	return c.bulkDelete.CallUnary(ctx, req)
}

// BulkGet calls dapr.proto.components.v1.StateStore.BulkGet.
func (c *stateStoreClient) BulkGet(ctx context.Context, req *connect.Request[v1.BulkGetRequest]) (*connect.Response[v1.BulkGetResponse], error) {
	return c.bulkGet.CallUnary(ctx, req)
}

// BulkSet calls dapr.proto.components.v1.StateStore.BulkSet.
func (c *stateStoreClient) BulkSet(ctx context.Context, req *connect.Request[v1.BulkSetRequest]) (*connect.Response[v1.BulkSetResponse], error) {
	return c.bulkSet.CallUnary(ctx, req)
}

// StateStoreHandler is an implementation of the dapr.proto.components.v1.StateStore service.
type StateStoreHandler interface {
	// Initializes the state store component with the given metadata.
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
	// Returns a list of implemented state store features.
	Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error)
	// Deletes the specified key from the state store.
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// Get data from the given key.
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// Sets the value of the specified key.
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	// Ping the state store. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Deletes many keys at once.
	BulkDelete(context.Context, *connect.Request[v1.BulkDeleteRequest]) (*connect.Response[v1.BulkDeleteResponse], error)
	// Retrieves many keys at once.
	BulkGet(context.Context, *connect.Request[v1.BulkGetRequest]) (*connect.Response[v1.BulkGetResponse], error)
	// Set the value of many keys at once.
	BulkSet(context.Context, *connect.Request[v1.BulkSetRequest]) (*connect.Response[v1.BulkSetResponse], error)
}

// NewStateStoreHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStateStoreHandler(svc StateStoreHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stateStoreInitHandler := connect.NewUnaryHandler(
		StateStoreInitProcedure,
		svc.Init,
		opts...,
	)
	stateStoreFeaturesHandler := connect.NewUnaryHandler(
		StateStoreFeaturesProcedure,
		svc.Features,
		opts...,
	)
	stateStoreDeleteHandler := connect.NewUnaryHandler(
		StateStoreDeleteProcedure,
		svc.Delete,
		opts...,
	)
	stateStoreGetHandler := connect.NewUnaryHandler(
		StateStoreGetProcedure,
		svc.Get,
		opts...,
	)
	stateStoreSetHandler := connect.NewUnaryHandler(
		StateStoreSetProcedure,
		svc.Set,
		opts...,
	)
	stateStorePingHandler := connect.NewUnaryHandler(
		StateStorePingProcedure,
		svc.Ping,
		opts...,
	)
	stateStoreBulkDeleteHandler := connect.NewUnaryHandler(
		StateStoreBulkDeleteProcedure,
		svc.BulkDelete,
		opts...,
	)
	stateStoreBulkGetHandler := connect.NewUnaryHandler(
		StateStoreBulkGetProcedure,
		svc.BulkGet,
		opts...,
	)
	stateStoreBulkSetHandler := connect.NewUnaryHandler(
		StateStoreBulkSetProcedure,
		svc.BulkSet,
		opts...,
	)
	return "/dapr.proto.components.v1.StateStore/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StateStoreInitProcedure:
			stateStoreInitHandler.ServeHTTP(w, r)
		case StateStoreFeaturesProcedure:
			stateStoreFeaturesHandler.ServeHTTP(w, r)
		case StateStoreDeleteProcedure:
			stateStoreDeleteHandler.ServeHTTP(w, r)
		case StateStoreGetProcedure:
			stateStoreGetHandler.ServeHTTP(w, r)
		case StateStoreSetProcedure:
			stateStoreSetHandler.ServeHTTP(w, r)
		case StateStorePingProcedure:
			stateStorePingHandler.ServeHTTP(w, r)
		case StateStoreBulkDeleteProcedure:
			stateStoreBulkDeleteHandler.ServeHTTP(w, r)
		case StateStoreBulkGetProcedure:
			stateStoreBulkGetHandler.ServeHTTP(w, r)
		case StateStoreBulkSetProcedure:
			stateStoreBulkSetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStateStoreHandler returns CodeUnimplemented from all methods.
type UnimplementedStateStoreHandler struct{}

func (UnimplementedStateStoreHandler) Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.Init is not implemented"))
}

func (UnimplementedStateStoreHandler) Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.Features is not implemented"))
}

func (UnimplementedStateStoreHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.Delete is not implemented"))
}

func (UnimplementedStateStoreHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.Get is not implemented"))
}

func (UnimplementedStateStoreHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.Set is not implemented"))
}

func (UnimplementedStateStoreHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.Ping is not implemented"))
}

func (UnimplementedStateStoreHandler) BulkDelete(context.Context, *connect.Request[v1.BulkDeleteRequest]) (*connect.Response[v1.BulkDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.BulkDelete is not implemented"))
}

func (UnimplementedStateStoreHandler) BulkGet(context.Context, *connect.Request[v1.BulkGetRequest]) (*connect.Response[v1.BulkGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.BulkGet is not implemented"))
}

func (UnimplementedStateStoreHandler) BulkSet(context.Context, *connect.Request[v1.BulkSetRequest]) (*connect.Response[v1.BulkSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.StateStore.BulkSet is not implemented"))
}

// TransactionalStoreMultiMaxSizeClient is a client for the
// dapr.proto.components.v1.TransactionalStoreMultiMaxSize service.
type TransactionalStoreMultiMaxSizeClient interface {
	// MultiMaxSize returns the maximum number of operations that can be performed
	// in a single transaction.
	MultiMaxSize(context.Context, *connect.Request[v1.MultiMaxSizeRequest]) (*connect.Response[v1.MultiMaxSizeResponse], error)
}

// NewTransactionalStoreMultiMaxSizeClient constructs a client for the
// dapr.proto.components.v1.TransactionalStoreMultiMaxSize service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionalStoreMultiMaxSizeClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionalStoreMultiMaxSizeClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactionalStoreMultiMaxSizeClient{
		multiMaxSize: connect.NewClient[v1.MultiMaxSizeRequest, v1.MultiMaxSizeResponse](
			httpClient,
			baseURL+TransactionalStoreMultiMaxSizeMultiMaxSizeProcedure,
			opts...,
		),
	}
}

// transactionalStoreMultiMaxSizeClient implements TransactionalStoreMultiMaxSizeClient.
type transactionalStoreMultiMaxSizeClient struct {
	multiMaxSize *connect.Client[v1.MultiMaxSizeRequest, v1.MultiMaxSizeResponse]
}

// MultiMaxSize calls dapr.proto.components.v1.TransactionalStoreMultiMaxSize.MultiMaxSize.
func (c *transactionalStoreMultiMaxSizeClient) MultiMaxSize(ctx context.Context, req *connect.Request[v1.MultiMaxSizeRequest]) (*connect.Response[v1.MultiMaxSizeResponse], error) {
	return c.multiMaxSize.CallUnary(ctx, req)
}

// TransactionalStoreMultiMaxSizeHandler is an implementation of the
// dapr.proto.components.v1.TransactionalStoreMultiMaxSize service.
type TransactionalStoreMultiMaxSizeHandler interface {
	// MultiMaxSize returns the maximum number of operations that can be performed
	// in a single transaction.
	MultiMaxSize(context.Context, *connect.Request[v1.MultiMaxSizeRequest]) (*connect.Response[v1.MultiMaxSizeResponse], error)
}

// NewTransactionalStoreMultiMaxSizeHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionalStoreMultiMaxSizeHandler(svc TransactionalStoreMultiMaxSizeHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionalStoreMultiMaxSizeMultiMaxSizeHandler := connect.NewUnaryHandler(
		TransactionalStoreMultiMaxSizeMultiMaxSizeProcedure,
		svc.MultiMaxSize,
		opts...,
	)
	return "/dapr.proto.components.v1.TransactionalStoreMultiMaxSize/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionalStoreMultiMaxSizeMultiMaxSizeProcedure:
			transactionalStoreMultiMaxSizeMultiMaxSizeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionalStoreMultiMaxSizeHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionalStoreMultiMaxSizeHandler struct{}

func (UnimplementedTransactionalStoreMultiMaxSizeHandler) MultiMaxSize(context.Context, *connect.Request[v1.MultiMaxSizeRequest]) (*connect.Response[v1.MultiMaxSizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.TransactionalStoreMultiMaxSize.MultiMaxSize is not implemented"))
}
