//
//Copyright 2022 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/components/v1/pubsub.proto

package componentsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/components/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PubSubName is the fully-qualified name of the PubSub service.
	PubSubName = "dapr.proto.components.v1.PubSub"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PubSubInitProcedure is the fully-qualified name of the PubSub's Init RPC.
	PubSubInitProcedure = "/dapr.proto.components.v1.PubSub/Init"
	// PubSubFeaturesProcedure is the fully-qualified name of the PubSub's Features RPC.
	PubSubFeaturesProcedure = "/dapr.proto.components.v1.PubSub/Features"
	// PubSubPublishProcedure is the fully-qualified name of the PubSub's Publish RPC.
	PubSubPublishProcedure = "/dapr.proto.components.v1.PubSub/Publish"
	// PubSubBulkPublishProcedure is the fully-qualified name of the PubSub's BulkPublish RPC.
	PubSubBulkPublishProcedure = "/dapr.proto.components.v1.PubSub/BulkPublish"
	// PubSubPullMessagesProcedure is the fully-qualified name of the PubSub's PullMessages RPC.
	PubSubPullMessagesProcedure = "/dapr.proto.components.v1.PubSub/PullMessages"
	// PubSubPingProcedure is the fully-qualified name of the PubSub's Ping RPC.
	PubSubPingProcedure = "/dapr.proto.components.v1.PubSub/Ping"
)

// PubSubClient is a client for the dapr.proto.components.v1.PubSub service.
type PubSubClient interface {
	// Initializes the pubsub component with the given metadata.
	Init(context.Context, *connect.Request[v1.PubSubInitRequest]) (*connect.Response[v1.PubSubInitResponse], error)
	// Returns a list of implemented pubsub features.
	Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error)
	// Publish publishes a new message for the given topic.
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	BulkPublish(context.Context, *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error)
	// Establishes a stream with the server (PubSub component), which sends
	// messages down to the client (daprd). The client streams acknowledgements
	// back to the server. The server will close the stream and return the status
	// on any error. In case of closed connection, the client should re-establish
	// the stream. The first message MUST contain a `topic` attribute on it that
	// should be used for the entire streaming pull.
	PullMessages(context.Context) *connect.BidiStreamForClient[v1.PullMessagesRequest, v1.PullMessagesResponse]
	// Ping the pubsub. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewPubSubClient constructs a client for the dapr.proto.components.v1.PubSub service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPubSubClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PubSubClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pubSubClient{
		init: connect.NewClient[v1.PubSubInitRequest, v1.PubSubInitResponse](
			httpClient,
			baseURL+PubSubInitProcedure,
			opts...,
		),
		features: connect.NewClient[v1.FeaturesRequest, v1.FeaturesResponse](
			httpClient,
			baseURL+PubSubFeaturesProcedure,
			opts...,
		),
		publish: connect.NewClient[v1.PublishRequest, v1.PublishResponse](
			httpClient,
			baseURL+PubSubPublishProcedure,
			opts...,
		),
		bulkPublish: connect.NewClient[v1.BulkPublishRequest, v1.BulkPublishResponse](
			httpClient,
			baseURL+PubSubBulkPublishProcedure,
			opts...,
		),
		pullMessages: connect.NewClient[v1.PullMessagesRequest, v1.PullMessagesResponse](
			httpClient,
			baseURL+PubSubPullMessagesProcedure,
			opts...,
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+PubSubPingProcedure,
			opts...,
		),
	}
}

// pubSubClient implements PubSubClient.
type pubSubClient struct {
	init         *connect.Client[v1.PubSubInitRequest, v1.PubSubInitResponse]
	features     *connect.Client[v1.FeaturesRequest, v1.FeaturesResponse]
	publish      *connect.Client[v1.PublishRequest, v1.PublishResponse]
	bulkPublish  *connect.Client[v1.BulkPublishRequest, v1.BulkPublishResponse]
	pullMessages *connect.Client[v1.PullMessagesRequest, v1.PullMessagesResponse]
	ping         *connect.Client[v1.PingRequest, v1.PingResponse]
}

// Init calls dapr.proto.components.v1.PubSub.Init.
func (c *pubSubClient) Init(ctx context.Context, req *connect.Request[v1.PubSubInitRequest]) (*connect.Response[v1.PubSubInitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// Features calls dapr.proto.components.v1.PubSub.Features.
func (c *pubSubClient) Features(ctx context.Context, req *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error) {
	return c.features.CallUnary(ctx, req)
}

// Publish calls dapr.proto.components.v1.PubSub.Publish.
func (c *pubSubClient) Publish(ctx context.Context, req *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return c.publish.CallUnary(ctx, req)
}

// BulkPublish calls dapr.proto.components.v1.PubSub.BulkPublish.
func (c *pubSubClient) BulkPublish(ctx context.Context, req *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error) {
	return c.bulkPublish.CallUnary(ctx, req)
}

// PullMessages calls dapr.proto.components.v1.PubSub.PullMessages.
func (c *pubSubClient) PullMessages(ctx context.Context) *connect.BidiStreamForClient[v1.PullMessagesRequest, v1.PullMessagesResponse] {
	return c.pullMessages.CallBidiStream(ctx)
}

// Ping calls dapr.proto.components.v1.PubSub.Ping.
func (c *pubSubClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PubSubHandler is an implementation of the dapr.proto.components.v1.PubSub service.
type PubSubHandler interface {
	// Initializes the pubsub component with the given metadata.
	Init(context.Context, *connect.Request[v1.PubSubInitRequest]) (*connect.Response[v1.PubSubInitResponse], error)
	// Returns a list of implemented pubsub features.
	Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error)
	// Publish publishes a new message for the given topic.
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	BulkPublish(context.Context, *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error)
	// Establishes a stream with the server (PubSub component), which sends
	// messages down to the client (daprd). The client streams acknowledgements
	// back to the server. The server will close the stream and return the status
	// on any error. In case of closed connection, the client should re-establish
	// the stream. The first message MUST contain a `topic` attribute on it that
	// should be used for the entire streaming pull.
	PullMessages(context.Context, *connect.BidiStream[v1.PullMessagesRequest, v1.PullMessagesResponse]) error
	// Ping the pubsub. Used for liveness porpuses.
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewPubSubHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPubSubHandler(svc PubSubHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pubSubInitHandler := connect.NewUnaryHandler(
		PubSubInitProcedure,
		svc.Init,
		opts...,
	)
	pubSubFeaturesHandler := connect.NewUnaryHandler(
		PubSubFeaturesProcedure,
		svc.Features,
		opts...,
	)
	pubSubPublishHandler := connect.NewUnaryHandler(
		PubSubPublishProcedure,
		svc.Publish,
		opts...,
	)
	pubSubBulkPublishHandler := connect.NewUnaryHandler(
		PubSubBulkPublishProcedure,
		svc.BulkPublish,
		opts...,
	)
	pubSubPullMessagesHandler := connect.NewBidiStreamHandler(
		PubSubPullMessagesProcedure,
		svc.PullMessages,
		opts...,
	)
	pubSubPingHandler := connect.NewUnaryHandler(
		PubSubPingProcedure,
		svc.Ping,
		opts...,
	)
	return "/dapr.proto.components.v1.PubSub/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PubSubInitProcedure:
			pubSubInitHandler.ServeHTTP(w, r)
		case PubSubFeaturesProcedure:
			pubSubFeaturesHandler.ServeHTTP(w, r)
		case PubSubPublishProcedure:
			pubSubPublishHandler.ServeHTTP(w, r)
		case PubSubBulkPublishProcedure:
			pubSubBulkPublishHandler.ServeHTTP(w, r)
		case PubSubPullMessagesProcedure:
			pubSubPullMessagesHandler.ServeHTTP(w, r)
		case PubSubPingProcedure:
			pubSubPingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPubSubHandler returns CodeUnimplemented from all methods.
type UnimplementedPubSubHandler struct{}

func (UnimplementedPubSubHandler) Init(context.Context, *connect.Request[v1.PubSubInitRequest]) (*connect.Response[v1.PubSubInitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.PubSub.Init is not implemented"))
}

func (UnimplementedPubSubHandler) Features(context.Context, *connect.Request[v1.FeaturesRequest]) (*connect.Response[v1.FeaturesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.PubSub.Features is not implemented"))
}

func (UnimplementedPubSubHandler) Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.PubSub.Publish is not implemented"))
}

func (UnimplementedPubSubHandler) BulkPublish(context.Context, *connect.Request[v1.BulkPublishRequest]) (*connect.Response[v1.BulkPublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.PubSub.BulkPublish is not implemented"))
}

func (UnimplementedPubSubHandler) PullMessages(context.Context, *connect.BidiStream[v1.PullMessagesRequest, v1.PullMessagesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.PubSub.PullMessages is not implemented"))
}

func (UnimplementedPubSubHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.components.v1.PubSub.Ping is not implemented"))
}
