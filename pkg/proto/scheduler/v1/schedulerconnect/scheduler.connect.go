// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/scheduler/v1/scheduler.proto

package schedulerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/scheduler/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SchedulerName is the fully-qualified name of the Scheduler service.
	SchedulerName = "dapr.proto.scheduler.v1.Scheduler"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchedulerScheduleJobProcedure is the fully-qualified name of the Scheduler's ScheduleJob RPC.
	SchedulerScheduleJobProcedure = "/dapr.proto.scheduler.v1.Scheduler/ScheduleJob"
	// SchedulerGetJobProcedure is the fully-qualified name of the Scheduler's GetJob RPC.
	SchedulerGetJobProcedure = "/dapr.proto.scheduler.v1.Scheduler/GetJob"
	// SchedulerDeleteJobProcedure is the fully-qualified name of the Scheduler's DeleteJob RPC.
	SchedulerDeleteJobProcedure = "/dapr.proto.scheduler.v1.Scheduler/DeleteJob"
	// SchedulerWatchJobsProcedure is the fully-qualified name of the Scheduler's WatchJobs RPC.
	SchedulerWatchJobsProcedure = "/dapr.proto.scheduler.v1.Scheduler/WatchJobs"
	// SchedulerListJobsProcedure is the fully-qualified name of the Scheduler's ListJobs RPC.
	SchedulerListJobsProcedure = "/dapr.proto.scheduler.v1.Scheduler/ListJobs"
	// SchedulerWatchHostsProcedure is the fully-qualified name of the Scheduler's WatchHosts RPC.
	SchedulerWatchHostsProcedure = "/dapr.proto.scheduler.v1.Scheduler/WatchHosts"
)

// SchedulerClient is a client for the dapr.proto.scheduler.v1.Scheduler service.
type SchedulerClient interface {
	// ScheduleJob is used by the daprd sidecar to schedule a job.
	ScheduleJob(context.Context, *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error)
	// Get a job
	GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	// DeleteJob is used by the daprd sidecar to delete a job.
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	// WatchJobs is used by the daprd sidecar to connect to the Scheduler
	// service to watch for jobs triggering back.
	WatchJobs(context.Context) *connect.BidiStreamForClient[v1.WatchJobsRequest, v1.WatchJobsResponse]
	// ListJobs is used by the daprd sidecar to list all jobs.
	ListJobs(context.Context, *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error)
	// WatchHosts is used by the daprd sidecar to retrieve the list of active
	// scheduler hosts so that it can connect to each. Receives an updated list
	// on leadership changes.
	WatchHosts(context.Context, *connect.Request[v1.WatchHostsRequest]) (*connect.ServerStreamForClient[v1.WatchHostsResponse], error)
}

// NewSchedulerClient constructs a client for the dapr.proto.scheduler.v1.Scheduler service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchedulerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SchedulerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schedulerClient{
		scheduleJob: connect.NewClient[v1.ScheduleJobRequest, v1.ScheduleJobResponse](
			httpClient,
			baseURL+SchedulerScheduleJobProcedure,
			opts...,
		),
		getJob: connect.NewClient[v1.GetJobRequest, v1.GetJobResponse](
			httpClient,
			baseURL+SchedulerGetJobProcedure,
			opts...,
		),
		deleteJob: connect.NewClient[v1.DeleteJobRequest, v1.DeleteJobResponse](
			httpClient,
			baseURL+SchedulerDeleteJobProcedure,
			opts...,
		),
		watchJobs: connect.NewClient[v1.WatchJobsRequest, v1.WatchJobsResponse](
			httpClient,
			baseURL+SchedulerWatchJobsProcedure,
			opts...,
		),
		listJobs: connect.NewClient[v1.ListJobsRequest, v1.ListJobsResponse](
			httpClient,
			baseURL+SchedulerListJobsProcedure,
			opts...,
		),
		watchHosts: connect.NewClient[v1.WatchHostsRequest, v1.WatchHostsResponse](
			httpClient,
			baseURL+SchedulerWatchHostsProcedure,
			opts...,
		),
	}
}

// schedulerClient implements SchedulerClient.
type schedulerClient struct {
	scheduleJob *connect.Client[v1.ScheduleJobRequest, v1.ScheduleJobResponse]
	getJob      *connect.Client[v1.GetJobRequest, v1.GetJobResponse]
	deleteJob   *connect.Client[v1.DeleteJobRequest, v1.DeleteJobResponse]
	watchJobs   *connect.Client[v1.WatchJobsRequest, v1.WatchJobsResponse]
	listJobs    *connect.Client[v1.ListJobsRequest, v1.ListJobsResponse]
	watchHosts  *connect.Client[v1.WatchHostsRequest, v1.WatchHostsResponse]
}

// ScheduleJob calls dapr.proto.scheduler.v1.Scheduler.ScheduleJob.
func (c *schedulerClient) ScheduleJob(ctx context.Context, req *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error) {
	return c.scheduleJob.CallUnary(ctx, req)
}

// GetJob calls dapr.proto.scheduler.v1.Scheduler.GetJob.
func (c *schedulerClient) GetJob(ctx context.Context, req *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return c.getJob.CallUnary(ctx, req)
}

// DeleteJob calls dapr.proto.scheduler.v1.Scheduler.DeleteJob.
func (c *schedulerClient) DeleteJob(ctx context.Context, req *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return c.deleteJob.CallUnary(ctx, req)
}

// WatchJobs calls dapr.proto.scheduler.v1.Scheduler.WatchJobs.
func (c *schedulerClient) WatchJobs(ctx context.Context) *connect.BidiStreamForClient[v1.WatchJobsRequest, v1.WatchJobsResponse] {
	return c.watchJobs.CallBidiStream(ctx)
}

// ListJobs calls dapr.proto.scheduler.v1.Scheduler.ListJobs.
func (c *schedulerClient) ListJobs(ctx context.Context, req *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error) {
	return c.listJobs.CallUnary(ctx, req)
}

// WatchHosts calls dapr.proto.scheduler.v1.Scheduler.WatchHosts.
func (c *schedulerClient) WatchHosts(ctx context.Context, req *connect.Request[v1.WatchHostsRequest]) (*connect.ServerStreamForClient[v1.WatchHostsResponse], error) {
	return c.watchHosts.CallServerStream(ctx, req)
}

// SchedulerHandler is an implementation of the dapr.proto.scheduler.v1.Scheduler service.
type SchedulerHandler interface {
	// ScheduleJob is used by the daprd sidecar to schedule a job.
	ScheduleJob(context.Context, *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error)
	// Get a job
	GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error)
	// DeleteJob is used by the daprd sidecar to delete a job.
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	// WatchJobs is used by the daprd sidecar to connect to the Scheduler
	// service to watch for jobs triggering back.
	WatchJobs(context.Context, *connect.BidiStream[v1.WatchJobsRequest, v1.WatchJobsResponse]) error
	// ListJobs is used by the daprd sidecar to list all jobs.
	ListJobs(context.Context, *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error)
	// WatchHosts is used by the daprd sidecar to retrieve the list of active
	// scheduler hosts so that it can connect to each. Receives an updated list
	// on leadership changes.
	WatchHosts(context.Context, *connect.Request[v1.WatchHostsRequest], *connect.ServerStream[v1.WatchHostsResponse]) error
}

// NewSchedulerHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchedulerHandler(svc SchedulerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	schedulerScheduleJobHandler := connect.NewUnaryHandler(
		SchedulerScheduleJobProcedure,
		svc.ScheduleJob,
		opts...,
	)
	schedulerGetJobHandler := connect.NewUnaryHandler(
		SchedulerGetJobProcedure,
		svc.GetJob,
		opts...,
	)
	schedulerDeleteJobHandler := connect.NewUnaryHandler(
		SchedulerDeleteJobProcedure,
		svc.DeleteJob,
		opts...,
	)
	schedulerWatchJobsHandler := connect.NewBidiStreamHandler(
		SchedulerWatchJobsProcedure,
		svc.WatchJobs,
		opts...,
	)
	schedulerListJobsHandler := connect.NewUnaryHandler(
		SchedulerListJobsProcedure,
		svc.ListJobs,
		opts...,
	)
	schedulerWatchHostsHandler := connect.NewServerStreamHandler(
		SchedulerWatchHostsProcedure,
		svc.WatchHosts,
		opts...,
	)
	return "/dapr.proto.scheduler.v1.Scheduler/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchedulerScheduleJobProcedure:
			schedulerScheduleJobHandler.ServeHTTP(w, r)
		case SchedulerGetJobProcedure:
			schedulerGetJobHandler.ServeHTTP(w, r)
		case SchedulerDeleteJobProcedure:
			schedulerDeleteJobHandler.ServeHTTP(w, r)
		case SchedulerWatchJobsProcedure:
			schedulerWatchJobsHandler.ServeHTTP(w, r)
		case SchedulerListJobsProcedure:
			schedulerListJobsHandler.ServeHTTP(w, r)
		case SchedulerWatchHostsProcedure:
			schedulerWatchHostsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchedulerHandler returns CodeUnimplemented from all methods.
type UnimplementedSchedulerHandler struct{}

func (UnimplementedSchedulerHandler) ScheduleJob(context.Context, *connect.Request[v1.ScheduleJobRequest]) (*connect.Response[v1.ScheduleJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.scheduler.v1.Scheduler.ScheduleJob is not implemented"))
}

func (UnimplementedSchedulerHandler) GetJob(context.Context, *connect.Request[v1.GetJobRequest]) (*connect.Response[v1.GetJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.scheduler.v1.Scheduler.GetJob is not implemented"))
}

func (UnimplementedSchedulerHandler) DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.scheduler.v1.Scheduler.DeleteJob is not implemented"))
}

func (UnimplementedSchedulerHandler) WatchJobs(context.Context, *connect.BidiStream[v1.WatchJobsRequest, v1.WatchJobsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.scheduler.v1.Scheduler.WatchJobs is not implemented"))
}

func (UnimplementedSchedulerHandler) ListJobs(context.Context, *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.scheduler.v1.Scheduler.ListJobs is not implemented"))
}

func (UnimplementedSchedulerHandler) WatchHosts(context.Context, *connect.Request[v1.WatchHostsRequest], *connect.ServerStream[v1.WatchHostsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.scheduler.v1.Scheduler.WatchHosts is not implemented"))
}
