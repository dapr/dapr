syntax = "proto3";

package actions;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

// Actions Runtime definitions
service Actions {
  rpc CallRemoteApp (CallRemoteAppEnvelope) returns (InvokeResponse) {}
  rpc CallActor (CallActorEnvelope) returns (InvokeResponse) {}
  rpc CallLocal (LocalCallEnvelope) returns (InvokeResponse) {}
  rpc UpdateComponent (Component) returns (google.protobuf.Empty) {}
}

message LocalCallEnvelope {
    google.protobuf.Any data = 1;
    string method = 2;
    map<string,string> metadata = 3;
}

message CallRemoteAppEnvelope {
  string target = 1;
  google.protobuf.Any data = 2;
  string method = 3;
  map<string,string> metadata = 4;
}

message CallActorEnvelope {
  string actorID = 1;
  string actorType = 2;
  string method = 3;
  google.protobuf.Any data = 4;
}

message InvokeResponse {
  google.protobuf.Any data = 1;
  map<string,string> metadata = 2;
}

message Component {
  string name = 1;
  ComponentSpec spec = 2;
}

message ComponentSpec {
  string type = 1;
  map<string,string> connection_info = 2;
  map<string,string> properties = 3;
}

message SaveStateEnvelope {
  repeated KeyVal state = 1;
}

message GetStateEnvelope {
  string key = 1;
}

// User Code definitions
service App {
  rpc OnMethodCall (AppMethodCallEnvelope) returns (google.protobuf.Any) {}
  rpc RestoreState (State) returns (google.protobuf.Empty) {}
  rpc GetConfig(google.protobuf.Empty) returns (ApplicationConfig) {}
}

message AppMethodCallEnvelope {
    string method = 1;
    google.protobuf.Any data = 2;
    map<string,string> metadata = 3;
}

message State {
  repeated KeyVal state = 1;
}

message KeyVal {
  string key = 1;
  google.protobuf.Any value = 2;
}

message ApplicationConfig {
  repeated string entities = 1;
}

// Placement service
service PlacementService {
    rpc ReportActionStatus(stream Host) returns (stream PlacementOrder) {}
}

message PlacementOrder {
  PlacementTables tables = 1;
  string operation = 2;
}

message PlacementTables {
  map<string, PlacementTable> entries = 1;
  string version = 2;
}

message PlacementTable {
  map<uint64, string> hosts = 1;
  repeated uint64 sortedSet = 2;
  map<string, Host> loadMap = 3;
  int64 totalLoad = 4;
}

message Host {
  string name = 1;
  int64 port = 2;
  int64 load = 3;
  repeated string entities = 4;
}
