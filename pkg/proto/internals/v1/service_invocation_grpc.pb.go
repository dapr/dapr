// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package internals

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceInvocationClient is the client API for ServiceInvocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInvocationClient interface {
	// Invokes a method of the specific actor.
	CallActor(ctx context.Context, in *InternalInvokeRequest, opts ...grpc.CallOption) (*InternalInvokeResponse, error)
	// Invokes a method of the specific service.
	CallLocal(ctx context.Context, in *InternalInvokeRequest, opts ...grpc.CallOption) (*InternalInvokeResponse, error)
}

type serviceInvocationClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInvocationClient(cc grpc.ClientConnInterface) ServiceInvocationClient {
	return &serviceInvocationClient{cc}
}

func (c *serviceInvocationClient) CallActor(ctx context.Context, in *InternalInvokeRequest, opts ...grpc.CallOption) (*InternalInvokeResponse, error) {
	out := new(InternalInvokeResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.internals.v1.ServiceInvocation/CallActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInvocationClient) CallLocal(ctx context.Context, in *InternalInvokeRequest, opts ...grpc.CallOption) (*InternalInvokeResponse, error) {
	out := new(InternalInvokeResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.internals.v1.ServiceInvocation/CallLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInvocationServer is the server API for ServiceInvocation service.
// All implementations should embed UnimplementedServiceInvocationServer
// for forward compatibility
type ServiceInvocationServer interface {
	// Invokes a method of the specific actor.
	CallActor(context.Context, *InternalInvokeRequest) (*InternalInvokeResponse, error)
	// Invokes a method of the specific service.
	CallLocal(context.Context, *InternalInvokeRequest) (*InternalInvokeResponse, error)
}

// UnimplementedServiceInvocationServer should be embedded to have forward compatible implementations.
type UnimplementedServiceInvocationServer struct {
}

func (UnimplementedServiceInvocationServer) CallActor(context.Context, *InternalInvokeRequest) (*InternalInvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallActor not implemented")
}
func (UnimplementedServiceInvocationServer) CallLocal(context.Context, *InternalInvokeRequest) (*InternalInvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallLocal not implemented")
}

// UnsafeServiceInvocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInvocationServer will
// result in compilation errors.
type UnsafeServiceInvocationServer interface {
	mustEmbedUnimplementedServiceInvocationServer()
}

func RegisterServiceInvocationServer(s grpc.ServiceRegistrar, srv ServiceInvocationServer) {
	s.RegisterService(&ServiceInvocation_ServiceDesc, srv)
}

func _ServiceInvocation_CallActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalInvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInvocationServer).CallActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.internals.v1.ServiceInvocation/CallActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInvocationServer).CallActor(ctx, req.(*InternalInvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInvocation_CallLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalInvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInvocationServer).CallLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.internals.v1.ServiceInvocation/CallLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInvocationServer).CallLocal(ctx, req.(*InternalInvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceInvocation_ServiceDesc is the grpc.ServiceDesc for ServiceInvocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInvocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dapr.proto.internals.v1.ServiceInvocation",
	HandlerType: (*ServiceInvocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallActor",
			Handler:    _ServiceInvocation_CallActor_Handler,
		},
		{
			MethodName: "CallLocal",
			Handler:    _ServiceInvocation_CallLocal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dapr/proto/internals/v1/service_invocation.proto",
}
