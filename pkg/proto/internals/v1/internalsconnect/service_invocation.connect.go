//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/internals/v1/service_invocation.proto

package internalsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/internals/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ServiceInvocationName is the fully-qualified name of the ServiceInvocation service.
	ServiceInvocationName = "dapr.proto.internals.v1.ServiceInvocation"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceInvocationCallActorProcedure is the fully-qualified name of the ServiceInvocation's
	// CallActor RPC.
	ServiceInvocationCallActorProcedure = "/dapr.proto.internals.v1.ServiceInvocation/CallActor"
	// ServiceInvocationCallLocalProcedure is the fully-qualified name of the ServiceInvocation's
	// CallLocal RPC.
	ServiceInvocationCallLocalProcedure = "/dapr.proto.internals.v1.ServiceInvocation/CallLocal"
	// ServiceInvocationCallActorReminderProcedure is the fully-qualified name of the
	// ServiceInvocation's CallActorReminder RPC.
	ServiceInvocationCallActorReminderProcedure = "/dapr.proto.internals.v1.ServiceInvocation/CallActorReminder"
	// ServiceInvocationCallLocalStreamProcedure is the fully-qualified name of the ServiceInvocation's
	// CallLocalStream RPC.
	ServiceInvocationCallLocalStreamProcedure = "/dapr.proto.internals.v1.ServiceInvocation/CallLocalStream"
	// ServiceInvocationCallActorStreamProcedure is the fully-qualified name of the ServiceInvocation's
	// CallActorStream RPC.
	ServiceInvocationCallActorStreamProcedure = "/dapr.proto.internals.v1.ServiceInvocation/CallActorStream"
)

// ServiceInvocationClient is a client for the dapr.proto.internals.v1.ServiceInvocation service.
type ServiceInvocationClient interface {
	// Invokes a method of the specific actor.
	CallActor(context.Context, *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error)
	// Invokes a method of the specific service.
	CallLocal(context.Context, *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error)
	// Invoke a remote internal actor reminder
	CallActorReminder(context.Context, *connect.Request[v1.Reminder]) (*connect.Response[emptypb.Empty], error)
	// Invokes a method of the specific service using a stream of data.
	// Although this uses a bi-directional stream, it behaves as a "simple RPC" in which the caller sends the full request (chunked in multiple messages in the stream), then reads the full response (chunked in the stream).
	// Each message in the stream contains a `InternalInvokeRequestStream` (for caller) or `InternalInvokeResponseStream` (for callee):
	// - The first message in the stream MUST contain a `request` (caller) or `response` (callee) message with all required properties present.
	// - The first message in the stream MAY contain a `payload`, which is not required and may be empty.
	// - Subsequent messages (any message except the first one in the stream) MUST contain a `payload` and MUST NOT contain any other property (like `request` or `response`).
	// - Each message with a `payload` MUST contain a sequence number in `seq`, which is a counter that starts from 0 and MUST be incremented by 1 in each chunk. The `seq` counter MUST NOT be included if the message does not have a `payload`.
	// - When the sender has completed sending the data, it MUST call `CloseSend` on the stream.
	// The caller and callee must send at least one message in the stream. If only 1 message is sent in each direction, that message must contain both a `request`/`response` (the `payload` may be empty).
	CallLocalStream(context.Context) *connect.BidiStreamForClient[v1.InternalInvokeRequestStream, v1.InternalInvokeResponseStream]
	// CallActorStream is used to invoke actor method with request and streaming
	// response.
	CallActorStream(context.Context, *connect.Request[v1.InternalInvokeRequest]) (*connect.ServerStreamForClient[v1.InternalInvokeResponse], error)
}

// NewServiceInvocationClient constructs a client for the dapr.proto.internals.v1.ServiceInvocation
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceInvocationClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceInvocationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceInvocationClient{
		callActor: connect.NewClient[v1.InternalInvokeRequest, v1.InternalInvokeResponse](
			httpClient,
			baseURL+ServiceInvocationCallActorProcedure,
			opts...,
		),
		callLocal: connect.NewClient[v1.InternalInvokeRequest, v1.InternalInvokeResponse](
			httpClient,
			baseURL+ServiceInvocationCallLocalProcedure,
			opts...,
		),
		callActorReminder: connect.NewClient[v1.Reminder, emptypb.Empty](
			httpClient,
			baseURL+ServiceInvocationCallActorReminderProcedure,
			opts...,
		),
		callLocalStream: connect.NewClient[v1.InternalInvokeRequestStream, v1.InternalInvokeResponseStream](
			httpClient,
			baseURL+ServiceInvocationCallLocalStreamProcedure,
			opts...,
		),
		callActorStream: connect.NewClient[v1.InternalInvokeRequest, v1.InternalInvokeResponse](
			httpClient,
			baseURL+ServiceInvocationCallActorStreamProcedure,
			opts...,
		),
	}
}

// serviceInvocationClient implements ServiceInvocationClient.
type serviceInvocationClient struct {
	callActor         *connect.Client[v1.InternalInvokeRequest, v1.InternalInvokeResponse]
	callLocal         *connect.Client[v1.InternalInvokeRequest, v1.InternalInvokeResponse]
	callActorReminder *connect.Client[v1.Reminder, emptypb.Empty]
	callLocalStream   *connect.Client[v1.InternalInvokeRequestStream, v1.InternalInvokeResponseStream]
	callActorStream   *connect.Client[v1.InternalInvokeRequest, v1.InternalInvokeResponse]
}

// CallActor calls dapr.proto.internals.v1.ServiceInvocation.CallActor.
func (c *serviceInvocationClient) CallActor(ctx context.Context, req *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error) {
	return c.callActor.CallUnary(ctx, req)
}

// CallLocal calls dapr.proto.internals.v1.ServiceInvocation.CallLocal.
func (c *serviceInvocationClient) CallLocal(ctx context.Context, req *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error) {
	return c.callLocal.CallUnary(ctx, req)
}

// CallActorReminder calls dapr.proto.internals.v1.ServiceInvocation.CallActorReminder.
func (c *serviceInvocationClient) CallActorReminder(ctx context.Context, req *connect.Request[v1.Reminder]) (*connect.Response[emptypb.Empty], error) {
	return c.callActorReminder.CallUnary(ctx, req)
}

// CallLocalStream calls dapr.proto.internals.v1.ServiceInvocation.CallLocalStream.
func (c *serviceInvocationClient) CallLocalStream(ctx context.Context) *connect.BidiStreamForClient[v1.InternalInvokeRequestStream, v1.InternalInvokeResponseStream] {
	return c.callLocalStream.CallBidiStream(ctx)
}

// CallActorStream calls dapr.proto.internals.v1.ServiceInvocation.CallActorStream.
func (c *serviceInvocationClient) CallActorStream(ctx context.Context, req *connect.Request[v1.InternalInvokeRequest]) (*connect.ServerStreamForClient[v1.InternalInvokeResponse], error) {
	return c.callActorStream.CallServerStream(ctx, req)
}

// ServiceInvocationHandler is an implementation of the dapr.proto.internals.v1.ServiceInvocation
// service.
type ServiceInvocationHandler interface {
	// Invokes a method of the specific actor.
	CallActor(context.Context, *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error)
	// Invokes a method of the specific service.
	CallLocal(context.Context, *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error)
	// Invoke a remote internal actor reminder
	CallActorReminder(context.Context, *connect.Request[v1.Reminder]) (*connect.Response[emptypb.Empty], error)
	// Invokes a method of the specific service using a stream of data.
	// Although this uses a bi-directional stream, it behaves as a "simple RPC" in which the caller sends the full request (chunked in multiple messages in the stream), then reads the full response (chunked in the stream).
	// Each message in the stream contains a `InternalInvokeRequestStream` (for caller) or `InternalInvokeResponseStream` (for callee):
	// - The first message in the stream MUST contain a `request` (caller) or `response` (callee) message with all required properties present.
	// - The first message in the stream MAY contain a `payload`, which is not required and may be empty.
	// - Subsequent messages (any message except the first one in the stream) MUST contain a `payload` and MUST NOT contain any other property (like `request` or `response`).
	// - Each message with a `payload` MUST contain a sequence number in `seq`, which is a counter that starts from 0 and MUST be incremented by 1 in each chunk. The `seq` counter MUST NOT be included if the message does not have a `payload`.
	// - When the sender has completed sending the data, it MUST call `CloseSend` on the stream.
	// The caller and callee must send at least one message in the stream. If only 1 message is sent in each direction, that message must contain both a `request`/`response` (the `payload` may be empty).
	CallLocalStream(context.Context, *connect.BidiStream[v1.InternalInvokeRequestStream, v1.InternalInvokeResponseStream]) error
	// CallActorStream is used to invoke actor method with request and streaming
	// response.
	CallActorStream(context.Context, *connect.Request[v1.InternalInvokeRequest], *connect.ServerStream[v1.InternalInvokeResponse]) error
}

// NewServiceInvocationHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceInvocationHandler(svc ServiceInvocationHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceInvocationCallActorHandler := connect.NewUnaryHandler(
		ServiceInvocationCallActorProcedure,
		svc.CallActor,
		opts...,
	)
	serviceInvocationCallLocalHandler := connect.NewUnaryHandler(
		ServiceInvocationCallLocalProcedure,
		svc.CallLocal,
		opts...,
	)
	serviceInvocationCallActorReminderHandler := connect.NewUnaryHandler(
		ServiceInvocationCallActorReminderProcedure,
		svc.CallActorReminder,
		opts...,
	)
	serviceInvocationCallLocalStreamHandler := connect.NewBidiStreamHandler(
		ServiceInvocationCallLocalStreamProcedure,
		svc.CallLocalStream,
		opts...,
	)
	serviceInvocationCallActorStreamHandler := connect.NewServerStreamHandler(
		ServiceInvocationCallActorStreamProcedure,
		svc.CallActorStream,
		opts...,
	)
	return "/dapr.proto.internals.v1.ServiceInvocation/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceInvocationCallActorProcedure:
			serviceInvocationCallActorHandler.ServeHTTP(w, r)
		case ServiceInvocationCallLocalProcedure:
			serviceInvocationCallLocalHandler.ServeHTTP(w, r)
		case ServiceInvocationCallActorReminderProcedure:
			serviceInvocationCallActorReminderHandler.ServeHTTP(w, r)
		case ServiceInvocationCallLocalStreamProcedure:
			serviceInvocationCallLocalStreamHandler.ServeHTTP(w, r)
		case ServiceInvocationCallActorStreamProcedure:
			serviceInvocationCallActorStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceInvocationHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceInvocationHandler struct{}

func (UnimplementedServiceInvocationHandler) CallActor(context.Context, *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.internals.v1.ServiceInvocation.CallActor is not implemented"))
}

func (UnimplementedServiceInvocationHandler) CallLocal(context.Context, *connect.Request[v1.InternalInvokeRequest]) (*connect.Response[v1.InternalInvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.internals.v1.ServiceInvocation.CallLocal is not implemented"))
}

func (UnimplementedServiceInvocationHandler) CallActorReminder(context.Context, *connect.Request[v1.Reminder]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.internals.v1.ServiceInvocation.CallActorReminder is not implemented"))
}

func (UnimplementedServiceInvocationHandler) CallLocalStream(context.Context, *connect.BidiStream[v1.InternalInvokeRequestStream, v1.InternalInvokeResponseStream]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.internals.v1.ServiceInvocation.CallLocalStream is not implemented"))
}

func (UnimplementedServiceInvocationHandler) CallActorStream(context.Context, *connect.Request[v1.InternalInvokeRequest], *connect.ServerStream[v1.InternalInvokeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.internals.v1.ServiceInvocation.CallActorStream is not implemented"))
}
