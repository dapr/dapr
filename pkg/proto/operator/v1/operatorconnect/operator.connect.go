//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/operator/v1/operator.proto

package operatorconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/operator/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// OperatorName is the fully-qualified name of the Operator service.
	OperatorName = "dapr.proto.operator.v1.Operator"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OperatorComponentUpdateProcedure is the fully-qualified name of the Operator's ComponentUpdate
	// RPC.
	OperatorComponentUpdateProcedure = "/dapr.proto.operator.v1.Operator/ComponentUpdate"
	// OperatorListComponentsProcedure is the fully-qualified name of the Operator's ListComponents RPC.
	OperatorListComponentsProcedure = "/dapr.proto.operator.v1.Operator/ListComponents"
	// OperatorGetConfigurationProcedure is the fully-qualified name of the Operator's GetConfiguration
	// RPC.
	OperatorGetConfigurationProcedure = "/dapr.proto.operator.v1.Operator/GetConfiguration"
	// OperatorListSubscriptionsProcedure is the fully-qualified name of the Operator's
	// ListSubscriptions RPC.
	OperatorListSubscriptionsProcedure = "/dapr.proto.operator.v1.Operator/ListSubscriptions"
	// OperatorGetResiliencyProcedure is the fully-qualified name of the Operator's GetResiliency RPC.
	OperatorGetResiliencyProcedure = "/dapr.proto.operator.v1.Operator/GetResiliency"
	// OperatorListResiliencyProcedure is the fully-qualified name of the Operator's ListResiliency RPC.
	OperatorListResiliencyProcedure = "/dapr.proto.operator.v1.Operator/ListResiliency"
	// OperatorListSubscriptionsV2Procedure is the fully-qualified name of the Operator's
	// ListSubscriptionsV2 RPC.
	OperatorListSubscriptionsV2Procedure = "/dapr.proto.operator.v1.Operator/ListSubscriptionsV2"
	// OperatorSubscriptionUpdateProcedure is the fully-qualified name of the Operator's
	// SubscriptionUpdate RPC.
	OperatorSubscriptionUpdateProcedure = "/dapr.proto.operator.v1.Operator/SubscriptionUpdate"
	// OperatorListHTTPEndpointsProcedure is the fully-qualified name of the Operator's
	// ListHTTPEndpoints RPC.
	OperatorListHTTPEndpointsProcedure = "/dapr.proto.operator.v1.Operator/ListHTTPEndpoints"
	// OperatorHTTPEndpointUpdateProcedure is the fully-qualified name of the Operator's
	// HTTPEndpointUpdate RPC.
	OperatorHTTPEndpointUpdateProcedure = "/dapr.proto.operator.v1.Operator/HTTPEndpointUpdate"
)

// OperatorClient is a client for the dapr.proto.operator.v1.Operator service.
type OperatorClient interface {
	// Sends events to Dapr sidecars upon component changes.
	ComponentUpdate(context.Context, *connect.Request[v1.ComponentUpdateRequest]) (*connect.ServerStreamForClient[v1.ComponentUpdateEvent], error)
	// Returns a list of available components
	ListComponents(context.Context, *connect.Request[v1.ListComponentsRequest]) (*connect.Response[v1.ListComponentResponse], error)
	// Returns a given configuration by name
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	// Returns a list of pub/sub subscriptions
	ListSubscriptions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	// Returns a given resiliency configuration by name
	GetResiliency(context.Context, *connect.Request[v1.GetResiliencyRequest]) (*connect.Response[v1.GetResiliencyResponse], error)
	// Returns a list of resiliency configurations
	ListResiliency(context.Context, *connect.Request[v1.ListResiliencyRequest]) (*connect.Response[v1.ListResiliencyResponse], error)
	// Returns a list of pub/sub subscriptions, ListSubscriptionsRequest to expose pod info
	ListSubscriptionsV2(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	// Sends events to Dapr sidecars upon subscription changes.
	SubscriptionUpdate(context.Context, *connect.Request[v1.SubscriptionUpdateRequest]) (*connect.ServerStreamForClient[v1.SubscriptionUpdateEvent], error)
	// Returns a list of http endpoints
	ListHTTPEndpoints(context.Context, *connect.Request[v1.ListHTTPEndpointsRequest]) (*connect.Response[v1.ListHTTPEndpointsResponse], error)
	// Sends events to Dapr sidecars upon http endpoint changes.
	HTTPEndpointUpdate(context.Context, *connect.Request[v1.HTTPEndpointUpdateRequest]) (*connect.ServerStreamForClient[v1.HTTPEndpointUpdateEvent], error)
}

// NewOperatorClient constructs a client for the dapr.proto.operator.v1.Operator service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOperatorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OperatorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &operatorClient{
		componentUpdate: connect.NewClient[v1.ComponentUpdateRequest, v1.ComponentUpdateEvent](
			httpClient,
			baseURL+OperatorComponentUpdateProcedure,
			opts...,
		),
		listComponents: connect.NewClient[v1.ListComponentsRequest, v1.ListComponentResponse](
			httpClient,
			baseURL+OperatorListComponentsProcedure,
			opts...,
		),
		getConfiguration: connect.NewClient[v1.GetConfigurationRequest, v1.GetConfigurationResponse](
			httpClient,
			baseURL+OperatorGetConfigurationProcedure,
			opts...,
		),
		listSubscriptions: connect.NewClient[emptypb.Empty, v1.ListSubscriptionsResponse](
			httpClient,
			baseURL+OperatorListSubscriptionsProcedure,
			opts...,
		),
		getResiliency: connect.NewClient[v1.GetResiliencyRequest, v1.GetResiliencyResponse](
			httpClient,
			baseURL+OperatorGetResiliencyProcedure,
			opts...,
		),
		listResiliency: connect.NewClient[v1.ListResiliencyRequest, v1.ListResiliencyResponse](
			httpClient,
			baseURL+OperatorListResiliencyProcedure,
			opts...,
		),
		listSubscriptionsV2: connect.NewClient[v1.ListSubscriptionsRequest, v1.ListSubscriptionsResponse](
			httpClient,
			baseURL+OperatorListSubscriptionsV2Procedure,
			opts...,
		),
		subscriptionUpdate: connect.NewClient[v1.SubscriptionUpdateRequest, v1.SubscriptionUpdateEvent](
			httpClient,
			baseURL+OperatorSubscriptionUpdateProcedure,
			opts...,
		),
		listHTTPEndpoints: connect.NewClient[v1.ListHTTPEndpointsRequest, v1.ListHTTPEndpointsResponse](
			httpClient,
			baseURL+OperatorListHTTPEndpointsProcedure,
			opts...,
		),
		hTTPEndpointUpdate: connect.NewClient[v1.HTTPEndpointUpdateRequest, v1.HTTPEndpointUpdateEvent](
			httpClient,
			baseURL+OperatorHTTPEndpointUpdateProcedure,
			opts...,
		),
	}
}

// operatorClient implements OperatorClient.
type operatorClient struct {
	componentUpdate     *connect.Client[v1.ComponentUpdateRequest, v1.ComponentUpdateEvent]
	listComponents      *connect.Client[v1.ListComponentsRequest, v1.ListComponentResponse]
	getConfiguration    *connect.Client[v1.GetConfigurationRequest, v1.GetConfigurationResponse]
	listSubscriptions   *connect.Client[emptypb.Empty, v1.ListSubscriptionsResponse]
	getResiliency       *connect.Client[v1.GetResiliencyRequest, v1.GetResiliencyResponse]
	listResiliency      *connect.Client[v1.ListResiliencyRequest, v1.ListResiliencyResponse]
	listSubscriptionsV2 *connect.Client[v1.ListSubscriptionsRequest, v1.ListSubscriptionsResponse]
	subscriptionUpdate  *connect.Client[v1.SubscriptionUpdateRequest, v1.SubscriptionUpdateEvent]
	listHTTPEndpoints   *connect.Client[v1.ListHTTPEndpointsRequest, v1.ListHTTPEndpointsResponse]
	hTTPEndpointUpdate  *connect.Client[v1.HTTPEndpointUpdateRequest, v1.HTTPEndpointUpdateEvent]
}

// ComponentUpdate calls dapr.proto.operator.v1.Operator.ComponentUpdate.
func (c *operatorClient) ComponentUpdate(ctx context.Context, req *connect.Request[v1.ComponentUpdateRequest]) (*connect.ServerStreamForClient[v1.ComponentUpdateEvent], error) {
	return c.componentUpdate.CallServerStream(ctx, req)
}

// ListComponents calls dapr.proto.operator.v1.Operator.ListComponents.
func (c *operatorClient) ListComponents(ctx context.Context, req *connect.Request[v1.ListComponentsRequest]) (*connect.Response[v1.ListComponentResponse], error) {
	return c.listComponents.CallUnary(ctx, req)
}

// GetConfiguration calls dapr.proto.operator.v1.Operator.GetConfiguration.
func (c *operatorClient) GetConfiguration(ctx context.Context, req *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// ListSubscriptions calls dapr.proto.operator.v1.Operator.ListSubscriptions.
func (c *operatorClient) ListSubscriptions(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return c.listSubscriptions.CallUnary(ctx, req)
}

// GetResiliency calls dapr.proto.operator.v1.Operator.GetResiliency.
func (c *operatorClient) GetResiliency(ctx context.Context, req *connect.Request[v1.GetResiliencyRequest]) (*connect.Response[v1.GetResiliencyResponse], error) {
	return c.getResiliency.CallUnary(ctx, req)
}

// ListResiliency calls dapr.proto.operator.v1.Operator.ListResiliency.
func (c *operatorClient) ListResiliency(ctx context.Context, req *connect.Request[v1.ListResiliencyRequest]) (*connect.Response[v1.ListResiliencyResponse], error) {
	return c.listResiliency.CallUnary(ctx, req)
}

// ListSubscriptionsV2 calls dapr.proto.operator.v1.Operator.ListSubscriptionsV2.
func (c *operatorClient) ListSubscriptionsV2(ctx context.Context, req *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return c.listSubscriptionsV2.CallUnary(ctx, req)
}

// SubscriptionUpdate calls dapr.proto.operator.v1.Operator.SubscriptionUpdate.
func (c *operatorClient) SubscriptionUpdate(ctx context.Context, req *connect.Request[v1.SubscriptionUpdateRequest]) (*connect.ServerStreamForClient[v1.SubscriptionUpdateEvent], error) {
	return c.subscriptionUpdate.CallServerStream(ctx, req)
}

// ListHTTPEndpoints calls dapr.proto.operator.v1.Operator.ListHTTPEndpoints.
func (c *operatorClient) ListHTTPEndpoints(ctx context.Context, req *connect.Request[v1.ListHTTPEndpointsRequest]) (*connect.Response[v1.ListHTTPEndpointsResponse], error) {
	return c.listHTTPEndpoints.CallUnary(ctx, req)
}

// HTTPEndpointUpdate calls dapr.proto.operator.v1.Operator.HTTPEndpointUpdate.
func (c *operatorClient) HTTPEndpointUpdate(ctx context.Context, req *connect.Request[v1.HTTPEndpointUpdateRequest]) (*connect.ServerStreamForClient[v1.HTTPEndpointUpdateEvent], error) {
	return c.hTTPEndpointUpdate.CallServerStream(ctx, req)
}

// OperatorHandler is an implementation of the dapr.proto.operator.v1.Operator service.
type OperatorHandler interface {
	// Sends events to Dapr sidecars upon component changes.
	ComponentUpdate(context.Context, *connect.Request[v1.ComponentUpdateRequest], *connect.ServerStream[v1.ComponentUpdateEvent]) error
	// Returns a list of available components
	ListComponents(context.Context, *connect.Request[v1.ListComponentsRequest]) (*connect.Response[v1.ListComponentResponse], error)
	// Returns a given configuration by name
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	// Returns a list of pub/sub subscriptions
	ListSubscriptions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	// Returns a given resiliency configuration by name
	GetResiliency(context.Context, *connect.Request[v1.GetResiliencyRequest]) (*connect.Response[v1.GetResiliencyResponse], error)
	// Returns a list of resiliency configurations
	ListResiliency(context.Context, *connect.Request[v1.ListResiliencyRequest]) (*connect.Response[v1.ListResiliencyResponse], error)
	// Returns a list of pub/sub subscriptions, ListSubscriptionsRequest to expose pod info
	ListSubscriptionsV2(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	// Sends events to Dapr sidecars upon subscription changes.
	SubscriptionUpdate(context.Context, *connect.Request[v1.SubscriptionUpdateRequest], *connect.ServerStream[v1.SubscriptionUpdateEvent]) error
	// Returns a list of http endpoints
	ListHTTPEndpoints(context.Context, *connect.Request[v1.ListHTTPEndpointsRequest]) (*connect.Response[v1.ListHTTPEndpointsResponse], error)
	// Sends events to Dapr sidecars upon http endpoint changes.
	HTTPEndpointUpdate(context.Context, *connect.Request[v1.HTTPEndpointUpdateRequest], *connect.ServerStream[v1.HTTPEndpointUpdateEvent]) error
}

// NewOperatorHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOperatorHandler(svc OperatorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	operatorComponentUpdateHandler := connect.NewServerStreamHandler(
		OperatorComponentUpdateProcedure,
		svc.ComponentUpdate,
		opts...,
	)
	operatorListComponentsHandler := connect.NewUnaryHandler(
		OperatorListComponentsProcedure,
		svc.ListComponents,
		opts...,
	)
	operatorGetConfigurationHandler := connect.NewUnaryHandler(
		OperatorGetConfigurationProcedure,
		svc.GetConfiguration,
		opts...,
	)
	operatorListSubscriptionsHandler := connect.NewUnaryHandler(
		OperatorListSubscriptionsProcedure,
		svc.ListSubscriptions,
		opts...,
	)
	operatorGetResiliencyHandler := connect.NewUnaryHandler(
		OperatorGetResiliencyProcedure,
		svc.GetResiliency,
		opts...,
	)
	operatorListResiliencyHandler := connect.NewUnaryHandler(
		OperatorListResiliencyProcedure,
		svc.ListResiliency,
		opts...,
	)
	operatorListSubscriptionsV2Handler := connect.NewUnaryHandler(
		OperatorListSubscriptionsV2Procedure,
		svc.ListSubscriptionsV2,
		opts...,
	)
	operatorSubscriptionUpdateHandler := connect.NewServerStreamHandler(
		OperatorSubscriptionUpdateProcedure,
		svc.SubscriptionUpdate,
		opts...,
	)
	operatorListHTTPEndpointsHandler := connect.NewUnaryHandler(
		OperatorListHTTPEndpointsProcedure,
		svc.ListHTTPEndpoints,
		opts...,
	)
	operatorHTTPEndpointUpdateHandler := connect.NewServerStreamHandler(
		OperatorHTTPEndpointUpdateProcedure,
		svc.HTTPEndpointUpdate,
		opts...,
	)
	return "/dapr.proto.operator.v1.Operator/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OperatorComponentUpdateProcedure:
			operatorComponentUpdateHandler.ServeHTTP(w, r)
		case OperatorListComponentsProcedure:
			operatorListComponentsHandler.ServeHTTP(w, r)
		case OperatorGetConfigurationProcedure:
			operatorGetConfigurationHandler.ServeHTTP(w, r)
		case OperatorListSubscriptionsProcedure:
			operatorListSubscriptionsHandler.ServeHTTP(w, r)
		case OperatorGetResiliencyProcedure:
			operatorGetResiliencyHandler.ServeHTTP(w, r)
		case OperatorListResiliencyProcedure:
			operatorListResiliencyHandler.ServeHTTP(w, r)
		case OperatorListSubscriptionsV2Procedure:
			operatorListSubscriptionsV2Handler.ServeHTTP(w, r)
		case OperatorSubscriptionUpdateProcedure:
			operatorSubscriptionUpdateHandler.ServeHTTP(w, r)
		case OperatorListHTTPEndpointsProcedure:
			operatorListHTTPEndpointsHandler.ServeHTTP(w, r)
		case OperatorHTTPEndpointUpdateProcedure:
			operatorHTTPEndpointUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOperatorHandler returns CodeUnimplemented from all methods.
type UnimplementedOperatorHandler struct{}

func (UnimplementedOperatorHandler) ComponentUpdate(context.Context, *connect.Request[v1.ComponentUpdateRequest], *connect.ServerStream[v1.ComponentUpdateEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.ComponentUpdate is not implemented"))
}

func (UnimplementedOperatorHandler) ListComponents(context.Context, *connect.Request[v1.ListComponentsRequest]) (*connect.Response[v1.ListComponentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.ListComponents is not implemented"))
}

func (UnimplementedOperatorHandler) GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.GetConfiguration is not implemented"))
}

func (UnimplementedOperatorHandler) ListSubscriptions(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.ListSubscriptions is not implemented"))
}

func (UnimplementedOperatorHandler) GetResiliency(context.Context, *connect.Request[v1.GetResiliencyRequest]) (*connect.Response[v1.GetResiliencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.GetResiliency is not implemented"))
}

func (UnimplementedOperatorHandler) ListResiliency(context.Context, *connect.Request[v1.ListResiliencyRequest]) (*connect.Response[v1.ListResiliencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.ListResiliency is not implemented"))
}

func (UnimplementedOperatorHandler) ListSubscriptionsV2(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.ListSubscriptionsV2 is not implemented"))
}

func (UnimplementedOperatorHandler) SubscriptionUpdate(context.Context, *connect.Request[v1.SubscriptionUpdateRequest], *connect.ServerStream[v1.SubscriptionUpdateEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.SubscriptionUpdate is not implemented"))
}

func (UnimplementedOperatorHandler) ListHTTPEndpoints(context.Context, *connect.Request[v1.ListHTTPEndpointsRequest]) (*connect.Response[v1.ListHTTPEndpointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.ListHTTPEndpoints is not implemented"))
}

func (UnimplementedOperatorHandler) HTTPEndpointUpdate(context.Context, *connect.Request[v1.HTTPEndpointUpdateRequest], *connect.ServerStream[v1.HTTPEndpointUpdateEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.operator.v1.Operator.HTTPEndpointUpdate is not implemented"))
}
