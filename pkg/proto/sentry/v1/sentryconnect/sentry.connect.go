//
//Copyright 2021 The Dapr Authors
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dapr/proto/sentry/v1/sentry.proto

package sentryconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dapr/dapr/pkg/proto/sentry/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// CAName is the fully-qualified name of the CA service.
	CAName = "dapr.proto.sentry.v1.CA"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CASignCertificateProcedure is the fully-qualified name of the CA's SignCertificate RPC.
	CASignCertificateProcedure = "/dapr.proto.sentry.v1.CA/SignCertificate"
)

// CAClient is a client for the dapr.proto.sentry.v1.CA service.
type CAClient interface {
	// A request for a time-bound certificate to be signed.
	//
	// The requesting side must provide an id for both loosely based
	// And strong based identities.
	SignCertificate(context.Context, *connect.Request[v1.SignCertificateRequest]) (*connect.Response[v1.SignCertificateResponse], error)
}

// NewCAClient constructs a client for the dapr.proto.sentry.v1.CA service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCAClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CAClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cAClient{
		signCertificate: connect.NewClient[v1.SignCertificateRequest, v1.SignCertificateResponse](
			httpClient,
			baseURL+CASignCertificateProcedure,
			opts...,
		),
	}
}

// cAClient implements CAClient.
type cAClient struct {
	signCertificate *connect.Client[v1.SignCertificateRequest, v1.SignCertificateResponse]
}

// SignCertificate calls dapr.proto.sentry.v1.CA.SignCertificate.
func (c *cAClient) SignCertificate(ctx context.Context, req *connect.Request[v1.SignCertificateRequest]) (*connect.Response[v1.SignCertificateResponse], error) {
	return c.signCertificate.CallUnary(ctx, req)
}

// CAHandler is an implementation of the dapr.proto.sentry.v1.CA service.
type CAHandler interface {
	// A request for a time-bound certificate to be signed.
	//
	// The requesting side must provide an id for both loosely based
	// And strong based identities.
	SignCertificate(context.Context, *connect.Request[v1.SignCertificateRequest]) (*connect.Response[v1.SignCertificateResponse], error)
}

// NewCAHandler builds an HTTP handler from the service implementation. It returns the path on which
// to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCAHandler(svc CAHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cASignCertificateHandler := connect.NewUnaryHandler(
		CASignCertificateProcedure,
		svc.SignCertificate,
		opts...,
	)
	return "/dapr.proto.sentry.v1.CA/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CASignCertificateProcedure:
			cASignCertificateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCAHandler returns CodeUnimplemented from all methods.
type UnimplementedCAHandler struct{}

func (UnimplementedCAHandler) SignCertificate(context.Context, *connect.Request[v1.SignCertificateRequest]) (*connect.Response[v1.SignCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dapr.proto.sentry.v1.CA.SignCertificate is not implemented"))
}
