// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation and Dapr Contributors.
// Licensed under the MIT License.
// ------------------------------------------------------------

// Code generated by mockery v1.0.0.

package testing

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	actors "github.com/dapr/dapr/pkg/actors"
	v1 "github.com/dapr/dapr/pkg/messaging/v1"
)

// MockActors is an autogenerated mock type for the Actors type
type MockActors struct {
	mock.Mock
}

// Call provides a mock function with given fields: req
func (_m *MockActors) Call(ctx context.Context, req *v1.InvokeMethodRequest) (*v1.InvokeMethodResponse, error) {
	ret := _m.Called(req)

	var r0 *v1.InvokeMethodResponse
	if rf, ok := ret.Get(0).(func(*v1.InvokeMethodRequest) *v1.InvokeMethodResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.InvokeMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.InvokeMethodRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReminder provides a mock function with given fields: req
func (_m *MockActors) CreateReminder(ctx context.Context, req *actors.CreateReminderRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*actors.CreateReminderRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsActorHosted provides a mock function with given fields: req
func (_m *MockActors) IsActorHosted(ctx context.Context, req *actors.ActorHostedRequest) bool {
	ret := _m.Called(req)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*actors.ActorHostedRequest) bool); ok {
		r0 = rf(req)
	} else {
		r0 = true
	}

	return r0
}

// CreateTimer provides a mock function with given fields: req
func (_m *MockActors) CreateTimer(ctx context.Context, req *actors.CreateTimerRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*actors.CreateTimerRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReminder provides a mock function with given fields: req
func (_m *MockActors) DeleteReminder(ctx context.Context, req *actors.DeleteReminderRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*actors.DeleteReminderRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTimer provides a mock function with given fields: req
func (_m *MockActors) DeleteTimer(ctx context.Context, req *actors.DeleteTimerRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*actors.DeleteTimerRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetState provides a mock function with given fields: req
func (_m *MockActors) GetState(ctx context.Context, req *actors.GetStateRequest) (*actors.StateResponse, error) {
	ret := _m.Called(req)

	var r0 *actors.StateResponse
	if rf, ok := ret.Get(0).(func(*actors.GetStateRequest) *actors.StateResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actors.StateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*actors.GetStateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *MockActors) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *MockActors) Stop() {
	_m.Called()
}

// TransactionalStateOperation provides a mock function with given fields: req
func (_m *MockActors) TransactionalStateOperation(ctx context.Context, req *actors.TransactionalRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*actors.TransactionalRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReminder provides a mock function with given fields: req
func (_m *MockActors) GetReminder(ctx context.Context, req *actors.GetReminderRequest) (*actors.Reminder, error) {
	ret := _m.Called(req)

	var r0 *actors.Reminder
	if rf, ok := ret.Get(0).(func(*actors.GetReminderRequest) *actors.Reminder); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actors.Reminder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*actors.GetReminderRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveActorsCount provides a mock function
func (_m *MockActors) GetActiveActorsCount(ctx context.Context) []actors.ActiveActorsCount {
	_m.Called()
	return []actors.ActiveActorsCount{
		{
			Type:  "abcd",
			Count: 10,
		},
		{
			Type:  "xyz",
			Count: 5,
		},
	}
}
