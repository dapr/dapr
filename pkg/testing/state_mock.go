/*
Copyright 2021 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.3.0. DO NOT EDIT.

package testing

import (
	mock "github.com/stretchr/testify/mock"

	state "github.com/dapr/components-contrib/state"
)

// MockStateStore is an autogenerated mock type for the Store type
type MockStateStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: req
func (_m *MockStateStore) BulkDelete(req []state.DeleteRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func([]state.DeleteRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkSet provides a mock function with given fields: req
func (_m *MockStateStore) BulkSet(req []state.SetRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func([]state.SetRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: req
func (_m *MockStateStore) Delete(req *state.DeleteRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*state.DeleteRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: req
func (_m *MockStateStore) Get(req *state.GetRequest) (*state.GetResponse, error) {
	ret := _m.Called(req)

	var r0 *state.GetResponse
	if rf, ok := ret.Get(0).(func(*state.GetRequest) *state.GetResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*state.GetRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *MockStateStore) BulkGet(req []state.GetRequest) (bool, []state.BulkGetResponse, error) {
	return false, nil, nil
}

// Init provides a mock function with given fields: metadata
func (_m *MockStateStore) Init(metadata state.Metadata) error {
	ret := _m.Called(metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(state.Metadata) error); ok {
		r0 = rf(metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function
func (_m *MockStateStore) Ping() error {
	return nil
}

// Set provides a mock function with given fields: req
func (_m *MockStateStore) Set(req *state.SetRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*state.SetRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Features returns the features for this state store.
func (_m *MockStateStore) Features() []state.Feature {
	return nil
}

func (_m *MockStateStore) Close() error {
	return nil
}

type FailingStatestore struct {
	Failure Failure
}

func (f *FailingStatestore) BulkDelete(req []state.DeleteRequest) error {
	for _, val := range req {
		err := f.Failure.PerformFailure(val.Key)
		if err != nil {
			return err
		}
	}
	return nil
}

func (f *FailingStatestore) BulkSet(req []state.SetRequest) error {
	for _, val := range req {
		err := f.Failure.PerformFailure(val.Key)
		if err != nil {
			return err
		}
	}
	return nil
}

func (f *FailingStatestore) Delete(req *state.DeleteRequest) error {
	return f.Failure.PerformFailure(req.Key)
}

func (f *FailingStatestore) Get(req *state.GetRequest) (*state.GetResponse, error) {
	err := f.Failure.PerformFailure(req.Key)
	if err != nil {
		return nil, err
	}
	return &state.GetResponse{}, nil
}

func (f *FailingStatestore) BulkGet(req []state.GetRequest) (bool, []state.BulkGetResponse, error) {
	// This makes the code fall back to individual gets, which is basically what we'd mimic here anyway.
	return false, nil, nil
}

func (f *FailingStatestore) Init(metadata state.Metadata) error {
	return nil
}

func (f *FailingStatestore) Ping() error {
	return nil
}

func (f *FailingStatestore) Set(req *state.SetRequest) error {
	return f.Failure.PerformFailure(req.Key)
}

func (f *FailingStatestore) Close() error {
	return nil
}