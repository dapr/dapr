// Package statestore provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package statestore

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Message defines model for Message.
type Message = map[string]interface{}

// PostPublishMessageJSONRequestBody defines body for PostPublishMessage for application/json ContentType.
type PostPublishMessageJSONRequestBody = Message

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPublishMessageWithBody request with any body
	PostPublishMessageWithBody(ctx context.Context, pubsub string, topic string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublishMessage(ctx context.Context, pubsub string, topic string, body PostPublishMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPublishMessageWithBody(ctx context.Context, pubsub string, topic string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublishMessageRequestWithBody(c.Server, pubsub, topic, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublishMessage(ctx context.Context, pubsub string, topic string, body PostPublishMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublishMessageRequest(c.Server, pubsub, topic, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPublishMessageRequest calls the generic PostPublishMessage builder with application/json body
func NewPostPublishMessageRequest(server string, pubsub string, topic string, body PostPublishMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublishMessageRequestWithBody(server, pubsub, topic, "application/json", bodyReader)
}

// NewPostPublishMessageRequestWithBody generates requests for PostPublishMessage with any type of body
func NewPostPublishMessageRequestWithBody(server string, pubsub string, topic string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pubsub", runtime.ParamLocationPath, pubsub)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "topic", runtime.ParamLocationPath, topic)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/publish/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPublishMessageWithBodyWithResponse request with any body
	PostPublishMessageWithBodyWithResponse(ctx context.Context, pubsub string, topic string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublishMessageResponse, error)

	PostPublishMessageWithResponse(ctx context.Context, pubsub string, topic string, body PostPublishMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublishMessageResponse, error)
}

type PostPublishMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPublishMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublishMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPublishMessageWithBodyWithResponse request with arbitrary body returning *PostPublishMessageResponse
func (c *ClientWithResponses) PostPublishMessageWithBodyWithResponse(ctx context.Context, pubsub string, topic string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublishMessageResponse, error) {
	rsp, err := c.PostPublishMessageWithBody(ctx, pubsub, topic, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublishMessageResponse(rsp)
}

func (c *ClientWithResponses) PostPublishMessageWithResponse(ctx context.Context, pubsub string, topic string, body PostPublishMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublishMessageResponse, error) {
	rsp, err := c.PostPublishMessage(ctx, pubsub, topic, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublishMessageResponse(rsp)
}

// ParsePostPublishMessageResponse parses an HTTP response from a PostPublishMessageWithResponse call
func ParsePostPublishMessageResponse(rsp *http.Response) (*PostPublishMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublishMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RU0W7rNgz9FYHbo2e5Tfvip2VtBwRYuwDp21AMsszEKmxJE+V0QeB/v6Bst81NCtz7",
	"Jls85DnkoY6gXeedRRsJyiOQbrBT6fiIRGqHfIwHj1CCq15RRxiGIQP8P2Kwqr13OkXXSDoYH42zUMKf",
	"xtbC9VF0LqBQFR/vlQ+QQR9aKKGJ0VMpZa18yI2TMGRg7NZxKu1sVDryETtlOJxUqyp3+L02ahdMnRvH",
	"gNOaz40hYUjEBsW6rzZ9lUqKu1mgWK5XgjxqszVaMSqHDFqj0VKSaVXHMpde6QbFdV6c0C2lfHt7y1W6",
	"zV3YyQlK8q/V3cPT5uG367zIm9i1TC5i6Ojv7QbD3mi8JDmDaGLLV4nnxHm5XhFksMdAo66rvMgLzug8",
	"WuUNlLDIi3wBGXgVm9R9ub/KC+n7qjXUyKPvK+qrQR6j80YPHOEdxfM5rUeEUKIbpy2iE0rszB6tSGBI",
	"dUNq16pmiKM4wWaHMJGgOowYCMp/LhRhYe9G4xo9MczwNYuAbG7+SB0yCPhfbwLWUMbQYzY585MbKQZj",
	"dzAM2fcFn5m4MPazFaITU3vS3+6d+gUOs/Afp/AyBiPFP1x9mE2MNrVced9OhpOvxAyPn1L9GnALJfwi",
	"PxZRTlso5wanjTvV+Pgxr0kXWyQgeceW5MzXxc35xGdcja3ZI4sbMrgpFl9Hbl2oTF2jFdVBKK2RSLC6",
	"4FoawRfKPCVa1FeCeypcGN00OotRt0VxjrofSR3EVpmWqQ0ZUN91KhwumZU3SO3YcrNtXlKnCMN+tuLJ",
	"/rZOq7ZxFMvFbVFI5Y0Ent2U5QvjThv5My8eW2wTVUSK/Llcr85fPqcpn9+CgFsMaDUmTqOYf0d6764k",
	"zgfDy/AtAAD//5PaL9q0BQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
