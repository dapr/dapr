# dapr/dapr preview-kit

trigger: none

pr : none

schedules:
- cron: "00 06 * * Tue-Sat"
  displayName: M-F 11:00PM PST daily build
  branches:
    include:
    - master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DownloadBuildArtifacts@0
  displayName: 'Download Dapr CLI Binaries'
  inputs:
    buildType: 'specific'
    project: 'bf44e908-7feb-4695-9882-2ec74aa9f834'
    pipeline: '6'
    buildVersionToDownload: 'latest'
    tags: 'release'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: '$(System.ArtifactsDirectory)/release'
- task: DownloadBuildArtifacts@0
  displayName: 'Download Specs'
  inputs:
    buildType: 'specific'
    project: 'bf44e908-7feb-4695-9882-2ec74aa9f834'
    pipeline: '15'
    buildVersionToDownload: 'latestFromBranch'
    branchName: 'refs/heads/master'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: '$(System.ArtifactsDirectory)/spec_drop'
- task: DownloadBuildArtifacts@0
  displayName: 'Download dotnet-sdk'
  inputs:
    buildType: 'specific'
    project: 'bf44e908-7feb-4695-9882-2ec74aa9f834'
    pipeline: '17'
    buildVersionToDownload: 'latest'
    tags: 'release'
    downloadType: 'single'
    artifactName: 'release_drop'
    downloadPath: '$(System.ArtifactsDirectory)/dotnet-sdk'
- task: Bash@3
  displayName: 'Git clone preview repo'
  inputs:
    targetType: 'inline'
    script: |
      cd ..
      git config --global user.email "daprvt@service.microsoft.com"
      git config --global user.name "Dapr Release"

      git clone https://$(PREVIEW_GITHUB_USERNAME):$(PREVIEW_GITHUB_SECRET)@github.com/dapr/previewkit.git
    workingDirectory: '$(Build.SourcesDirectory)'
- task: Bash@3
  displayName: 'Git clone dapr/cli repo'
  inputs:
    targetType: 'inline'
    script: |
      cd ..
      git clone https://$(PREVIEW_GITHUB_USERNAME):$(PREVIEW_GITHUB_SECRET)@github.com/dapr/cli.git
- task: Bash@3
  displayName: 'Git clone dapr/dotnet-sdk repo'
  inputs:
    targetType: 'inline'
    script: |
      cd ..
      git clone https://$(PREVIEW_GITHUB_USERNAME):$(PREVIEW_GITHUB_SECRET)@github.com/dapr/dotnet-sdk.git
    workingDirectory: '$(Build.SourcesDirectory)'
- task: Bash@3
  displayName: 'Copy Preview Kit contents to preview repo'
  inputs:
    targetType: 'inline'
    script: |
      pushd ../previewkit
      rm -rf samples
      popd

      cp -Rv samples ../previewkit/

      # Remove unnecessary files
      rm -rf docs/decision_records
      rm -rf docs/assets
      cp -Rv docs/* ../previewkit/docs/

      mkdir ../previewkit/docs/cli
      cp ../cli/docs/preview/*.md ../previewkit/docs/cli/

      # Copy sdk doc to previewkit
      cp ../dotnet-sdk/docs/*.md ../previewkit/docs/sdk/dotnet-sdk/

      echo "copying specs..."
      rm -f ../previewkit/docs/spec/*
      unzip $(System.ArtifactsDirectory)/spec_drop/drop/dapr-spec-md.zip -d ../previewkit/docs/spec/
      cp $(System.ArtifactsDirectory)/spec_drop/drop/dapr-spec-pdf.zip $(System.ArtifactsDirectory)/release/drop/

      echo "removing arm binary..."
      rm -f $(System.ArtifactsDirectory)/release/drop/*_linux_arm.*

      echo "removing *.txt"
      rm -f $(System.ArtifactsDirectory)/release/drop/*.txt

      if [ -d "$(System.ArtifactsDirectory)/dotnet-sdk/release_drop" ]
      then
        echo "copying nuget pkgs..."
        cp $(System.ArtifactsDirectory)/dotnet-sdk/release_drop/*.nupkg $(System.ArtifactsDirectory)/release/drop/
      fi
    workingDirectory: '$(Build.SourcesDirectory)'
- task: Bash@3
  displayName: 'Fix url in markdown documents to preview repo url'
  inputs:
    targetType: 'inline'
    script: |
      pushd ../previewkit
      
      find . -name '*.md' -type f -exec sed -i 's/github.com\/dapr\/dapr/github.com\/dapr\/previewkit/gI' {} \;
      find . -name '*.md' -type f -exec sed -i 's/github.com\/dapr\/cli\/releases/github.com\/dapr\/previewkit\/releases/gI' {} \;
      find . -name '*.md' -type f -exec sed -i 's/github.com\/dapr\/cli\/blob\/master\/README.md/github.com\/dapr\/previewkit\/blob\/master\/docs\/cli\/README.md/gI' {} \;
      find . -name '*.md' -type f -exec sed -i 's/github.com\/dapr\/dotnet-sdk/github.com\/dapr\/previewkit\/releases/gI' {} \;
      find . -name '*.md' -type f -exec sed -i 's/github.com\/dapr\/cli/github.com\/dapr\/previewkit\/releases/gI' {} \;

      popd
    workingDirectory: '$(Build.SourcesDirectory)'
- task: Bash@3
  displayName: 'Git Push the changes to preview Repo'
  inputs:
    targetType: 'inline'
    script: |
      pushd ../previewkit
      
      cd docs/preview/release_notes/
      export LAST_RELEASE_NOTE_FILE=`ls | sort -V | tail -1`
      export LAST_VERSION=`basename $LAST_RELEASE_NOTE_FILE .md`
      echo "##vso[task.setvariable variable=RELEASE_VERSION]$LAST_VERSION"
      cd ../../../

      echo * Latest release version : $LAST_VERSION
  
      git add -A
      git commit -am "Dapr Preview Kit Update $(Build.BuildNumber)"
      git status

      git push origin master

      export LAST_COMMIT=`git rev-parse HEAD`
      echo "##vso[task.setvariable variable=RELEASE_COMMIT]$LAST_COMMIT"

      popd
    workingDirectory: '$(Build.SourcesDirectory)'
- task: GitHubRelease@0
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: 'Upload Dapr CLI to GitHub Release'  
  inputs:
    gitHubConnection: 'GitHub'
    repositoryName: 'dapr/previewkit'
    action: 'create'
    target: '$(RELEASE_COMMIT)'
    tagSource: 'manual'
    tag: '$(RELEASE_VERSION)'
    isPreRelease: true
    addChangeLog: false
    releaseNotesFile: '$(Build.SourcesDirectory)/../previewkit/docs/preview/release_notes/$(RELEASE_VERSION).md'
    title: 'Dapr Preview Kit $(RELEASE_VERSION)'
    assets: '$(System.ArtifactsDirectory)/release/drop/**'
