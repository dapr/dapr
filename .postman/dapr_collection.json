{
	"info": {
		"_postman_id": "ce93de13-a186-4a2a-b419-1231d4c20e0d",
		"name": "Dapr API",
		"description": "# Error codes returned by APIs\n\nDetailed reference of the Dapr API error codes\n\nFor http calls made to Dapr runtime, when an error is encountered, an error json is returned in http response body. The json contains an error code and an descriptive error message, e.g.\n\n```\n{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"Requested state key does not exist in state store.\"\n}\n\n ```\n\nFollowing table lists the error codes returned by Dapr runtime:\n\n| Error Code | Description |\n| --- | --- |\n| ERR_ACTOR_INSTANCE_MISSING | Error getting an actor instance. This means that actor is now hosted in some other service replica. |\n| ERR_ACTOR_RUNTIME_NOT_FOUND | Error getting the actor instance. |\n| ERR_ACTOR_REMINDER_CREATE | Error creating a reminder for an actor. |\n| ERR_ACTOR_REMINDER_DELETE | Error deleting a reminder for an actor. |\n| ERR_ACTOR_TIMER_CREATE | Error creating a timer for an actor. |\n| ERR_ACTOR_TIMER_DELETE | Error deleting a timer for an actor. |\n| ERR_ACTOR_REMINDER_GET | Error getting a reminder for an actor. |\n| ERR_ACTOR_INVOKE_METHOD | Error invoking a method on an actor. |\n| ERR_ACTOR_STATE_DELETE | Error deleting the state for an actor. |\n| ERR_ACTOR_STATE_GET | Error getting the state for an actor. |\n| ERR_ACTOR_STATE_TRANSACTION_SAVE | Error storing actor state transactionally. |\n| ERR_PUBSUB_NOT_FOUND | Error referencing the Pub/Sub component in Dapr runtime. |\n| ERR_PUBSUB_PUBLISH_MESSAGE | Error publishing a message. |\n| ERR_PUBSUB_FORBIDDEN | Error message forbidden by access controls. |\n| ERR_PUBSUB_CLOUD_EVENTS_SER | Error serializing Pub/Sub event envelope. |\n| ERR_STATE_STORE_NOT_FOUND | Error referencing a state store not found. |\n| ERR_STATE_STORES_NOT_CONFIGURED | Error no state stores configured. |\n| ERR_NOT_SUPPORTED_STATE_OPERATION | Error transaction requested on a state store with no transaction support. |\n| ERR_STATE_GET | Error getting a state for state store. |\n| ERR_STATE_DELETE | Error deleting a state from state store. |\n| ERR_STATE_SAVE | Error saving a state in state store. |\n| ERR_INVOKE_OUTPUT_BINDING | Error invoking an output binding. |\n| ERR_MALFORMED_REQUEST | Error with a malformed request. |\n| ERR_DIRECT_INVOKE | Error in direct invocation. |\n| ERR_DESERIALIZE_HTTP_BODY | Error deserializing an HTTP request body. |\n| ERR_SECRET_STORES_NOT_CONFIGURED | Error that no secret store is configured. |\n| ERR_SECRET_STORE_NOT_FOUND | Error that specified secret store is not found. |\n| ERR_HEALTH_NOT_READY | Error that Dapr is not ready. |\n| ERR_METADATA_GET | Error parsing the Metadata information. |",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Actors API",
			"item": [
				{
					"name": "Invoke actor method",
					"id": "8873b73d-6639-4206-806f-88b994efe739",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"method",
								":method"
							],
							"variable": [
								{
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"key": "method",
									"value": "{{method}}",
									"description": "The name of the method to invoke."
								}
							]
						},
						"description": "Invoke an actor method through Dapr."
					},
					"response": [
						{
							"id": "08c08d38-6037-4bc5-b11c-6d697c4d74a5",
							"name": "200 - Request succesful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "35d761a0-5641-4a9c-afac-48c7f8638900",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Invoke actor method",
					"id": "53bb4769-cdac-4d6e-9359-6ad7794c586c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"method",
								":method"
							],
							"variable": [
								{
									"id": "58a9a7b6-5558-4032-9b84-8fd0dc04fa39",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "73be04d1-6891-42f7-9444-6c53844071af",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "74d51309-da2c-434a-8e64-1c1497e8c4d9",
									"key": "method",
									"value": "{{method}}",
									"description": "The name of the method to invoke."
								}
							]
						},
						"description": "Invoke an actor method through Dapr."
					},
					"response": [
						{
							"id": "210c786c-a23f-44d4-b417-bc177a7c0d50",
							"name": "200 - Request succesful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "1b724de3-16a9-49fb-94bc-55363691413b",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Invoke actor method",
					"id": "302dfeef-3328-49e1-8778-a878103ad17c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"method",
								":method"
							],
							"variable": [
								{
									"id": "58a9a7b6-5558-4032-9b84-8fd0dc04fa39",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "73be04d1-6891-42f7-9444-6c53844071af",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "74d51309-da2c-434a-8e64-1c1497e8c4d9",
									"key": "method",
									"value": "{{method}}",
									"description": "The name of the method to invoke."
								}
							]
						},
						"description": "Invoke an actor method through Dapr."
					},
					"response": [
						{
							"id": "a8fb6c16-7473-4869-ab1f-c120d0efae28",
							"name": "200 - Request succesful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "96605eed-4503-49ae-8da4-5910bbd1eaa6",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Invoke actor method",
					"id": "0cb3acd9-0a1c-418c-98ec-547827a92855",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"method",
								":method"
							],
							"variable": [
								{
									"id": "58a9a7b6-5558-4032-9b84-8fd0dc04fa39",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "73be04d1-6891-42f7-9444-6c53844071af",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "74d51309-da2c-434a-8e64-1c1497e8c4d9",
									"key": "method",
									"value": "{{method}}",
									"description": "The name of the method to invoke."
								}
							]
						},
						"description": "Invoke an actor method through Dapr."
					},
					"response": [
						{
							"id": "c1329b2a-dfe4-40b3-b1e9-d03dd1fac79f",
							"name": "200 - Request succesful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "acceb110-bd66-4fab-9b9a-bbaa5b14807a",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/method/:method",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"method",
										":method"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "stormtrooper",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "50",
											"description": "The actor ID."
										},
										{
											"key": "method",
											"value": "shoot",
											"description": "The name of the method to invoke."
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Actor states transactions",
					"id": "194157f9-1dc1-404e-9c91-134c5cd5990a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"state"
							],
							"variable": [
								{
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								}
							]
						},
						"description": "Persists the change to the state for an actor as a multi-item transaction."
					},
					"response": [
						{
							"id": "26ee7e5d-9334-47c6-a1d6-d7a713086f5f",
							"name": "204 - Request successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "",
											"description": "The actor ID."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "51561f4f-5ee2-4124-beea-0216b68b9241",
							"name": "400 - Actor not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "",
											"description": "The actor ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "358afe50-9094-4098-8ede-2867831cd75f",
							"name": "500\t- Request failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "",
											"description": "The actor ID."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Actor states transactions",
					"id": "3994685f-dd2b-4d28-9557-d4a6aaa672bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"state"
							],
							"variable": [
								{
									"id": "6f56c03d-4101-4bc3-be36-a00dab98395b",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "5a6acf7a-4a72-4ee2-8ad4-1e5cc5863017",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								}
							]
						},
						"description": "Persists the change to the state for an actor as a multi-item transaction."
					},
					"response": [
						{
							"id": "7ba308ad-7941-4169-bdab-86544c64aedb",
							"name": "204 - Request successful",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "",
											"description": "The actor ID."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "76d46a62-8838-4225-81ee-ca6f669100ae",
							"name": "400 - Actor not found",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "",
											"description": "The actor ID."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "365ac857-8aa4-4dc7-acad-85ecb8668e0d",
							"name": "500\t- Request failed",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"operation\": \"{{operation1}}\",\n        \"request\": {\n            \"key\": \"{{key1}}\",\n            \"value\": \"{{myData}}\",\n            \"metadata\": {\n                \"ttlInSeconds\": \"3600\"\n            }\n        }\n    },\n    {\n        \"operation\": \"{{operation2}}\",\n        \"request\": {\n            \"key\": \"{{key2}}\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "",
											"description": "The actor ID."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get actor state",
					"id": "8d8dca76-70b8-4fc7-a45b-970ec4d0d62d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state/:key",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"state",
								":key"
							],
							"variable": [
								{
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"key": "key",
									"value": "{{key}}",
									"description": "The key for the state value."
								}
							]
						},
						"description": "Gets the state for an actor using a specified key."
					},
					"response": [
						{
							"id": "0930f5ea-059c-4a79-a6a8-efdc56965175",
							"name": "200 - Request successful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state/:key",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state",
										":key"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "key",
											"value": "{{key}}",
											"description": "The key for the state value."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "955b3e32-f97a-4645-88a7-abc714d20c14",
							"name": "204\t- Key not found, and the response will be empty",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state/:key",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state",
										":key"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "key",
											"value": "{{key}}",
											"description": "The key for the state value."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "4a137690-583e-4822-bb28-984498a5bba8",
							"name": "400 - Actor not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state/:key",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state",
										":key"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "key",
											"value": "{{key}}",
											"description": "The key for the state value."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "2ae7050c-b991-47dd-b996-d21ad5a045b1",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/state/:key",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"state",
										":key"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "key",
											"value": "{{key}}",
											"description": "The key for the state value."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Create actor reminder",
					"id": "e2cebe17-4831-45fc-9b79-bcda49007cd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"reminders",
								":name"
							],
							"variable": [
								{
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"key": "name",
									"value": "{{reminderName}}",
									"description": "The name of the reminder to create."
								}
							]
						},
						"description": "Creates a persistent reminder for an actor.\n\n#### Reminder request body\n\nA JSON object with the following fields:\n\n| Field | Description |\n| --- | --- |\n| `dueTime` | Specifies the time after which the reminder is invoked. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) |\n| `period` | Specifies the period between different invocations. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) or ISO 8601 duration format with optional recurrence. |"
					},
					"response": [
						{
							"id": "fc1047be-6161-4ffc-a74e-048153459a8a",
							"name": "204\t- Request successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "78cf85bc-17db-4069-bdf1-b3de0f80715a",
							"name": "400\t- Actor not found or malformed request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "1d75209e-345c-4452-9032-d8c04d2121c3",
							"name": "500\t- Request failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Create actor reminder",
					"id": "0f064992-4f4b-4b4b-a3db-e495f31a1cad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"reminders",
								":name"
							],
							"variable": [
								{
									"id": "74bb54bc-c849-4083-a75b-03b294837f90",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "904ccd85-d5a9-4da0-adc2-6c3ecfb81067",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "f175737d-b991-4618-af6c-99e2a2c45aa8",
									"key": "name",
									"value": "{{reminderName}}",
									"description": "The name of the reminder to create."
								}
							]
						},
						"description": "Creates a persistent reminder for an actor.\n\n#### Reminder request body\n\nA JSON object with the following fields:\n\n| Field | Description |\n| --- | --- |\n| `dueTime` | Specifies the time after which the reminder is invoked. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) |\n| `period` | Specifies the period between different invocations. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) or ISO 8601 duration format with optional recurrence. |"
					},
					"response": [
						{
							"id": "41542d32-6a93-4de7-813e-724f98bad543",
							"name": "204\t- Request successful",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "2a189315-97d7-43d5-ad9f-f66bc19cf802",
							"name": "400\t- Actor not found or malformed request",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "ce66237f-4f16-4da9-82ad-e26a97a66cbe",
							"name": "500\t- Request failed",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get actor reminder",
					"id": "661ca98f-d1db-48d4-9ccf-760acbecd236",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"reminders",
								":name"
							],
							"variable": [
								{
									"id": "74bb54bc-c849-4083-a75b-03b294837f90",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "904ccd85-d5a9-4da0-adc2-6c3ecfb81067",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "f175737d-b991-4618-af6c-99e2a2c45aa8",
									"key": "name",
									"value": "{{reminderName}}",
									"description": "The name of the reminder to create."
								}
							]
						},
						"description": "Gets a reminder for an actor."
					},
					"response": [
						{
							"id": "160b62bd-4079-4cae-8f63-accc1179f21d",
							"name": "200 - Request successful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"id": "74bb54bc-c849-4083-a75b-03b294837f90",
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"id": "904ccd85-d5a9-4da0-adc2-6c3ecfb81067",
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"id": "f175737d-b991-4618-af6c-99e2a2c45aa8",
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"dueTime\": \"1s\",\n  \"period\": \"5s\",\n  \"data\": \"0\"\n}"
						},
						{
							"id": "aa6c5268-389d-403d-be26-58b6635ba2a6",
							"name": "500\t- Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"id": "74bb54bc-c849-4083-a75b-03b294837f90",
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"id": "904ccd85-d5a9-4da0-adc2-6c3ecfb81067",
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"id": "f175737d-b991-4618-af6c-99e2a2c45aa8",
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Delete actor reminder",
					"id": "febec8a9-002d-4fa0-a1b2-af301dbe0dd0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"reminders",
								":name"
							],
							"variable": [
								{
									"id": "74bb54bc-c849-4083-a75b-03b294837f90",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "904ccd85-d5a9-4da0-adc2-6c3ecfb81067",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "f175737d-b991-4618-af6c-99e2a2c45aa8",
									"key": "name",
									"value": "{{reminderName}}",
									"description": "The name of the reminder to create."
								}
							]
						},
						"description": "Deletes a reminder for an actor."
					},
					"response": [
						{
							"id": "1c28f621-f3d1-4f52-8f28-b1c75c192509",
							"name": "204 - Request successful",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"id": "74bb54bc-c849-4083-a75b-03b294837f90",
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"id": "904ccd85-d5a9-4da0-adc2-6c3ecfb81067",
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"id": "f175737d-b991-4618-af6c-99e2a2c45aa8",
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "36b59258-e383-40c1-8193-fe9b4615b294",
							"name": "500\t- Request failed",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/reminders/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"reminders",
										":name"
									],
									"variable": [
										{
											"id": "74bb54bc-c849-4083-a75b-03b294837f90",
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"id": "904ccd85-d5a9-4da0-adc2-6c3ecfb81067",
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"id": "f175737d-b991-4618-af6c-99e2a2c45aa8",
											"key": "name",
											"value": "{{reminderName}}",
											"description": "The name of the reminder to create."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Create actor timer",
					"id": "dd4cb6e5-95a0-41a6-adb2-7a97edf0340f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"timers",
								":name"
							],
							"variable": [
								{
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"key": "name",
									"value": "{{timerName}}",
									"description": "The name of the timer to create."
								}
							]
						},
						"description": "Creates a persistent timer for an actor.\n\n#### Reminder request body\n\nA JSON object with the following fields:\n\n| Field | Description |\n| --- | --- |\n| `dueTime` | Specifies the time after which the reminder is invoked. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) |\n| `period` | Specifies the period between different invocations. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) or ISO 8601 duration format with optional recurrence. |"
					},
					"response": [
						{
							"id": "5004bfca-f8a2-4594-8380-71fb8066acdf",
							"name": "204\tRequest successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "704d1282-e079-44c4-84af-8783fed1028d",
							"name": "400\tActor not found or malformed request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "83c8c2b0-89ab-4e6d-9418-40c1052d7261",
							"name": "500 Request failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Create actor timer",
					"id": "04ec2ece-a239-42ec-9764-c5873dbc01a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"timers",
								":name"
							],
							"variable": [
								{
									"id": "21037f8b-6d64-4209-b59d-a811b11c9607",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "40939207-0d01-4e15-939b-4326f59a2f1c",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "687f6b9e-0f1f-4baf-972d-46441db9e021",
									"key": "name",
									"value": "{{timerName}}",
									"description": "The name of the timer to create."
								}
							]
						},
						"description": "Creates a persistent timer for an actor.\n\n#### Reminder request body\n\nA JSON object with the following fields:\n\n| Field | Description |\n| --- | --- |\n| `dueTime` | Specifies the time after which the reminder is invoked. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) |\n| `period` | Specifies the period between different invocations. Its format should be [time.ParseDuration](https://pkg.go.dev/time#ParseDuration) or ISO 8601 duration format with optional recurrence. |"
					},
					"response": [
						{
							"id": "89d6c00c-dd90-4de1-aa8f-950ec91ab67d",
							"name": "204\tRequest successful",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "0a3044fd-2299-4804-9b1b-969f0137dab8",
							"name": "400\tActor not found or malformed request",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "8c7e0aef-dc3b-4dda-926e-2881e9e88199",
							"name": "500 Request failed",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Delete actor timer",
					"id": "3a9bbc48-7bcc-46f9-be6e-9a9f10e1a60f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"actors",
								":actorType",
								":actorId",
								"timers",
								":name"
							],
							"variable": [
								{
									"id": "21037f8b-6d64-4209-b59d-a811b11c9607",
									"key": "actorType",
									"value": "{{actorType}}",
									"description": "The actor type."
								},
								{
									"id": "40939207-0d01-4e15-939b-4326f59a2f1c",
									"key": "actorId",
									"value": "{{actorId}}",
									"description": "The actor ID."
								},
								{
									"id": "687f6b9e-0f1f-4baf-972d-46441db9e021",
									"key": "name",
									"value": "{{timerName}}",
									"description": "The name of the timer to create."
								}
							]
						},
						"description": "Deletes a timer for an actor."
					},
					"response": [
						{
							"id": "609cac22-8d71-4220-9b87-e6d2a9d2eb88",
							"name": "204\tRequest successful",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "7a25b415-2096-4d7f-ab1f-47500cd69f0a",
							"name": "400\tActor not found or malformed request",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "ab638712-7885-45c3-8455-8b0fc335a720",
							"name": "500 Request failed",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": \"{{someData}}\",\n    \"dueTime\": \"1m\",\n    \"period\": \"20s\",\n    \"callback\": \"{{myEventHandler}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/actors/:actorType/:actorId/timers/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"actors",
										":actorType",
										":actorId",
										"timers",
										":name"
									],
									"variable": [
										{
											"key": "actorType",
											"value": "{{actorType}}",
											"description": "The actor type."
										},
										{
											"key": "actorId",
											"value": "{{actorId}}",
											"description": "The actor ID."
										},
										{
											"key": "name",
											"value": "{{timerName}}",
											"description": "The name of the timer to create."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "c32ffe3e-cc2c-4f3f-904d-9c54bc746ca9",
			"description": "Dapr provides native, cross-platform, and cross-language virtual actor capabilities. Besides the [language specific SDKs](https://docs.dapr.io/developing-applications/sdks/), a developer can invoke an actor using the API endpoints below."
		},
		{
			"name": "Bindings API",
			"item": [
				{
					"name": "Invoke Output Bindings",
					"id": "018b2ba0-eab1-43fc-8f19-acde54fb73fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": \"{{data}}\",\n    \"metadata\": {\n        \"{{key}}\": \"{{value}}\"\n    },\n    \"operation\": \"{{operation}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/bindings/:name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"bindings",
								":name"
							],
							"variable": [
								{
									"key": "name",
									"value": "",
									"description": "The name of the output binding to invoke"
								}
							]
						}
					},
					"response": [
						{
							"id": "b51be8f4-4992-4afd-b3fc-e0210b89a221",
							"name": "200 - Request succesful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"message\": \"Hi\"\n    },\n    \"metadata\": {\n        \"key\": \"redis-key-1\"\n    },\n    \"operation\": \"create\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/bindings/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"bindings",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "myKafka",
											"description": "The name of the output binding to invoke"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "60499236-3e0c-449f-8d41-9499f2a0ea24",
							"name": "204 - Empty body",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"message\": \"Hi\"\n    },\n    \"metadata\": {\n        \"key\": \"redis-key-1\"\n    },\n    \"operation\": \"create\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/bindings/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"bindings",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "myKafka",
											"description": "The name of the output binding to invoke"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "2a810669-6674-4ce5-973e-df1bd16f8109",
							"name": "400 - Malformed request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"message\": \"Hi\"\n    },\n    \"metadata\": {\n        \"key\": \"redis-key-1\"\n    },\n    \"operation\": \"create\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/bindings/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"bindings",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "myKafka",
											"description": "The name of the output binding to invoke"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "ff5bb72d-e33f-4dd0-bbff-b9ea0baec634",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"message\": \"Hi\"\n    },\n    \"metadata\": {\n        \"key\": \"redis-key-1\"\n    },\n    \"operation\": \"create\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/bindings/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"bindings",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "myKafka",
											"description": "The name of the output binding to invoke"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "0d469a01-4de3-4aa8-a556-c8bfdb0b41d8",
			"description": "Dapr provides bi-directional binding capabilities for applications and a consistent approach to interacting with different cloud/on-premise services or systems. Developers can invoke output bindings using the Dapr API, and have the Dapr runtime trigger an application with input bindings.\n\nExamples for bindings include `Kafka`, `Rabbit MQ`, `Azure Event Hubs`, `AWS SQS`, `GCP Storage` to name a few."
		},
		{
			"name": "Configuration API",
			"item": [
				{
					"name": "Get Configuration",
					"id": "bee38d21-f891-460e-b4c8-f37b390b229a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename?key={{config_key}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"configuration",
								":storename"
							],
							"query": [
								{
									"key": "key",
									"value": "{{config_key}}",
									"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
								}
							],
							"variable": [
								{
									"key": "storename",
									"value": "{{configStoreName}}",
									"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
								}
							]
						},
						"description": "This endpoint lets you get configuration from a store."
					},
					"response": [
						{
							"id": "32e85103-16d3-4424-9481-568c9b4a263b",
							"name": "204\tGet operation successful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename?key=myConfigKey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename"
									],
									"query": [
										{
											"key": "key",
											"value": "myConfigKey",
											"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
										}
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore",
											"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"myConfigKey\": {\n        \"value\":\"myConfigValue\"\n    }\n}"
						},
						{
							"id": "48178fcb-5fb3-4ff8-9ab8-361ddb2801ad",
							"name": "400\tConfiguration store is missing or misconfigured or malformed request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename?key=myConfigKey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename"
									],
									"query": [
										{
											"key": "key",
											"value": "myConfigKey",
											"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
										}
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore",
											"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "944e53a1-93ad-4d04-bf32-3072b52b93cf",
							"name": "500\tFailed to get configuration",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename?key=myConfigKey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename"
									],
									"query": [
										{
											"key": "key",
											"value": "myConfigKey",
											"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
										}
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore",
											"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Subscribe Configuration",
					"id": "c65e9635-806b-48fe-8f80-90c5d645a8f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/subscribe?key={{config_key}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"configuration",
								":storename",
								"subscribe"
							],
							"query": [
								{
									"key": "key",
									"value": "{{config_key}}",
									"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
								}
							],
							"variable": [
								{
									"id": "eaf26e2b-ed9e-4d9f-8706-601ed98ba27a",
									"key": "storename",
									"value": "{{configStoreName}}",
									"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
								}
							]
						},
						"description": "This endpoint lets you subscribe to configuration changes. Notifications happen when values are updated or deleted in the configuration store. This enables the application to react to configuration changes."
					},
					"response": [
						{
							"id": "b77f83b8-6791-4b09-9bf0-43c5fd2ed4e0",
							"name": "200\tSubscribe operation successful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/subscribe?key=myConfigKey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename",
										"subscribe"
									],
									"query": [
										{
											"key": "key",
											"value": "myConfigKey",
											"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
										}
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"id\": \"unique-subscription-id\"\n}"
						},
						{
							"id": "057839e8-0f7f-47cb-999b-3f3e54422ef6",
							"name": "400\tConfiguration store is missing or misconfigured or malformed request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/subscribe?key=myConfigKey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename",
										"subscribe"
									],
									"query": [
										{
											"key": "key",
											"value": "myConfigKey",
											"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
										}
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore",
											"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "6ddb2868-b81d-4ba2-83aa-73e2c98d4fd3",
							"name": "500\tFailed to subscribe to configuration changes",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/subscribe?key=myConfigKey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename",
										"subscribe"
									],
									"query": [
										{
											"key": "key",
											"value": "myConfigKey",
											"description": "To specify the keys of the configuration items to get, use one or more key query parameters."
										}
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore",
											"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Unsubscribe Configuration",
					"id": "f9734f95-e3e3-43ad-b6bf-a6a7e0587304",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/:subscription-id/unsubscribe",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"configuration",
								":storename",
								":subscription-id",
								"unsubscribe"
							],
							"variable": [
								{
									"key": "storename",
									"value": "{{configStoreName}}",
									"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
								},
								{
									"key": "subscription-id",
									"value": "{{subscriptionId}}",
									"description": "The value from the id field returned from the response of the subscribe endpoint."
								}
							]
						},
						"description": "This endpoint lets you unsubscribe to configuration changes."
					},
					"response": [
						{
							"id": "ed138087-7cf1-473b-8b66-965a7ebffb5f",
							"name": "200 Unsubscribe operation successful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/:subscription-id/unsubscribe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename",
										":subscription-id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore"
										},
										{
											"key": "subscription-id",
											"value": "abcde1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"ok\" : true\n}"
						},
						{
							"id": "09c03893-0dd2-40a9-9325-668b99212c09",
							"name": "400\tConfiguration store is missing or misconfigured or malformed request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/:subscription-id/unsubscribe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename",
										":subscription-id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore",
											"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										},
										{
											"key": "subscription-id",
											"value": "abcd1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"ok\": false,\n  \"message\": \"<dapr returned error message>\"\n}"
						},
						{
							"id": "dc26293a-b246-4c57-836c-b5f6b841572f",
							"name": "500 Failed to unsubscribe to configuration changes",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/configuration/:storename/:subscription-id/unsubscribe",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"configuration",
										":storename",
										":subscription-id",
										"unsubscribe"
									],
									"variable": [
										{
											"key": "storename",
											"value": "myStore",
											"description": "The metadata.name field component file. Refer to the [component spec](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										},
										{
											"key": "subscription-id",
											"value": "abcd1"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"ok\": false,\n  \"message\": \"<dapr returned error message>\"\n}"
						}
					]
				}
			],
			"id": "edac593a-5793-4a92-99a0-64ea1669d2dd"
		},
		{
			"name": "Distributed Lock API",
			"item": [
				{
					"name": "Lock",
					"id": "87b0be7d-49ad-4bba-a50e-d102d412e20d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceId\": \"{{resourceId}}\",\n    \"lockOwner\": \"{{lockOwner}}\",\n    \"expiryInSeconds\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/lock/:storename",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"lock",
								":storename"
							],
							"variable": [
								{
									"key": "storename",
									"value": "{{storeName}}",
									"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
								}
							]
						},
						"description": "This endpoint lets you acquire a lock by supplying a named lock owner and the resource ID to lock.\n\n| Field | Description |\n| --- | --- |\n| resourceId | The ID of the resource to lock. Can be any value |\n| lockOwner | The name of the lock owner. Should be set to a unique value per-request |\n| expiryInSeconds | The time in seconds to hold the lock before it expires |"
					},
					"response": [
						{
							"id": "dddc87d3-3f98-485f-8bb0-67b53b2fbb0f",
							"name": "200\tRequest successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\",\n    \"expiryInSeconds\": 60\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/lock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"lock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"success\": \"true\"\n}"
						},
						{
							"id": "3836e580-a3bc-435f-9b9c-f2f921f136d6",
							"name": "204\tEmpty Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\",\n    \"expiryInSeconds\": 60\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/lock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"lock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "fec2e35e-9951-454b-af5b-b9a7671de416",
							"name": "400\tMalformed request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\",\n    \"expiryInSeconds\": 60\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/lock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"lock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "7c543cc9-64c5-4c29-b319-2802aa56d698",
							"name": "500\tRequest failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\",\n    \"expiryInSeconds\": 60\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/lock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"lock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Unlock",
					"id": "42ce9586-6795-4e7a-a9cc-f0de9cbff2ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"resourceId\": \"{{resourceId}}\",\n    \"lockOwner\": \"{{lockOwner}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/unlock/:storename",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"unlock",
								":storename"
							],
							"variable": [
								{
									"id": "4c28e875-b121-4317-90db-80b03a62dce3",
									"key": "storename",
									"value": "{{storeName}}",
									"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
								}
							]
						},
						"description": "This endpoint lets you unlock an existing lock based on the lock owner and resource Id.\n\nThe `status` field contains the following response codes:\n\n| Code | Description |\n| --- | --- |\n| 0 | Success |\n| 1 | Lock doesn’t exist |\n| 2 | Lock belongs to another owner |\n| 3 | Internal error |"
					},
					"response": [
						{
							"id": "bd883c9d-e8d2-40e4-a03f-0db20f47e86e",
							"name": "200\tRequest successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/unlock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"unlock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"status\": 0\n}"
						},
						{
							"id": "7728d3db-0e7e-4d84-9d19-5aaceb0a8563",
							"name": "204\tEmpty Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/unlock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"unlock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "87d4382b-ee6f-4448-9203-c97ca1a06297",
							"name": "400\tMalformed request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/unlock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"unlock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "cd2acea7-9d20-4a07-b968-8f5a014bbfbc",
							"name": "500\tRequest failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resourceId\": \"lock1\",\n    \"lockOwner\": \"vader\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/unlock/:storename",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"unlock",
										":storename"
									],
									"variable": [
										{
											"key": "storename",
											"value": "{{storeName}}",
											"description": "The `metadata.name` field component file. Refer to the [component schema](https://docs.dapr.io/reference/resource-specs/component-schema/)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "148559fa-30cd-40a2-860d-fdd2ce11acba",
			"description": "Detailed documentation on the distributed lock API"
		},
		{
			"name": "Health API",
			"item": [
				{
					"name": "Get Dapr health state",
					"id": "c7b9f77c-de77-4c09-b87f-60c9a80676ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:{{daprPort}}/v1.0/healthz",
						"description": "Gets the health state for Dapr."
					},
					"response": [
						{
							"id": "f458b4fc-dbb4-4509-9832-53e23412032c",
							"name": "204\tdapr is healthy",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:{{daprPort}}/v1.0/healthz"
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "a001b32c-61b4-4255-8965-13be899db81d",
							"name": "500\tdapr is not healthy",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:{{daprPort}}/v1.0/healthz"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "18994e21-baab-4692-ad75-0cb08e295c47",
			"description": "Dapr provides health checking probes that can be used as readiness or liveness of Dapr."
		},
		{
			"name": "Metadata API",
			"item": [
				{
					"name": "Get the Dapr sidecar information",
					"id": "11e61968-4e93-43e6-b152-e16573c56931",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:{{daprPort}}/v1.0/metadata",
						"description": "Gets the Dapr sidecar information provided by the Metadata Endpoint.\n\n### Usecase:\n\nThe Get Metadata API can be used for discovering different capabilities supported by loaded components. It can help operators in determining which components to provision, for required capabilities.\n\n## HTTP Response Body\n\n**Metadata API Response Object**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | string | Application ID |\n| actors | [Metadata API Response Registered Actor](https://docs.dapr.io/reference/api/metadata_api/#metadataapiresponseactor)\\[\\] | A json encoded array of registered actors metadata. |\n| extended.attributeName | string | List of custom attributes as key-value pairs, where key is the attribute name. |\n| components | [Metadata API Response Component](https://docs.dapr.io/reference/api/metadata_api/#metadataapiresponsecomponent)\\[\\] | A json encoded array of loaded components metadata. |\n\n**Metadata API Response Registered Actor**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | string | The registered actor type. |\n| count | integer | Number of actors running. |\n\n**Metadata API Response Component**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| name | string | Name of the component. |\n| type | string | Component type. |\n| version | string | Component version. |\n| capabilities | array | Supported capabilities for this component type and version. |"
					},
					"response": [
						{
							"id": "74d643a8-1ffc-416a-9095-59d46b0a17a4",
							"name": "200\tMetadata information returned",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:{{daprPort}}/v1.0/metadata"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"id\": \"demo-actor\",\n    \"actors\": [\n        {\n            \"type\": \"DemoActor\",\n            \"count\": 1\n        }\n    ],\n    \"extended\": {\n        \"cliPID\": \"1031040\",\n        \"appCommand\": \"uvicorn --port 3000 demo_actor_service:app\",\n        \"daprRuntimeVersion\": \"1.10.0\"\n    },\n    \"components\": [\n        {\n            \"name\": \"pubsub\",\n            \"type\": \"pubsub.redis\",\n            \"version\": \"v1\",\n            \"capabilities\": [\n                \"\"\n            ]\n        },\n        {\n            \"name\": \"statestore\",\n            \"type\": \"state.redis\",\n            \"version\": \"v1\",\n            \"capabilities\": [\n                \"ETAG\",\n                \"TRANSACTION\",\n                \"ACTOR\",\n                \"QUERY_API\"\n            ]\n        }\n    ]\n}"
						},
						{
							"id": "a2e7433f-6a5a-47f5-8454-6a410250b4a4",
							"name": "500\tDapr could not return the metadata information",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:{{daprPort}}/v1.0/metadata"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Add a custom label to the Dapr sidecar information",
					"id": "1efef3db-00ca-45b5-bbe5-a0fa9647faff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{attributeValue}}"
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/metadata/:attributeName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"metadata",
								":attributeName"
							],
							"variable": [
								{
									"key": "attributeName",
									"value": "{{attributeName}}",
									"description": "Custom attribute name. This is they key name in the key-value pair.\n"
								}
							]
						},
						"description": "Adds a custom label to the Dapr sidecar information stored by the Metadata endpoint.\n\n### Usecase:\n\nThe metadata endpoint is, for example, used by the Dapr CLI when running dapr in self hosted mode to store the PID of the process hosting the sidecar and store the command used to run the application. Applications can also add attributes as keys after startup."
					},
					"response": [
						{
							"id": "99d622cf-7fab-4e5e-8946-a2bdebff0e0d",
							"name": "204\tCustom attribute added to the metadata information",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "attributeValue"
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/metadata/:attributeName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"metadata",
										":attributeName"
									],
									"variable": [
										{
											"key": "attributeName",
											"value": "{{attributeName}}",
											"description": "Custom attribute name. This is they key name in the key-value pair.\n"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "decf17d7-7c43-4502-ae12-811a4549391d",
			"description": "Dapr has a metadata API that returns information about the sidecar allowing runtime discoverability. The metadata endpoint returns a list of the resources (components and HttpEndpoints loaded), the activated actors (if present), and attributes with information attached."
		},
		{
			"name": "Pub/sub API",
			"item": [
				{
					"name": "Publish a message to a given topic",
					"id": "cd0f9126-0600-405f-ac4e-c3144bdb2930",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"{{message_key}}\": \"{{value}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/publish/:pubsubname/:topic?metadata.{{metadata_key}}={{metadata_value}}&metadata.ttlInSeconds={{ttlInSeconds}}&metadata.rawPayload={{rawPayload}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"publish",
								":pubsubname",
								":topic"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "Different metadata parameters are available based on each pubsub component."
								},
								{
									"key": "metadata.ttlInSeconds",
									"value": "{{ttlInSeconds}}",
									"description": "The number of seconds for the message to expire, as described [here](https://docs.dapr.io/developing-applications/building-blocks/pubsub/pubsub-message-ttl)"
								},
								{
									"key": "metadata.rawPayload",
									"value": "{{rawPayload}}",
									"description": "Boolean to determine if Dapr should publish the event without wrapping it as CloudEvent, as described [here](https://docs.dapr.io/developing-applications/building-blocks/pubsub/pubsub-raw/)"
								}
							],
							"variable": [
								{
									"key": "pubsubname",
									"value": "{{pubSubName}}",
									"description": "The name of pubsub component"
								},
								{
									"key": "topic",
									"value": "{{topic}}",
									"description": "The name of the topic"
								}
							]
						},
						"description": "This endpoint lets you publish data to multiple consumers who are listening on a `topic`. Dapr guarantees At-Least-Once semantics for this endpoint."
					},
					"response": [
						{
							"id": "ffaa870c-5a49-4d57-bef3-6b39ca4c4169",
							"name": "204 - Message delivered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/publish/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"publish",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "af3a32b5-7345-4f21-b93a-4a664239ae54",
							"name": "403 - Message forbidden by access controls",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/publish/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"publish",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "c5dcc601-af57-4965-a2d8-7b7edf7e3321",
							"name": "404 - No pubsub name or topic given",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"completed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/publish/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"publish",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub2",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_PUBSUB_NOT_FOUND\",\n    \"message\": \"pubsub starwarspubsub not found\"\n}"
						},
						{
							"id": "594aed51-d210-4c55-89f4-bd6702c9c87d",
							"name": "500 - Delivery failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"failed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/publish/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"publish",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Publish multiple messages to a given topic",
					"id": "65d700c7-3505-4687-8b39-635fe8503d3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"entryId\": \"{{id1}}\",\n        \"event\": \"{{message1}}\",\n        \"contentType\": \"text/plain\"\n    },\n    {\n        \"entryId\": \"{{id2}}\",\n        \"event\": {\n            \"message\": \"{{message2}}\"\n        },\n        \"contentType\": \"application/json\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/publish/bulk/:pubsubname/:topic",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"publish",
								"bulk",
								":pubsubname",
								":topic"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "Different metadata parameters are available based on each pubsub component.",
									"disabled": true
								},
								{
									"key": "metadata.rawPayload",
									"value": "{{rawPayload}}",
									"description": "Boolean to determine if Dapr should publish the messages without wrapping them as CloudEvent.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "metadata.maxBulkPubBytes",
									"value": "{{maxBulkPubBytes}}",
									"description": "Maximum bytes to publish in a bulk publish request.",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "pubsubname",
									"value": "{{pubSubName}}",
									"description": "The name of pubsub component"
								},
								{
									"key": "topic",
									"value": "{{topic}}",
									"description": "The name of the topic"
								}
							]
						},
						"description": "his endpoint lets you publish multiple messages to consumers who are listening on a `topic`.\n\nThe request body should contain a JSON array of entries with:\n\n- Unique entry IDs\n    \n- The event to publish\n    \n- The content type of the event\n    \n\nIf the content type for an event is not `application/cloudevents+json`, it is auto-wrapped as a CloudEvent (unless `metadata.rawPayload` is set to `true`)."
					},
					"response": [
						{
							"id": "c1323285-98e6-40d3-9add-593e14d5fdc8",
							"name": "204 - All messages delivered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n        \"event\": \"first text message\",\n        \"contentType\": \"text/plain\"\n    },\n    {\n        \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n        \"event\": {\n            \"message\": \"second JSON message\"\n        },\n        \"contentType\": \"application/json\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/publish/bulk/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"publish",
										"bulk",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "45aa4093-dd4d-4f3b-8cdd-fb3de117a74f",
							"name": "403 - Message forbidden by access controls",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n        \"event\": \"first text message\",\n        \"contentType\": \"text/plain\"\n    },\n    {\n        \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n        \"event\": {\n            \"message\": \"second JSON message\"\n        },\n        \"contentType\": \"application/json\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/publish/bulk/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"publish",
										"bulk",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "db2ddad8-d1cf-4c0f-baa2-aec716d654e0",
							"name": "404 - No pubsub name or topic given",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n        \"event\": \"first text message\",\n        \"contentType\": \"text/plain\"\n    },\n    {\n        \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n        \"event\": {\n            \"message\": \"second JSON message\"\n        },\n        \"contentType\": \"application/json\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/publish/bulk/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"publish",
										"bulk",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub2",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_PUBSUB_NOT_FOUND\",\n    \"message\": \"pubsub starwarspubsub not found\"\n}"
						},
						{
							"id": "49c648ab-ffb5-4605-af47-47133e674b79",
							"name": "500 - Delivery failed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"entryId\": \"ae6bf7c6-4af2-11ed-b878-0242ac120002\",\n        \"event\": \"first text message\",\n        \"contentType\": \"text/plain\"\n    },\n    {\n        \"entryId\": \"b1f40bd6-4af2-11ed-b878-0242ac120002\",\n        \"event\": {\n            \"message\": \"second JSON message\"\n        },\n        \"contentType\": \"application/json\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/publish/bulk/:pubsubname/:topic",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"publish",
										"bulk",
										":pubsubname",
										":topic"
									],
									"variable": [
										{
											"key": "pubsubname",
											"value": "starwarspubsub",
											"description": "The name of pubsub component"
										},
										{
											"key": "topic",
											"value": "deathStarStatus",
											"description": "The name of the topic"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "ad189698-d925-490b-b745-f471b9910ff7",
			"description": "Detailed documentation on the pub/sub API"
		},
		{
			"name": "Secrets API",
			"item": [
				{
					"name": "Get Secret",
					"id": "0aa05742-499c-4ced-99eb-bb3f056a503f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/:name?metadata.{{metadata_key}}={{metadata_value}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"secrets",
								":secret-store-name",
								":name"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "Some secret stores support optional, per-request metadata properties."
								}
							],
							"variable": [
								{
									"key": "secret-store-name",
									"value": "{{secretStoreName}}",
									"description": "The name of the secret store to get the secret from"
								},
								{
									"key": "name",
									"value": "{{secretName}}",
									"description": "The name of the secret to get"
								}
							]
						}
					},
					"response": [
						{
							"id": "148aad6a-6f09-4a8b-a358-2d481ee9948f",
							"name": "200\tOK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										":name"
									],
									"query": [
										{
											"key": "metadata.{{metadata_key}}",
											"value": "{{metadata_value}}",
											"description": "Some secret stores support optional, per-request metadata properties.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										},
										{
											"key": "name",
											"value": "db-secret",
											"description": "The name of the secret to get"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}"
						},
						{
							"id": "bcb2fd0c-0aa4-4d93-bd77-b1db1ed548b5",
							"name": "204\tSecret not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										":name"
									],
									"query": [
										{
											"key": "metadata.{{metadata_key}}",
											"value": "{{metadata_value}}",
											"description": "Some secret stores support optional, per-request metadata properties.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										},
										{
											"key": "name",
											"value": "db-secret",
											"description": "The name of the secret to get"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "53f2bdb9-6c7b-4baf-8d85-540337ac7256",
							"name": "400\tSecret store is missing or misconfigured",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										":name"
									],
									"query": [
										{
											"key": "metadata.{{metadata_key}}",
											"value": "{{metadata_value}}",
											"description": "Some secret stores support optional, per-request metadata properties.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										},
										{
											"key": "name",
											"value": "db-secret",
											"description": "The name of the secret to get"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "3ddb8c15-76e3-4b63-aa75-583b5f07a08d",
							"name": "403\tAccess denied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										":name"
									],
									"query": [
										{
											"key": "metadata.{{metadata_key}}",
											"value": "{{metadata_value}}",
											"description": "Some secret stores support optional, per-request metadata properties.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										},
										{
											"key": "name",
											"value": "db-secret",
											"description": "The name of the secret to get"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "103c93d4-4e2d-4211-b09b-528e8e06ad71",
							"name": "500\tFailed to get secret or no secret stores defined",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/:name",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										":name"
									],
									"query": [
										{
											"key": "metadata.{{metadata_key}}",
											"value": "{{metadata_value}}",
											"description": "Some secret stores support optional, per-request metadata properties.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										},
										{
											"key": "name",
											"value": "db-secret",
											"description": "The name of the secret to get"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Get Bulk Secret",
					"id": "5fd1b02f-c875-487a-8c11-21c1829968fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/bulk",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"secrets",
								":secret-store-name",
								"bulk"
							],
							"variable": [
								{
									"id": "a2123175-3ea4-4b3f-a72c-00cd909b44ad",
									"key": "secret-store-name",
									"value": "{{secretStoreName}}",
									"description": "The name of the secret store to get the secret from"
								}
							]
						}
					},
					"response": [
						{
							"id": "ef0d1d0a-7db8-48c0-8b26-cec20370b981",
							"name": "200\tOK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/bulk",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										"bulk"
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"secret1\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n    },\n    \"secret2\": {\n        \"key3\": \"value3\",\n        \"key4\": \"value4\"\n    }\n}"
						},
						{
							"id": "5d0e2295-dbfe-4c39-a7e3-920355a4b5a0",
							"name": "400\tSecret store is missing or misconfigured",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/bulk",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										"bulk"
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "4a57a297-a305-43bc-a81b-b91baedbccae",
							"name": "403\tAccess denied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/bulk",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										"bulk"
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "e2fba470-d9f2-40e6-944b-582d0678e9aa",
							"name": "500\tFailed to get secret or no secret stores defined",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/secrets/:secret-store-name/bulk",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"secrets",
										":secret-store-name",
										"bulk"
									],
									"variable": [
										{
											"key": "secret-store-name",
											"value": "kubernetes",
											"description": "The name of the secret store to get the secret from"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "a91a08bb-f1f3-4a64-b55d-accb7a46dfd6",
			"description": "Detailed documentation on the secrets API."
		},
		{
			"name": "Service Invocation API",
			"item": [
				{
					"name": "Invoke Dapr Endpoint",
					"id": "be2c9163-7148-4894-bb43-413fc47edfa7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":appId",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "appId",
									"value": "{{appID}}",
									"description": "The App ID associated with the remote app"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method in another Dapr enabled app."
					},
					"response": [
						{
							"id": "e6bc8c5d-fe33-4f2b-815f-6a1cfa04ee81",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "d9f3ddcc-70ce-49fd-b362-2f9e35457b47",
							"name": "403",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "0b8c6b95-3478-4be6-b956-9ec29ab06285",
							"name": "500",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed"
						}
					]
				},
				{
					"name": "Invoke Dapr Endpoint",
					"id": "66f22016-8ce0-49bc-9a98-54f35c28d1eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":appId",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "appId",
									"value": "{{appId}}",
									"description": "The App ID associated with the remote app"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method in another Dapr enabled app."
					},
					"response": [
						{
							"id": "8bd541bd-e851-45e5-9ef6-a019a6a43096",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "c5806a84-fae5-4740-8f59-afb6447f4065",
							"name": "403",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "7d61a724-489d-4fa4-b348-09c200de8960",
							"name": "500",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed"
						}
					]
				},
				{
					"name": "Invoke Dapr Endpoint",
					"id": "7ac7fa36-bd1d-4768-aa8b-542f0fc120b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":appId",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "appId",
									"value": "{{appId}}",
									"description": "The App ID associated with the remote app"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method in another Dapr enabled app."
					},
					"response": [
						{
							"id": "097d4c4c-186f-4cab-9597-2a6891fea373",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "f05cd54a-d146-40a9-abb1-ba82a99a6ca1",
							"name": "403",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "068b4c83-576d-4b3a-a01f-1158fcab563f",
							"name": "500",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed"
						}
					]
				},
				{
					"name": "Invoke Dapr Endpoint",
					"id": "8980fd59-f839-4952-8e23-ac18c6e97c47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":appId",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "appId",
									"value": "{{appId}}",
									"description": "The App ID associated with the remote app"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method in another Dapr enabled app."
					},
					"response": [
						{
							"id": "6b0513d7-d049-4055-9bdd-fb16437f4dea",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "f92748f5-650f-4173-af10-b5f606640bbd",
							"name": "403",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "5f9ed779-c1d9-45a2-a7b2-37c9530d8b84",
							"name": "500",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed"
						}
					]
				},
				{
					"name": "Invoke Dapr Endpoint",
					"id": "41318aa6-c63c-4a0c-9d25-99bedfdb5f53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":appId",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "appId",
									"value": "{{appId}}",
									"description": "The App ID associated with the remote app"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method in another Dapr enabled app."
					},
					"response": [
						{
							"id": "7bd2550a-9797-413c-a6d8-a620adaa2b60",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "fa163160-455b-43b1-bb56-89e07ffed1c7",
							"name": "403",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "69794334-ce23-48db-aa44-da54e64dcd4a",
							"name": "500",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (HTTPEndpoint name)",
					"id": "59c19599-ba6a-4219-a790-d61a73cd2dd0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:HTTPEndpoint name/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":HTTPEndpoint name",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "HTTPEndpoint name",
									"value": "{{httpEndpointName}}",
									"description": "The HTTPEndpoint resource associated with the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using an `HTTPEndpoint` resource name."
					},
					"response": [
						{
							"id": "80b09a84-ed0b-41e6-9fe0-e2208fb68938",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "c9e48957-a33c-40d4-a03d-26c2c4de698c",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "7aca748f-0577-4ebf-81c6-a07048d6ad84",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (HTTPEndpoint name)",
					"id": "177b36c4-0a0e-4edc-a465-9a2996095691",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:HTTPEndpoint name/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":HTTPEndpoint name",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "HTTPEndpoint name",
									"value": "{{httpEndpointName}}",
									"description": "The HTTPEndpoint resource associated with the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using an `HTTPEndpoint` resource name."
					},
					"response": [
						{
							"id": "95e9782c-2090-4b0d-b6a0-7499a74d8acb",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "40fab669-ea67-4ceb-8122-d4de66d80713",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "06105950-e82a-4c75-affa-968e9cc93574",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (HTTPEndpoint name)",
					"id": "d4903b14-96bd-4eb1-948b-88664fde6c19",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:HTTPEndpoint name/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":HTTPEndpoint name",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "HTTPEndpoint name",
									"value": "{{httpEndpointName}}",
									"description": "The HTTPEndpoint resource associated with the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using an `HTTPEndpoint` resource name."
					},
					"response": [
						{
							"id": "9b35860f-9177-4749-b294-794c0e4b6bff",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "fdd600af-9cca-4565-8c7c-9a6110753f9e",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "9ed2cddf-8c7d-4901-b3a3-56ead455dee8",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (HTTPEndpoint name)",
					"id": "7b32c1a4-fbe8-4b52-9532-2cf3e2c67535",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:HTTPEndpoint name/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":HTTPEndpoint name",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "HTTPEndpoint name",
									"value": "{{httpEndpointName}}",
									"description": "The HTTPEndpoint resource associated with the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using an `HTTPEndpoint` resource name."
					},
					"response": [
						{
							"id": "b0fc2488-512e-411a-87fa-9e495884ef7c",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "9fe9f4a1-8f17-46e4-9590-835822503265",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "d3d13a7b-4298-45a6-b25c-769875f9cd18",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (HTTPEndpoint name)",
					"id": "f41a40d8-47a6-4d8b-bd67-44f86f7224f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:HTTPEndpoint name/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":HTTPEndpoint name",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "HTTPEndpoint name",
									"value": "{{httpEndpointName}}",
									"description": "The HTTPEndpoint resource associated with the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using an `HTTPEndpoint` resource name."
					},
					"response": [
						{
							"id": "6ab1f707-3861-48c0-bfe6-d8d01ad7d355",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "3d5d198e-d763-4160-952e-84109867304f",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "5f71ab45-8302-4147-baa9-f0ad4f46757b",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (FQDN URL)",
					"id": "1472d27c-6171-48dd-80c0-7d8cc8427e4d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:FQDN URL/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":FQDN URL",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "FQDN URL",
									"value": "{{fqdnUrl}}",
									"description": "Fully Qualified Domain Name URL to invoke on the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using a Fully Qualified Domain Name (FQDN) URL."
					},
					"response": [
						{
							"id": "1c13f512-da5d-4b17-9915-1a4626c76d27",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "e0404e19-55b6-4183-b4f1-587f530b8deb",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "fd111d4e-d7e9-440d-ba61-f58f05357fae",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (FQDN URL)",
					"id": "7786983c-d37b-4fe5-96a3-1162183df0e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:FQDN URL/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":FQDN URL",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "FQDN URL",
									"value": "{{fqdnUrl}}",
									"description": "Fully Qualified Domain Name URL to invoke on the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using a Fully Qualified Domain Name (FQDN) URL."
					},
					"response": [
						{
							"id": "1a096acb-5154-45c0-a8e8-2ca079dae0a4",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "d0cade3d-2dea-4508-bba2-108b94ad41e4",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "f5b7f1d4-e5f8-4c9c-9d56-9234b21d7bae",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (FQDN URL)",
					"id": "693bf04d-8cca-47cc-90cc-d243a862db2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:FQDN URL/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":FQDN URL",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "FQDN URL",
									"value": "{{fqdnUrl}}",
									"description": "Fully Qualified Domain Name URL to invoke on the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using a Fully Qualified Domain Name (FQDN) URL."
					},
					"response": [
						{
							"id": "a68b5f7a-1f4e-4d77-9218-17dde3b9edbf",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "9a654f61-99e0-4acf-bee1-d978ba5156cd",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "ca1e3178-6d3e-46c2-9541-f96564660c61",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (FQDN URL)",
					"id": "6990eec8-27c0-4ab7-b809-ea6824da7d7b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:FQDN URL/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":FQDN URL",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "FQDN URL",
									"value": "{{fqdnUrl}}",
									"description": "Fully Qualified Domain Name URL to invoke on the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using a Fully Qualified Domain Name (FQDN) URL."
					},
					"response": [
						{
							"id": "c6764481-0b4b-4ce2-9f29-9981e00d36df",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "b618b4ae-e2a9-444f-a15d-e92d67af2a88",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "3b306ed5-eec1-4ec5-9fe0-eeca022303b9",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				},
				{
					"name": "Invoke Non-Dapr Endpoint (FQDN URL)",
					"id": "0d61a11b-6af6-4163-a700-0817860adc8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:FQDN URL/method/:methodName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"invoke",
								":FQDN URL",
								"method",
								":methodName"
							],
							"variable": [
								{
									"key": "FQDN URL",
									"value": "{{fqdnUrl}}",
									"description": "Fully Qualified Domain Name URL to invoke on the external endpoint"
								},
								{
									"key": "methodName",
									"value": "{{methodName}}",
									"description": "The name of the method or url to invoke on the remote app"
								}
							]
						},
						"description": "This endpoint lets you invoke a method on a non-Dapr endpoint using a Fully Qualified Domain Name (FQDN) URL."
					},
					"response": [
						{
							"id": "884947ed-d05a-4f2a-9850-332f72eb5afd",
							"name": "400 - Method name not given",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Method name not given"
						},
						{
							"id": "d2a9ee4d-6d4a-4eed-8845-71fbfbc9c241",
							"name": "403 - Invocation forbidden by access control",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Invocation forbidden by access control"
						},
						{
							"id": "cc5c3cf1-f2b9-4297-9754-c10110ca9218",
							"name": "500 - Request failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/invoke/:appId/method/:methodName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"invoke",
										":appId",
										"method",
										":methodName"
									],
									"variable": [
										{
											"key": "appId",
											"value": "",
											"description": "the App ID associated with the remote app"
										},
										{
											"key": "methodName",
											"value": "",
											"description": "the name of the method or url to invoke on the remote app"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "Request failed\n"
						}
					]
				}
			],
			"id": "cdbd593f-4af5-44ba-8592-f0a87476fa57",
			"description": "Dapr provides users with the ability to call other applications that are using Dapr with a unique named identifier (appId), or HTTP endpoints that are not using Dapr. This allows applications to interact with one another via named identifiers and puts the burden of service discovery on the Dapr runtime."
		},
		{
			"name": "State Management API",
			"item": [
				{
					"name": "Save state",
					"id": "187d37bc-4844-4173-b71d-7d97eeb787d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"key\": \"{{key}}\",\n        \"value\": \"{{deathStar}}\",\n        \"etag\": \"{{etag}}\",\n        \"metadata\": \"{{metadata}}\",\n        \"options\": \"{{options}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName?metadata.{{metadata_key}}={{metadata_value}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"state",
								":storeName"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "Optional request metadata"
								}
							],
							"variable": [
								{
									"key": "storeName",
									"value": "{{storeName}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								}
							]
						},
						"description": "This endpoint lets you save an array of state objects\n\n| `key` | State key |\n| `value` | State value, which can be any byte array |\n| `etag` | (optional) State ETag |\n| `metadata` | (optional) Additional key-value pairs to be passed to the state store |\n| `options` | (optional) State operation options; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors) |"
					},
					"response": [
						{
							"id": "583e5adb-ec1d-4717-a63f-a68841832b02",
							"name": "204 - State saved",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"key\": \"weapon\",\n        \"value\": \"DeathStar\",\n        \"etag\": \"1234\"\n    },\n    {\n        \"key\": \"planet\",\n        \"value\": {\n            \"name\": \"Tatooine\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName"
									],
									"query": [
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "Optional request metadata"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "f5039b6f-7df8-48a6-98cb-675fd6bfc2f7",
							"name": "400 - State store is missing or misconfigured or malformed request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "'[\n        {\n          \"key\": \"weapon\",\n          \"value\": \"DeathStar\",\n          \"etag\": \"1234\"\n        },\n        {\n          \"key\": \"planet\",\n          \"value\": {\n            \"name\": \"Tatooine\"\n          }\n        }\n      ]'",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName"
									],
									"query": [
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "Optional request metadata"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "4ccb1b8e-06d4-47a4-bfd3-e04b6a157f01",
							"name": "204 - Failed to save state",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"key\": \"weapon\",\n        \"value\": \"DeathStar\",\n        \"etag\": \"1234\"\n    },\n    {\n        \"key\": \"planet\",\n        \"value\": {\n            \"name\": \"Tatooine\"\n        }\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName"
									],
									"query": [
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "Optional request metadata"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get state",
					"id": "1cda2f6d-9f68-43e2-ac34-5821eab08e46",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"state",
								":storeName",
								":key"
							],
							"query": [
								{
									"key": "consistency",
									"value": "{{consistency}}",
									"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "(optional) Metadata as query parameters to the state store",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								},
								{
									"key": "key",
									"value": "{{key}}",
									"description": "The key of the desired state"
								}
							]
						},
						"description": "This endpoint lets you get the state for a specific key."
					},
					"response": [
						{
							"id": "54114b87-b515-4951-8587-3b73830657d4",
							"name": "200 - Get state succesful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										":key"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										},
										{
											"key": "key",
											"value": "planet",
											"description": "The key of the desired state"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Etag",
									"value": "1"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"name\": \"Tatooine\"\n}"
						},
						{
							"id": "7bd257ec-bbb3-4f42-891f-6fa66adc237d",
							"name": "204 - Key is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										":key"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										},
										{
											"key": "key",
											"value": "planet2",
											"description": "The key of the desired state"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "1c35dd46-30c9-4595-88eb-325037a4f50d",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										":key"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										},
										{
											"key": "key",
											"value": "planet2",
											"description": "The key of the desired state"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "2d329f65-b5ed-4ff5-be74-1e498a092350",
							"name": "500\t- Get state failed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										":key"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										},
										{
											"key": "key",
											"value": "planet",
											"description": "The key of the desired state"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				},
				{
					"name": "Get bulk state",
					"id": "270ba93e-f17d-4fe8-a82a-8563e37703e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"keys\": [\n        \"{{key1}}\",\n        \"{{key2}}\"\n    ],\n    \"parallelism\": {{parallelismNo}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"state",
								":storeName",
								"bulk"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "(optional) Metadata as query parameters to the state store",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "b0347c26-87af-4321-a928-74479bc5cfe1",
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								}
							]
						},
						"description": "This endpoint lets you get a list of values for a given list of keys."
					},
					"response": [
						{
							"id": "7faf0fc4-b1f6-43d1-84b6-317c5899af84",
							"name": "200 - Get state succesful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"bulk"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"key\": \"weapon\",\n        \"data\": \"DeathStar\",\n        \"etag\": \"1\"\n    },\n    {\n        \"key\": \"planet\",\n        \"data\": {\n            \"name\": \"Tatooine\"\n        },\n        \"etag\": \"1\"\n    }\n]"
						},
						{
							"id": "84406fd6-690d-48b3-88a7-8203d4f11f29",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"bulk"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "aa8476c0-4a12-4d8e-adaa-131314b588f9",
							"name": "500\t- Get state failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"bulk"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				},
				{
					"name": "Get bulk state",
					"id": "ede811de-4d7d-4572-a117-67dd0866549d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n          \"keys\": [ \"{{key1}}\", \"{{key2}}\" ],\n          \"parallelism\": {{parallelismNo}}\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"state",
								":storeName",
								"bulk"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "(optional) Metadata as query parameters to the state store",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "b0347c26-87af-4321-a928-74479bc5cfe1",
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								}
							]
						},
						"description": "This endpoint lets you get a list of values for a given list of keys."
					},
					"response": [
						{
							"id": "9ed5a1aa-b6fc-46e1-861e-ffd5e932d42d",
							"name": "200 - Get state succesful",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"bulk"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"key\": \"weapon\",\n        \"data\": \"DeathStar\",\n        \"etag\": \"1\"\n    },\n    {\n        \"key\": \"planet\",\n        \"data\": {\n            \"name\": \"Tatooine\"\n        },\n        \"etag\": \"1\"\n    }\n]"
						},
						{
							"id": "d6f8c788-bde9-4e5d-87fc-45a07ced0fc7",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"bulk"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "5bca8828-510c-4e22-948b-ec9bbcf334f1",
							"name": "500\t- Get state failed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/bulk?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"bulk"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				},
				{
					"name": "Delete state",
					"id": "4de146b4-548f-4795-b064-33c1f0cd33ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "{{if_match_delete}}",
								"description": "(Optional) ETag associated with the key to be deleted",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"state",
								":storeName",
								":key"
							],
							"query": [
								{
									"key": "consistency",
									"value": "{{consistency}}",
									"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "(optional) Metadata as query parameters to the state store",
									"type": "text",
									"disabled": true
								},
								{
									"key": "concurrency",
									"value": "{{concurrency}}",
									"description": "(optional) Either first-write or last-write; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "bd961e37-1f71-4306-9719-03ecf8bbc2d3",
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								},
								{
									"id": "2d577d64-05ab-42d8-beaf-0ba1c4a278e1",
									"key": "key",
									"value": "{{key}}",
									"description": "The key of the desired state"
								}
							]
						},
						"description": "This endpoint lets you delete the state for a specific key."
					},
					"response": [
						{
							"id": "0caeeecf-ffe4-4b49-8715-be8c07271ac8",
							"name": "204 - Delete Succesfull",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										":key"
									],
									"query": [
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										},
										{
											"key": "key",
											"value": "planet",
											"description": "The key of the desired state"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Etag",
									"value": "1"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"name\": \"Tatooine\"\n}"
						},
						{
							"id": "a5c916b9-370e-4b35-acf8-d854ceeeca07",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										":key"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										},
										{
											"key": "key",
											"value": "planet2",
											"description": "The key of the desired state"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "8fa4eba1-4641-486a-b5e1-a2f5fcb7003f",
							"name": "500\t- Delete state failed",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/:key?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										":key"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										},
										{
											"key": "key",
											"value": "planet",
											"description": "The key of the desired state"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				},
				{
					"name": "Query state (ALPHA)",
					"id": "ad480f19-1579-468e-ba1b-4252777d271f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filter\": {\n        \"OR\": [\n            {\n                \"EQ\": {\n                    \"{{or_key}}\": \"{{or_value}}\"\n                }\n            },\n            {\n                \"AND\": [\n                    {\n                        \"EQ\": {\n                            \"{{and_key}}\": \"{{and_value}}\"\n                        }\n                    },\n                    {\n                        \"IN\": {\n                            \"state\": [\n                                \"{{in_1}}\",\n                                \"{{in_2}}\"\n                            ]\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    \"sort\": [\n        {\n            \"key\": \"{{sort_key}}\",\n            \"order\": \"DESC\"\n        },\n        {\n            \"key\": \"{{sort_key_2}}\"\n        }\n    ],\n    \"page\": {\n        \"limit\": 3\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/state/:storeName/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"state",
								":storeName",
								"query"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "(optional) Metadata as query parameters to the state store",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "b0347c26-87af-4321-a928-74479bc5cfe1",
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								}
							]
						},
						"description": "This endpoint lets you query the key/value state.\n\n#### alpha\n\nThis API is in alpha stage."
					},
					"response": [
						{
							"id": "184aa9c1-10cf-4810-8f01-de835aee3393",
							"name": "200 - Get state succesful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"filter\": {\n          \"OR\": [\n            {\n              \"EQ\": { \"person.org\": \"Dev Ops\" }\n            },\n            {\n              \"AND\": [\n                {\n                  \"EQ\": { \"person.org\": \"Finance\" }\n                },\n                {\n                  \"IN\": { \"state\": [ \"CA\", \"WA\" ] }\n                }\n              ]\n            }\n          ]\n        },\n        \"sort\": [\n          {\n            \"key\": \"state\",\n            \"order\": \"DESC\"\n          },\n          {\n            \"key\": \"person.id\"\n          }\n        ],\n        \"page\": {\n          \"limit\": 3\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/query?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"query"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"results\": [\n    {\n      \"key\": \"1\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1036\n        },\n        \"city\": \"Seattle\",\n        \"state\": \"WA\"\n      },\n      \"etag\": \"6f54ad94-dfb9-46f0-a371-e42d550adb7d\"\n    },\n    {\n      \"key\": \"4\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1042\n        },\n        \"city\": \"Spokane\",\n        \"state\": \"WA\"\n      },\n      \"etag\": \"7415707b-82ce-44d0-bf15-6dc6305af3b1\"\n    },\n    {\n      \"key\": \"10\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1054\n        },\n        \"city\": \"New York\",\n        \"state\": \"NY\"\n      },\n      \"etag\": \"26bbba88-9461-48d1-8a35-db07c374e5aa\"\n    }\n  ],\n  \"token\": \"3\"\n}"
						},
						{
							"id": "1501969f-24e0-4d18-8861-119d961661aa",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/query?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"query"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "ffe689b4-4d70-4f5a-9046-ec902ed91c1a",
							"name": "500\t- State query failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/query?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"query"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				},
				{
					"name": "Query state (ALPHA)",
					"id": "129b1087-cafe-4a15-b1bd-1cdc05c131dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filter\": {\n        \"OR\": [\n            {\n                \"EQ\": {\n                    \"{{or_key}}\": \"{{or_value}}\"\n                }\n            },\n            {\n                \"AND\": [\n                    {\n                        \"EQ\": {\n                            \"{{and_key}}\": \"{{and_value}}\"\n                        }\n                    },\n                    {\n                        \"IN\": {\n                            \"state\": [\n                                \"{{in_1}}\",\n                                \"{{in_2}}\"\n                            ]\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    \"sort\": [\n        {\n            \"key\": \"{{sort_key}}\",\n            \"order\": \"DESC\"\n        },\n        {\n            \"key\": \"{{sort_key_2}}\"\n        }\n    ],\n    \"page\": {\n        \"limit\": 3\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/state/:storeName/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"state",
								":storeName",
								"query"
							],
							"query": [
								{
									"key": "metadata.{{metadata_key}}",
									"value": "{{metadata_value}}",
									"description": "(optional) Metadata as query parameters to the state store",
									"type": "text",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "b0347c26-87af-4321-a928-74479bc5cfe1",
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								}
							]
						},
						"description": "This endpoint lets you query the key/value state.\n\n#### alpha\n\nThis API is in alpha stage."
					},
					"response": [
						{
							"id": "d5f3420c-8058-4be4-bbb7-17402620eb96",
							"name": "200 - Get state succesful",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"filter\": {\n          \"OR\": [\n            {\n              \"EQ\": { \"person.org\": \"Dev Ops\" }\n            },\n            {\n              \"AND\": [\n                {\n                  \"EQ\": { \"person.org\": \"Finance\" }\n                },\n                {\n                  \"IN\": { \"state\": [ \"CA\", \"WA\" ] }\n                }\n              ]\n            }\n          ]\n        },\n        \"sort\": [\n          {\n            \"key\": \"state\",\n            \"order\": \"DESC\"\n          },\n          {\n            \"key\": \"person.id\"\n          }\n        ],\n        \"page\": {\n          \"limit\": 3\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/query?metadata.contentType=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"query"
									],
									"query": [
										{
											"key": "consistency",
											"value": "{{consistency}}",
											"description": "(optional) Read consistency mode; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "metadata.contentType",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"results\": [\n    {\n      \"key\": \"1\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1036\n        },\n        \"city\": \"Seattle\",\n        \"state\": \"WA\"\n      },\n      \"etag\": \"6f54ad94-dfb9-46f0-a371-e42d550adb7d\"\n    },\n    {\n      \"key\": \"4\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1042\n        },\n        \"city\": \"Spokane\",\n        \"state\": \"WA\"\n      },\n      \"etag\": \"7415707b-82ce-44d0-bf15-6dc6305af3b1\"\n    },\n    {\n      \"key\": \"10\",\n      \"data\": {\n        \"person\": {\n          \"org\": \"Dev Ops\",\n          \"id\": 1054\n        },\n        \"city\": \"New York\",\n        \"state\": \"NY\"\n      },\n      \"etag\": \"26bbba88-9461-48d1-8a35-db07c374e5aa\"\n    }\n  ],\n  \"token\": \"3\"\n}"
						},
						{
							"id": "1e44b93b-c724-43b1-9b0c-5bc1ddbc38b0",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/query?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"query"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "2518361d-6cc5-4076-ae14-cf466702976a",
							"name": "500\t- State query failed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n          \"keys\": [ \"weapon\", \"planet\" ],\n          \"parallelism\": 10\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/query?metadata.content_type=application/json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"query"
									],
									"query": [
										{
											"key": "metadata.content_type",
											"value": "application/json",
											"description": "(optional) Metadata as query parameters to the state store"
										}
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				},
				{
					"name": "State transactions",
					"id": "f4715907-e49c-4a2b-a86f-bae848449e54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operations\": [\n        {\n            \"operation\": \"{{operation1}}\",\n            \"request\": {\n                \"key\": \"{{key1}}\",\n                \"value\": \"{{myData}}\"\n            }\n        },\n        {\n            \"operation\": \"{{operation_2}}\",\n            \"request\": {\n                \"key\": \"{{key2}}\"\n            }\n        }\n    ],\n    \"metadata\": {\n        \"partitionKey\": \"{{key}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"state",
								":storeName",
								"transaction"
							],
							"variable": [
								{
									"id": "b0347c26-87af-4321-a928-74479bc5cfe1",
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								}
							]
						},
						"description": "Persists the changes to the state store as a [transactional operation](https://docs.dapr.io/developing-applications/building-blocks/state-management/state-management-overview/#transactional-operations).\n\n> &lt;p &gt;This API depends on a state store component that supports transactions.&lt;/p&gt; \n  \n\nRefer to the [state store component spec](https://docs.dapr.io/reference/components-reference/supported-state-stores/) for a full, current list of state stores that support transactions.\n\n| Field | Description |\n| --- | --- |\n| `operations` | A JSON array of state `operation` |\n| `metadata` | (optional) The `metadata` for the transaction that applies to all operations |\n\nAll transactional databases implement the following required operations:\n\n| Operation | Description |\n| --- | --- |\n| `upsert` | Adds or updates the value |\n| `delete` | Deletes the value |\n\nEach operation has an associated `request` that is comprised of the following fields:\n\n| Request | Description |\n| --- | --- |\n| `key` | State key |\n| `value` | State value, which can be any byte array |\n| `etag` | (optional) State ETag |\n| `metadata` | (optional) Additional key-value pairs to be passed to the state store that apply for this operation |\n| `options` | (optional) State operation options; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors) |"
					},
					"response": [
						{
							"id": "963105d9-990c-4bfa-b4e2-3bcbeff30626",
							"name": "204 - Get state succesful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"myData\"\n            }\n          },\n          {\n            \"operation\": \"delete\",\n            \"request\": {\n              \"key\": \"key2\"\n            }\n          }\n        ],\n        \"metadata\": {\n          \"partitionKey\": \"planet\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"transaction"
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "0414ab36-7fd3-4275-b676-be4745da8f68",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"myData\"\n            }\n          },\n          {\n            \"operation\": \"delete\",\n            \"request\": {\n              \"key\": \"key2\"\n            }\n          }\n        ],\n        \"metadata\": {\n          \"partitionKey\": \"planet\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"transaction"
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "cacd18ca-edd7-47e7-a781-488f07e5989a",
							"name": "500\t- Get state failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"myData\"\n            }\n          },\n          {\n            \"operation\": \"delete\",\n            \"request\": {\n              \"key\": \"key2\"\n            }\n          }\n        ],\n        \"metadata\": {\n          \"partitionKey\": \"planet\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"transaction"
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				},
				{
					"name": "State transactions",
					"id": "1822a665-15fc-47e7-97b5-08382915fac3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"operations\": [\n        {\n            \"operation\": \"{{operation1}}\",\n            \"request\": {\n                \"key\": \"{{key1}}\",\n                \"value\": \"{{myData}}\"\n            }\n        },\n        {\n            \"operation\": \"{{operation_2}}\",\n            \"request\": {\n                \"key\": \"{{key2}}\"\n            }\n        }\n    ],\n    \"metadata\": {\n        \"partitionKey\": \"{{key}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0",
								"state",
								":storeName",
								"transaction"
							],
							"variable": [
								{
									"id": "b0347c26-87af-4321-a928-74479bc5cfe1",
									"key": "storeName",
									"value": "{{storename}}",
									"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
								}
							]
						},
						"description": "Persists the changes to the state store as a [transactional operation](https://docs.dapr.io/developing-applications/building-blocks/state-management/state-management-overview/#transactional-operations).\n\n> &lt;p &gt;This API depends on a state store component that supports transactions.&lt;/p&gt; \n  \n\nRefer to the [state store component spec](https://docs.dapr.io/reference/components-reference/supported-state-stores/) for a full, current list of state stores that support transactions.\n\n| Field | Description |\n| --- | --- |\n| `operations` | A JSON array of state `operation` |\n| `metadata` | (optional) The `metadata` for the transaction that applies to all operations |\n\nAll transactional databases implement the following required operations:\n\n| Operation | Description |\n| --- | --- |\n| `upsert` | Adds or updates the value |\n| `delete` | Deletes the value |\n\nEach operation has an associated `request` that is comprised of the following fields:\n\n| Request | Description |\n| --- | --- |\n| `key` | State key |\n| `value` | State value, which can be any byte array |\n| `etag` | (optional) State ETag |\n| `metadata` | (optional) Additional key-value pairs to be passed to the state store that apply for this operation |\n| `options` | (optional) State operation options; see [state operation options](https://docs.dapr.io/reference/api/state_api/#optional-behaviors) |"
					},
					"response": [
						{
							"id": "770930b7-3703-4933-b424-a9af273270c4",
							"name": "204 - Get state succesful",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"myData\"\n            }\n          },\n          {\n            \"operation\": \"delete\",\n            \"request\": {\n              \"key\": \"key2\"\n            }\n          }\n        ],\n        \"metadata\": {\n          \"partitionKey\": \"planet\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"transaction"
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "074f918b-dd3a-4486-866f-348f7dca7834",
							"name": "400\t- State store is missing or misconfigured",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"myData\"\n            }\n          },\n          {\n            \"operation\": \"delete\",\n            \"request\": {\n              \"key\": \"key2\"\n            }\n          }\n        ],\n        \"metadata\": {\n          \"partitionKey\": \"planet\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"transaction"
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars2",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_STORE_NOT_FOUND\",\n    \"message\": \"state store starwars2 is not found\"\n}"
						},
						{
							"id": "30f7a636-ddd3-47a1-9135-58491a3f2fb4",
							"name": "500\t- Get state failed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"operations\": [\n          {\n            \"operation\": \"upsert\",\n            \"request\": {\n              \"key\": \"key1\",\n              \"value\": \"myData\"\n            }\n          },\n          {\n            \"operation\": \"delete\",\n            \"request\": {\n              \"key\": \"key2\"\n            }\n          }\n        ],\n        \"metadata\": {\n          \"partitionKey\": \"planet\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0/state/:storeName/transaction",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0",
										"state",
										":storeName",
										"transaction"
									],
									"variable": [
										{
											"key": "storeName",
											"value": "starwars",
											"description": "The `metadata.name` field in the user-configured `statestore.yaml` component file. Refer\nto the [Dapr state store configuration structure](https://docs.dapr.io/reference/api/state_api/#component-file)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"ERR_STATE_GET\",\n    \"message\": \"fail to get planet from state store starwars: dial tcp [::1]:6379: connect: connection refused\"\n}"
						}
					]
				}
			],
			"id": "e395b379-d895-4f30-a32a-5488c478209b",
			"description": "## Component file\n\nA Dapr `statestore.yaml` component file has the following structure:\n\n```\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: <NAME>\n  namespace: <NAMESPACE>\nspec:\n  type: state.<TYPE>\n  version: v1\n  metadata:\n  - name:<KEY>\n    value:<VALUE>\n  - name: <KEY>\n    value: <VALUE>\n\n ```\n\n| Setting | Description |\n| --- | --- |\n| `metadata.name` | The name of the state store. |\n| `spec/metadata` | An open key value pair metadata that allows a binding to define connection properties. |\n\n## Key scheme\n\nDapr state stores are key/value stores. To ensure data compatibility, Dapr requires these data stores follow a fixed key scheme. For general states, the key format is:\n\n```\n<App ID>||<state key>\n\n ```\n\nFor Actor states, the key format is:\n\n```\n<App ID>||<Actor type>||<Actor id>||<state key>\n\n ```"
		},
		{
			"name": "Workflow API",
			"item": [
				{
					"name": "Start workflow request",
					"id": "ba25cd74-2a49-49f6-8679-2c8cf6ebd88a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"{{key}}\": \"{{value}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:workflowName/start?instanceID={{instanceID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"workflows",
								":workflowComponentName",
								":workflowName",
								"start"
							],
							"query": [
								{
									"key": "instanceID",
									"value": "{{instanceID}}",
									"description": "(Optional) Unique value created for each run of a specific workflow"
								}
							],
							"variable": [
								{
									"key": "workflowComponentName",
									"value": "{{workflowComponent}}",
									"description": "Use dapr for Dapr Workflows"
								},
								{
									"key": "workflowName",
									"value": "{{workflow}}",
									"description": "Identify the workflow type"
								}
							]
						},
						"description": "Start a workflow instance with the given name and optionally, an instance ID.\n\nNote that workflow instance IDs can only contain alphanumeric characters, underscores, and dashes."
					},
					"response": [
						{
							"id": "e75dcb74-973a-420c-a223-d0984b260344",
							"name": "202\tAccepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"{{key}}\": \"{{value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:workflowName/start?instanceID={{instanceID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":workflowName",
										"start"
									],
									"query": [
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "(Optional) Unique value created for each run of a specific workflow"
										}
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "workflowName",
											"value": "{{workflow}}",
											"description": "Identify the workflow type"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"instanceID\": \"12345678\"\n}"
						},
						{
							"id": "a8b95163-7989-4c0a-b0eb-2334769a97b3",
							"name": "400\tRequest was malformed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"{{key}}\": \"{{value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:workflowName/start?instanceID={{instanceID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":workflowName",
										"start"
									],
									"query": [
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "(Optional) Unique value created for each run of a specific workflow"
										}
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "workflowName",
											"value": "{{workflow}}",
											"description": "Identify the workflow type"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "d5757216-5300-4efe-8ad6-c59d6d5e465f",
							"name": "500\tRequest formatted correctly, error in dapr code or underlying component",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"{{key}}\": \"{{value}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:workflowName/start?instanceID={{instanceID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":workflowName",
										"start"
									],
									"query": [
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "(Optional) Unique value created for each run of a specific workflow"
										}
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "workflowName",
											"value": "{{workflow}}",
											"description": "Identify the workflow type"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Terminate workflow request",
					"id": "e5f3f6f3-e180-43df-8342-d8c753a867f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/terminate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"workflows",
								":workflowComponentName",
								":instanceID",
								"terminate"
							],
							"variable": [
								{
									"key": "workflowComponentName",
									"value": "{{workflowComponent}}",
									"description": "Use dapr for Dapr Workflows"
								},
								{
									"key": "instanceID",
									"value": "{{instanceID}}",
									"description": "Unique value created for each run of a specific workflow"
								}
							]
						},
						"description": "Terminate a running workflow instance with the given name and instance ID."
					},
					"response": [
						{
							"id": "7965cb64-f0a6-4e13-aef6-175d27101188",
							"name": "202\tAccepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/terminate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"terminate"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "037ade9e-b931-45e8-83b0-ad9e1d0684ef",
							"name": "400\tRequest was malformed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/terminate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"terminate"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "98eaed38-2c3f-44bf-a5ea-822cd0338b6a",
							"name": "500\tRequest formatted correctly, error in dapr code or underlying component",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/terminate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"terminate"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Raise Event request",
					"id": "04e5bae1-c749-44c6-86e8-c9d4a79136a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/raiseEvent/:eventName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"workflows",
								":workflowComponentName",
								":instanceID",
								"raiseEvent",
								":eventName"
							],
							"variable": [
								{
									"key": "workflowComponentName",
									"value": "{{workflowComponent}}",
									"description": "Use dapr for Dapr Workflows"
								},
								{
									"key": "instanceID",
									"value": "{{instanceID}}",
									"description": "Unique value created for each run of a specific workflow"
								},
								{
									"key": "eventName",
									"value": "{{eventName}}",
									"description": "The name of the event to raise"
								}
							]
						},
						"description": "For workflow components that support subscribing to external events, such as the Dapr Workflow engine, you can use the following “raise event” API to deliver a named event to a specific workflow instance.\n\n#### Note\n\nThe exact mechanism for subscribing to an event depends on the workflow component that you’re using. Dapr Workflow has one way of subscribing to external events but other workflow components might have different ways."
					},
					"response": [
						{
							"id": "72c85b8e-e986-446b-be19-c70688ed78b7",
							"name": "202\tAccepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/raiseEvent/:eventName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"raiseEvent",
										":eventName"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										},
										{
											"key": "eventName",
											"value": ""
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "7d515151-7799-4674-991c-dd3a4f4d2cf5",
							"name": "400\tRequest was malformed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/raiseEvent/:eventName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"raiseEvent",
										":eventName"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										},
										{
											"key": "eventName",
											"value": ""
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "8c2bce9e-38de-4c42-bfe4-fda35fa686a2",
							"name": "500\tRequest formatted correctly, error in dapr code or underlying component",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/raiseEvent/:eventName",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"raiseEvent",
										":eventName"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										},
										{
											"key": "eventName",
											"value": ""
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Pause workflow request",
					"id": "88eed10d-ebd1-411c-b1a3-b1b7352c1464",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/pause",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"workflows",
								":workflowComponentName",
								":instanceID",
								"pause"
							],
							"variable": [
								{
									"id": "bfe1b609-dfde-4cba-9255-07448c30afaa",
									"key": "workflowComponentName",
									"value": "{{workflowComponent}}",
									"description": "Use dapr for Dapr Workflows"
								},
								{
									"id": "8d8e10be-6e37-4e72-9d93-f611d25bc22b",
									"key": "instanceID",
									"value": "{{instanceID}}",
									"description": "Unique value created for each run of a specific workflow"
								}
							]
						},
						"description": "Pause a running workflow instance."
					},
					"response": [
						{
							"id": "84f03c10-dd00-45c6-85b2-fa932be48d38",
							"name": "202\tAccepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/pause",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"pause"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "5075be33-3995-4b4f-ab2c-19926085d9e8",
							"name": "400\tRequest was malformed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/pause",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"pause"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "05e8ad45-0cc2-4205-83a2-68f636aa298c",
							"name": "500\tRequest formatted correctly, error in dapr code or underlying component",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/pause",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"pause"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Resume workflow request",
					"id": "0e8a8ea1-4c26-429f-a681-1a5ccd48a640",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/resume",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"workflows",
								":workflowComponentName",
								":instanceID",
								"resume"
							],
							"variable": [
								{
									"id": "bfe1b609-dfde-4cba-9255-07448c30afaa",
									"key": "workflowComponentName",
									"value": "{{workflowComponent}}",
									"description": "Use dapr for Dapr Workflows"
								},
								{
									"id": "8d8e10be-6e37-4e72-9d93-f611d25bc22b",
									"key": "instanceID",
									"value": "{{instanceID}}",
									"description": "Unique value created for each run of a specific workflow"
								}
							]
						},
						"description": "Resume a paused workflow instance."
					},
					"response": [
						{
							"id": "7cf17efd-7b15-45a1-ac74-8682a56a2e3d",
							"name": "202\tAccepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/resume",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"resume"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "611a086b-e373-4138-962b-04e73f2e1cc6",
							"name": "400\tRequest was malformed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/resume",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"resume"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "2fe8907d-e7b2-474b-8153-e31be50cd911",
							"name": "500\tRequest formatted correctly, error in dapr code or underlying component",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/resume",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"resume"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Purge workflow request",
					"id": "2ccf5327-dfbe-443b-b391-991b4c43f543",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/purge",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"workflows",
								":workflowComponentName",
								":instanceID",
								"purge"
							],
							"variable": [
								{
									"id": "bfe1b609-dfde-4cba-9255-07448c30afaa",
									"key": "workflowComponentName",
									"value": "{{workflowComponent}}",
									"description": "Use dapr for Dapr Workflows"
								},
								{
									"id": "8d8e10be-6e37-4e72-9d93-f611d25bc22b",
									"key": "instanceID",
									"value": "{{instanceID}}",
									"description": "Unique value created for each run of a specific workflow"
								}
							]
						},
						"description": "Purge the workflow state from your state store with the workflow’s instance ID."
					},
					"response": [
						{
							"id": "20ddec17-9acc-4286-afcc-19d1416804b6",
							"name": "202\tAccepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/purge",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"purge"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "67330851-9c45-496e-a92b-338030fcbde8",
							"name": "400\tRequest was malformed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/purge",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"purge"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "2cf34da9-1484-4446-9645-051e3077d701",
							"name": "500\tRequest formatted correctly, error in dapr code or underlying component",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID/purge",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID",
										"purge"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get workflow request",
					"id": "4d06dc81-ed6f-44f8-9327-600082c14cfe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{daprPort}}",
							"path": [
								"v1.0-alpha1",
								"workflows",
								":workflowComponentName",
								":instanceID"
							],
							"variable": [
								{
									"id": "bfe1b609-dfde-4cba-9255-07448c30afaa",
									"key": "workflowComponentName",
									"value": "{{workflowComponent}}",
									"description": "Use dapr for Dapr Workflows"
								},
								{
									"id": "8d8e10be-6e37-4e72-9d93-f611d25bc22b",
									"key": "instanceID",
									"value": "{{instanceID}}",
									"description": "Unique value created for each run of a specific workflow"
								}
							]
						},
						"description": "Get information about a given workflow instance.\n\n| Parameter | Description |\n| --- | --- |\n| `runtimeStatus` | The status of the workflow instance. Values include: `RUNNING`, `TERMINATED`, `PAUSED` |"
					},
					"response": [
						{
							"id": "765c1670-9dca-43e9-9666-2b323b2cdb27",
							"name": "200\tOK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"createdAt\": \"2023-01-12T21:31:13Z\",\n  \"instanceID\": \"12345678\",\n  \"lastUpdatedAt\": \"2023-01-12T21:31:13Z\",\n  \"properties\": {\n    \"property1\": \"value1\",\n    \"property2\": \"value2\",\n  },\n  \"runtimeStatus\": \"RUNNING\",\n }"
						},
						{
							"id": "9989715f-c333-492f-a533-37ed9ede8f97",
							"name": "400\tRequest was malformed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "5a7c35e2-7cc4-44f6-8452-071051f64e75",
							"name": "500\tRequest formatted correctly, error in dapr code or underlying component",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{daprPort}}/v1.0-alpha1/workflows/:workflowComponentName/:instanceID",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{daprPort}}",
									"path": [
										"v1.0-alpha1",
										"workflows",
										":workflowComponentName",
										":instanceID"
									],
									"variable": [
										{
											"key": "workflowComponentName",
											"value": "{{workflowComponent}}",
											"description": "Use dapr for Dapr Workflows"
										},
										{
											"key": "instanceID",
											"value": "{{instanceID}}",
											"description": "Unique value created for each run of a specific workflow"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"name": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"id": "fc1cfc6d-0645-42b5-89b9-03c6066e65ce",
			"description": "Dapr provides users with the ability to interact with workflows and comes with a built-in `dapr` component."
		}
	]
}
