i should be able to fetch the fields such httppipeline 
how to get fields of whatever there in middleware


How I would do is 


logically what we do is 

remove the handlers from the httpPipeline 
for each component type defination consider it as only handler 

1- fetch all the handlers by listMiddlewares() --> u get handler as well 

if spec == nil {
		return middlehttp.Pipeline{}, nil
	}

	pipeline := middlehttp.Pipeline{
		Handlers: make([]func(next http.Handler) http.Handler, 0, len(spec.Handlers)),
	}

	for _, handlerSpec := range spec.Handlers {
		comp, exists := c.compStore.GetComponent(handlerSpec.Type, handlerSpec.Name)
		if !exists {
			// Log the error but continue with initializing the pipeline
			log.Errorf("couldn't find middleware component defined in configuration with name %s and type %s",
				handlerSpec.Name, handlerSpec.LogName())
			continue
		}

		meta, err := c.meta.ToBaseMetadata(comp)
		if err != nil {
			return middlehttp.Pipeline{}, err
		}
		md := contribmiddle.Metadata{Base: meta}
		handler, err := c.registry.Create(handlerSpec.Type, handlerSpec.Version, md, handlerSpec.LogName())
		if err != nil {
			err = fmt.Errorf("process component %s error: %w", comp.Name, err)
			if !comp.Spec.IgnoreErrors {
				return middlehttp.Pipeline{}, err
			}
			log.Error(err)
			continue
		}

		log.Infof("enabled %s/%s %s middleware", handlerSpec.Type, targetPipeline, handlerSpec.Version)
		pipeline.Handlers = append(pipeline.Handlers, handler)
	}

	return pipeline, nil


you need to get the type and version of the middleware component
somehow you need to collect all handlers and execute by ourselves in this case 

2 - priority working ---> initially collect all map[int]middle where int is priority 
then correctly reorder sequentially the array and then through a loop on that execute the handler