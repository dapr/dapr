# actionscore/actions pipeline

trigger:
- master
- release-*

variables:
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'
  GOBIN:  '$(GOPATH)/bin'
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'
  BlobPrefix: ''

jobs:
- template: 'build-binary-template.yml'
  parameters:
    poolImage: macOS-latest
    targetOS: darwin
    targetArch: amd64
    binaryExtension: ''
- template: 'build-binary-template.yml'
  parameters:
    poolImage: ubuntu-latest
    targetOS: linux
    targetArch: arm
    binaryExtension: ''
- template: 'build-binary-template.yml'
  parameters:
    poolImage: ubuntu-latest
    targetOS: linux
    targetArch: amd64
    binaryExtension: ''
- template: 'build-binary-template.yml'
  parameters:
    poolImage: windows-2019
    targetOS: windows
    targetArch: amd64
    binaryExtension: '.exe'
- job: release_setup
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - script: |
        echo ##vso[task.setvariable variable=REL_VERSION;isOutput=true]testrelease
      name: versioning
- job: publish_edge_binaries
  pool:
    vmImage: 'windows-2019'
  dependsOn:
    - build_darwin_amd64
    - build_linux_amd64
    - build_linux_arm
    - build_windows_amd64
    - release_setup
  condition: |
    and
    (
      eq(dependencies.build_darwin_amd64.result, 'Succeeded'),
      eq(dependencies.build_linux_amd64.result, 'Succeeded'),
      eq(dependencies.build_linux_arm.result, 'Succeeded'),
      eq(dependencies.build_windows_amd64.result, 'Succeeded'),
      ne(variables['Build.Reason'], 'PullRequest')
    )
  variables:
    REL_VERSION: $[ dependencies.release_setup.outputs['versioning.REL_VERSION'] ]
  steps:
    # binaries from master will be stored in edge/[date_revision] folder in blob storage
    - script: |
        echo $REL_VERSION
        echo '##vso[task.setvariable variable=TargetContainer]edge'
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/heads/release-'))
    # binaries from release-* will be stored in release/release version folder in blob storage
    - script: |
        echo '##vso[task.setvariable variable=BlobPrefix]$(REL_VERSION)'
        echo '##vso[task.setvariable variable=TargetContainer]release'
      name: releaseSetup
      condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release-')
    - task: DownloadPipelineArtifact@2
      displayName: 'Download pipeline artifacts to workspace'
      inputs:
        buildType: 'current'
        itemPattern: '**/*.zip'
        targetPath: '$(Pipeline.Workspace)'
    - task: AzureFileCopy@3
      displayName: 'Publish archives to version folder'
      condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release-')
      inputs:
        SourcePath: '$(Pipeline.Workspace)/drop'
        azureSubscription: 'Actions Releases'
        Destination: 'AzureBlob'
        storage: 'actionsreleases'
        ContainerName: '$(TargetContainer)'
        blobPrefix: '$(BlobPrefix)'
    - task: AzureFileCopy@3
      displayName: 'Publish archives to latest folder'
      inputs:
        SourcePath: '$(Pipeline.Workspace)/drop'
        azureSubscription: 'Actions Releases'
        Destination: 'AzureBlob'
        storage: 'actionsreleases'
        ContainerName: '$(TargetContainer)'
        blobPrefix: 'latest'
- job: 'build_and_push_amd64_docker_image'
  pool: 
    vmImage: 'ubuntu-latest'
  dependsOn:
    - publish_edge_binaries
  condition: |
    eq(dependencies.publish_edge_binaries.result, 'Succeeded')
  variables:
    REL_VERSION: $[ dependencies.publish_edge_binaries.outputs['releaseSetup.REL_VERSION'] ]
  steps:
    - template: 'build-and-push-image-template.yml'
      parameters:
        targetArch: amd64
        releaseVersion: $(REL_VERSION)
- job: 'build_and_push_arm_docker_image'
  pool: 
    vmImage: 'ubuntu-latest'
  dependsOn:
    - publish_edge_binaries
  condition: |
    eq(dependencies.publish_edge_binaries.result, 'Succeeded')
  variables:
    REL_VERSION: $[ dependencies.release_setup.outputs['versioning.REL_VERSION'] ]
  steps:
    - template: 'build-and-push-image-template.yml'
      parameters:
        targetArch: arm
        releaseVersion: $(REL_VERSION)
