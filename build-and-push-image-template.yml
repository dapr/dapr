# dapr/dapr build and push image template

parameters:
  targetArch: 'amd64'
  releaseVersion: ''
  isLatest: 'false'

steps:
  # integration build tag
  - script: |
      VERSION_TAG="edge"
      if [ "${{ parameters.targetArch }}" != "amd64" ]; then
        VERSION_TAG=$VERSION_TAG-${{ parameters.targetArch }}
      fi

      echo "##vso[task.setvariable variable=DockerReleaseTag]"
      echo "##vso[task.setvariable variable=DockerVersionTag]$VERSION_TAG"
      echo Target Architecture: ${{ parameters.targetArch }}
      echo Integration Build - Docker Version TAG: $VERSION_TAG
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    displayName: 'Integration build - docker image tag name setting'
  # release build tag
  - script: |
      RELEASE_TAG=latest
      VERSION_TAG=v${{ parameters.releaseVersion }}

      if [ "${{ parameters.targetArch }}" != "amd64" ]; then
        RELEASE_TAG=$RELEASE_TAG-${{ parameters.targetArch }}
        VERSION_TAG=$VERSION_TAG-${{ parameters.targetArch }}
      fi

      echo "##vso[task.setvariable variable=DockerVersionTag]$VERSION_TAG"

      # Release latest tag if LATEST_TAG is true
      if [ "${{ parameters.isLatest }}" == "true" ]; then
        echo "##vso[task.setvariable variable=DockerReleaseTag]$RELEASE_TAG"
        echo Release Build - Docker Release TAG: $RELEASE_TAG
      else
        echo "##vso[task.setvariable variable=DockerReleaseTag]"
      fi

      echo Target Architecture: ${{ parameters.targetArch }}
      echo Release Build - Docker Version TAG: $VERSION_TAG
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    displayName: 'Release build - docker image tag name setting'
  - task: DownloadPipelineArtifact@2
    displayName: 'Download pipeline artifacts to workspace'
    inputs:
      buildType: 'current'
      itemPattern: '**/*_linux_${{ parameters.targetArch }}.*'
      targetPath: '$(Pipeline.Workspace)/${{ parameters.targetArch }}'
  - task: CopyFiles@2
    displayName: 'Copy Dockerfile to workspace'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: 'Dockerfile'
      TargetFolder: '$(Pipeline.Workspace)/${{ parameters.targetArch }}'
      OverWrite: true
      flattenFolders: true
  # Extract all binaries from each zip files
  - task: ExtractFiles@1
    displayName: 'Extract linux ${{ parameters.targetArch }} binaries'
    inputs:
      archiveFilePatterns: '$(Pipeline.Workspace)/${{ parameters.targetArch }}/drop/*_linux_${{ parameters.targetArch }}.*'
      destinationFolder: '$(Pipeline.Workspace)/${{ parameters.targetArch }}/dist'
      cleanDestinationFolder: false
  - task: Docker@2
    displayName: 'Build and push ${{ parameters.targetArch }} Docker image'
    inputs:
      containerRegistry: 'ACR Actions Core'
      repository: 'actions'
      command: 'buildAndPush'
      Dockerfile: '$(Pipeline.Workspace)/${{ parameters.targetArch }}/Dockerfile'
      tags: |
        $(DockerVersionTag)
        $(DockerReleaseTag)
