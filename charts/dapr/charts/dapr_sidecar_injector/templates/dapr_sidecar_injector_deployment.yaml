{{- if eq .Values.enabled true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-sidecar-injector
  labels:
    app: dapr-sidecar-injector
    {{- range $key, $value := .Values.global.k8sLabels }}
    {{ $key }}: {{ tpl $value $ }}
    {{- end }}
spec:
{{- if eq .Values.global.ha.enabled true }}
  replicas: {{ .Values.global.ha.replicaCount }}
{{- else }}
  replicas: {{ .Values.replicaCount }}  
{{- end }}
  selector:
    matchLabels:
      app: dapr-sidecar-injector
  template:
    metadata:
      labels:
        app: dapr-sidecar-injector
        {{- range $key, $value := .Values.global.k8sLabels }}
        {{ $key }}: {{ tpl $value $ }}
        {{- end }}
        {{- with .Values.global.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
{{- if eq .Values.global.prometheus.enabled true }}
      annotations:
        prometheus.io/scrape: "{{ .Values.global.prometheus.enabled }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/path: "/"
{{- end }}
    spec:
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      {{- end }}
      serviceAccountName: dapr-injector
      containers:
      - name: dapr-sidecar-injector
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.healthzPort }}
          {{- if eq .Values.debug.enabled false }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          {{- else }}
          initialDelaySeconds: {{ .Values.debug.initialDelaySeconds }}
          {{- end }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.healthzPort }}
          {{- if eq .Values.debug.enabled false }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          {{- else }}
          initialDelaySeconds: {{ .Values.debug.initialDelaySeconds }}
          {{- end }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
{{- if contains "/" .Values.injectorImage.name }}
        image: "{{ .Values.injectorImage.name }}"
{{- else }}
        image: "{{ .Values.global.registry }}/{{ .Values.injectorImage.name }}:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
{{- if eq .Values.global.daprControlPlaneOs "linux" }}
        securityContext:
  {{- if eq .Values.runAsNonRoot true }}
          runAsNonRoot: {{ .Values.runAsNonRoot }}
  {{- else }}
          runAsUser: 1000
  {{- end }}
  {{- if eq .Values.debug.enabled true }}
          capabilities:
            add:
              - SYS_PTRACE
  {{- end }}
{{- end }}
        command:
{{- if eq .Values.debug.enabled false }}
        - "/injector"
{{- else }}
        - "/dlv"
{{- end }}
        args:
{{- if eq .Values.debug.enabled true }}
        - "--listen=:{{ .Values.debug.port }}"
        - "--accept-multiclient"
        - "--headless=true"
        - "--log"
        - "--api-version=2"
        - "exec"
        - "/injector"
        - "--"
{{- end }}
        - "--log-level"
        - {{ .Values.logLevel }}
{{- if eq .Values.global.logAsJson true }}
        - "--log-as-json"
{{- end }}
{{- if eq .Values.global.prometheus.enabled true }}
        - "--enable-metrics"
        - "--metrics-port"
        - "{{ .Values.global.prometheus.port }}"
{{- else }}
        - "--enable-metrics=false"
{{- end }}
        - "--healthz-port"
        - "{{ .Values.healthzPort }}"
{{- with .Values.global.issuerFilenames }}
        - "--issuer-ca-secret-key"
        - "{{ .ca }}"
        - "--issuer-certificate-secret-key"
        - "{{ .cert }}"
        - "--issuer-key-secret-key"
        - "{{ .key }}"
{{- end }}
        env:
        - name: TLS_CERT_FILE
          value: /dapr/cert/tls.crt
        - name: TLS_KEY_FILE
          value: /dapr/cert/tls.key
{{- if .Values.kubeClusterDomain }}
        - name: KUBE_CLUSTER_DOMAIN
          value: "{{ .Values.kubeClusterDomain }}"
{{- end }}
        - name: SIDECAR_IMAGE
{{- if contains "/" .Values.image.name }}
          value: "{{ .Values.image.name }}"
{{- else }}
          value: "{{ .Values.global.registry }}/{{ .Values.image.name }}:{{ .Values.global.tag }}"
{{- end }}
        - name: SIDECAR_IMAGE_PULL_POLICY
          value: "{{ .Values.sidecarImagePullPolicy }}"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
{{- if .Values.ignoreEntrypointTolerations }}
        - name: IGNORE_ENTRYPOINT_TOLERATIONS
          value: "{{ .Values.ignoreEntrypointTolerations }}"
{{- end }}
{{- if not .Values.global.actors.enabled }}
        - name: SKIP_PLACEMENT
          value: "true"
{{- end }}
        - name: SIDECAR_RUN_AS_NON_ROOT
          value: "{{ .Values.sidecarRunAsNonRoot }}"
        - name: SIDECAR_DROP_ALL_CAPABILITIES
          value: "{{ .Values.sidecarDropALLCapabilities }}"
        - name: SIDECAR_READ_ONLY_ROOT_FILESYSTEM
          value: "{{ .Values.sidecarReadOnlyRootFilesystem }}"
{{- if .Values.allowedServiceAccounts }}
        - name: ALLOWED_SERVICE_ACCOUNTS
          value: "{{ .Values.allowedServiceAccounts }}"
{{- end }}
{{- if .Values.allowedServiceAccounts }}
        - name: ALLOWED_SERVICE_ACCOUNTS
          value: "{{ .Values.allowedServiceAccounts }}"
{{- end }}
{{- if .Values.allowedServiceAccountsPrefixNames }}
        - name: ALLOWED_SERVICE_ACCOUNTS_PREFIX_NAMES
          value: "{{ .Values.allowedServiceAccountsPrefixNames }}"
{{- end }}
        ports:
        - name: https
          containerPort: 4000
          protocol: TCP
{{- if eq .Values.global.prometheus.enabled true }}
        - name: metrics
          containerPort: {{ .Values.global.prometheus.port }}
          protocol: TCP
{{- end }}
{{- if eq .Values.debug.enabled true }}
        - name: debug
          containerPort: {{ .Values.debug.port }}
          protocol: TCP
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: cert
          mountPath: /dapr/cert
          readOnly: true
      volumes:
      - name: cert
        secret:
          secretName: dapr-sidecar-injector-cert
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
             nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - {{ .Values.global.daprControlPlaneOs }}
{{- if .Values.global.daprControlPlaneArch }}
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                    - {{ .Values.global.daprControlPlaneArch }}
{{- end }}
{{- if .Values.global.ha.enabled }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - dapr-sidecar-injector
              topologyKey: topology.kubernetes.io/zone
{{- end }}
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecrets }}
{{- end }}
{{- if .Values.global.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.global.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.global.tolerations }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
{{- end }}
{{- end }}
