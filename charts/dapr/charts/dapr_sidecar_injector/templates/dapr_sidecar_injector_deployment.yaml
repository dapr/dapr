apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-sidecar-injector
  labels:
    app: dapr-sidecar-injector
spec:
{{- if eq .Values.global.ha.enabled true }}
  replicas: {{ .Values.global.ha.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: dapr-sidecar-injector
  template:
    metadata:
      labels:
        app: dapr-sidecar-injector
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Values.global.tag }}
        app.kubernetes.io/component: sidecar-injector
        app.kubernetes.io/part-of: "dapr"
        app.kubernetes.io/managed-by: "helm"
{{- if eq .Values.global.prometheus.enabled true }}
      annotations:
        prometheus.io/scrape: "{{ .Values.global.prometheus.enabled }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/path: "/"
{{- end }}
    spec:
      serviceAccountName: dapr-operator
{{- if eq .Values.global.ha.enabled true }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - dapr-sidecar-injector
            topologyKey: "kubernetes.io/hostname"
{{- end }}
      containers:
      - name: dapr-sidecar-injector
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 5
{{- if contains "/" .Values.image.name }}
        image: "{{ .Values.image.name }}"
{{- else }}
        image: "{{ .Values.global.registry }}/dapr:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
{{- if eq .Values.global.daprControlPlaneOs "linux" }}
        securityContext:
          runAsUser: 1000
{{- end }}
        command:
        - "/injector"
        args:
        - "--log-level"
        - {{ .Values.logLevel }}
{{- if eq .Values.global.logAsJson true }}
        - "--log-as-json"
{{- end }}
        - "--metrics-port"
        - "{{ .Values.global.prometheus.port }}"
{{- if eq .Values.global.daprControlPlaneOs "linux" }}
        securityContext:
          runAsNonRoot: true
{{- end }}
        env:
        - name: TLS_CERT_FILE
          value: /dapr/cert/tls.crt
        - name: TLS_KEY_FILE
          value: /dapr/cert/tls.key
        - name: SIDECAR_IMAGE
{{- if contains "/" .Values.image.name }}
          value: "{{ .Values.image.name }}"
{{- else }}
          value: "{{ .Values.global.registry }}/daprd:{{ .Values.global.tag }}"
{{- end }}
        - name: SIDECAR_IMAGE_PULL_POLICY
          value: "{{ .Values.sidecarImagePullPolicy }}"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: https
          containerPort: 4000
          protocol: TCP
{{- if eq .Values.global.prometheus.enabled true }}
        - name: metrics
          containerPort: {{ .Values.global.prometheus.port }}
          protocol: TCP
{{- end }}
        resources:
          limits:
            cpu: 1000m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 20Mi
        volumeMounts:
        - name: cert
          mountPath: /dapr/cert
          readOnly: true
      volumes:
      - name: cert
        secret:
          secretName: dapr-sidecar-injector-cert
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
             nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - {{ .Values.global.daprControlPlaneOs }}
{{- if .Values.global.daprControlPlaneArch }}
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                    - {{ .Values.global.daprControlPlaneArch }}
{{- end }}
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecrets }}
{{- end }}
