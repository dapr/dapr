name: Dapr

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  release_environment:
    runs-on: ubuntu-latest
    env:
      ARTIFACT: ../artifact
    steps:
      - name: Get Release Version
        run: |
          SOURCEBRANCH=$GITHUB_REF
          echo Source branch name : $SOURCEBRANCH
          
          mkdir $ARTIFACT
          echo $GITHUB_SHA > $ARTIFACT/release_commit_id.txt
          if [[ $SOURCEBRANCH != refs/tags/v* ]]; then
            echo Skip release version setting unless $SOURCEBRANCH is refs/tags/v...
            echo ::set-output name=REL_VERSION::$RELVERSION
          else
            RELVERSION=${SOURCEBRANCH#refs/tags/v}
            echo Release version : $RELVERSION
            echo ::set-output name=REL_VERSION::$RELVERSION
            echo $RELVERSION > $ARTIFACT/release_version.txt
            # Check if RELVERSION is not release candidates and then validate the release note file
            if [[ "$RELVERSION" != *-rc.* ]]; then
              echo Checking release note for $RELVERSION...
              RELNOTE_PATH="docs/release_notes/v$RELVERSION.md"
              [ ! -f "$RELNOTE_PATH" ] && echo "$RELNOTE_PATH not found" && exit 1
            fi
          fi
      - name: upload release_version to artifact
        uses: actions/upload-artifact@master
        with:
          name: release_setup
          path: $ARTIFACT
  build:
    name: Build ${{ matrix.os }}
    needs: release_environment
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - name: Set up Go 1.13.3
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.3
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    
    - name: Check the release version
      run: echo $REL_VERSION
