name: Dapr

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

env: 
  REL_ARTIFACT: release_setup

jobs:
  release_setup:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Version
        run: |
          SOURCEBRANCH=$GITHUB_REF
          echo Source branch name : $SOURCEBRANCH
          
          # Create artifact directory
          mkdir $REL_ARTIFACT
          
          # release commit_sha
          echo $GITHUB_SHA > $REL_ARTIFACT/release_commit_id.txt
          if [[ $SOURCEBRANCH != refs/tags/v* ]]; then
            echo Skip release version setting unless $SOURCEBRANCH is refs/tags/v...
            echo $GITHUB_REPOSITORY > $REL_ARTIFACT/release_version.txt
          else
            RELVERSION=${SOURCEBRANCH#refs/tags/v}
            echo Release version : $RELVERSION
            echo $RELVERSION > $REL_ARTIFACT/release_version.txt
            # Check if RELVERSION is not release candidates and then validate the release note file
            if [[ "$RELVERSION" != *-rc.* ]]; then
              echo Checking release note for $RELVERSION...
              RELNOTE_PATH="docs/release_notes/v$RELVERSION.md"
              [ ! -f "$RELNOTE_PATH" ] && echo "$RELNOTE_PATH not found" && exit 1
            fi
          fi
        
      - name: upload release_version to artifact
        uses: actions/upload-artifact@master
        with:
          name: release_setup
          path: ${{ env.REL_ARTIFACT }}
  build:
    name: Build ${{ matrix.osname }}_${{ matrix.arch }} binaries
    needs: release_setup
    runs-on: ${{ matrix.os }}
    env:
      GOOS: ${{ matrix.osname }}
      GOARCH: ${{ matrix.arch }}
      GOPROXY: https://proxy.golang.org
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        arch: [arm, amd64]
        include:
          - os: ubuntu-latest
            osname: linux
          - os: windows-latest
            osname: windows
          - os: macOS-latest
            osname: darwin
        exclude:
          - os: windows-latest
            arch: arm
          - os: macOS-latest
            arch: arm
    steps:
      - name: Set up Go 1.13.3
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.3
      - name: Set up Go workspace
        run: |
          mkdir -p '$(GOPATH)/pkg'
          mkdir -p '$(GOPATH)/bin'
          shopt -s extglob
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Download release setup artifact
        uses: actions/download-artifact@master
        with:
          name: release_setup
          path: ${{ env.REL_ARTIFACT }}
      - name: Run make test
        run: make test
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p dist/archives
          make release GOOS=${{ matrix.osname }} GOARCH=${{ matrix.arch }} ARCHIVE_OUT_DIR=$(Build.ArtifactStagingDirectory)
          ls -l dist/archives
