name: Dapr

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  release_environment:
    runs-on: ubuntu-latest
    env:
      ARTIFACT: ../artifact
    steps:
      - name: Get Release Version
        run: |
          SOURCEBRANCH=$(GITHUB_REF)
          echo Source branch name : $SOURCEBRANCH

          if [[ $SOURCEBRANCH != refs/tags/v* ]]; then
            echo Clearing REL_VERSION value unless $SOURCEBRANCH is refs/tags/v.
            RELVERSION=""
            echo "##[set-env name=REL_VERSION]$RELVERSION"
            exit 0
          fi

          RELVERSION=${SOURCEBRANCH#refs/tags/v}
          echo Release version : $RELVERSION
          echo "##[set-env name=REL_VERSION]$RELVERSION"
          mkdir $ARTIFACT
          echo $RELVERSION > $ARTIFACT/release_version.txt
          echo $(Build.SourceVersion) > $ARTIFACT/release_commit_id.txt

          # Check if RELVERSION is not release candidates and then validate the release note file
          if [[ "$RELVERSION" != *-rc.* ]]; then
            echo Checking release note for $RELVERSION...
            RELNOTE_PATH="docs/release_notes/v$RELVERSION.md"
            [ ! -f "$RELNOTE_PATH" ] && echo "$RELNOTE_PATH not found" && exit 1
          fi
  build:
    name: Test on node ${{ matrix.node_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
    
    - name: Check the release version
      run: echo ${{ jobs.release_environment.env.REL_VERSION }}
