# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: e2e

on:
  issue_comment: {types: created}

jobs:
  build:
    name: E2E test
    runs-on: ubuntu-latest
    env:
      GOVER: 1.13.4
      GOOS: linux
      GOARCH: amd64
      GOPROXY: https://proxy.golang.org
      DAPR_REGISTRY: docker.io/youngp
      DAPR_TEST_REGISTRY: docker.io/youngp
      HELM_NAMESPACE: dapr-tests
    steps:
      - name: Check issue comment
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const payload = context.payload;
            const issue = context.issue;

            if (payload.issue.pull_request && payload.comment.body && payload.comment.body.indexOf("/ok-to-test") >= 0) {
              // Get pull request
              const pull = await github.pulls.get({
                owner: issue.owner,
                repo: issue.repo,
                pull_number: issue.number
              });

              if (pull && pull.data) {
                // Get commit id and repo to checkout code from head repo
                const ref = pull.data.head.sha
                const repo = pull.data.head.repo.full_name

                // Set environment variables
                console.log(`##[set-env name=CHECKOUT_REPO;]${repo}`);
                console.log(`##[set-env name=CHECKOUT_REF;]${ref}`);
              }
            }

      - name: Set up Go ${{ env.GOVER }}
        if: env.CHECKOUT_REPO != ''
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        if: env.CHECKOUT_REPO != ''
        uses: actions/checkout@v1
        with:
          repository: ${{ env.CHECKOUT_REPO }}
          ref: ${{ env.CHECKOUT_REF }}
      - name: docker login
        if: env.CHECKOUT_REPO != ''
        run: |
          docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Login Azure
        if: env.CHECKOUT_REPO != ''
        run: az login --service-principal -u ${{ secrets.AZURE_LOGIN_USER }} -p ${{ secrets.AZURE_LOGIN_PASS }} --tenant ${{ secrets.AZURE_TENANT }}
      - name: Find the test cluster
        if: env.CHECKOUT_REPO != ''
        run: ./tests/test-infra/find_cluster.sh
      - name: Add test result comment to PR
        if: always()
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);
            const jobStatus = jobContext.status;
            const testCluster = process.env.TEST_CLUSTER;

            var message = "";
            if (!testCluster) {
              message = "All test clusters are occupied by the other tests. Please try to run the test later.";
            } else if (jobStatus == "success") {
              message = "Congrats! All end-to-end tests are passed. Thanks for your contribution!";
            } else if (jobStatus == "failure") {
              message = "end-to-end tests has been failed.";
            } else if (jobStatus == "cancelled") {
              message = "end-to-end tests has been cancelled.";
            }
            
            if (message) {
              await github.issues.createComment({ ...context.issue, body: message});
            }
      - name: Build dapr and its docker image
        if: env.TEST_CLUSTER != ''
        run: |
          make build-linux
          make docker-build
      - name: Build e2e test apps
        if: env.TEST_CLUSTER != ''
        run: make build-e2e-app-all
      - name: Push docker images to test dockerhub
        if: env.TEST_CLUSTER != ''
        run: |
          make docker-push
          make push-e2e-app-all
      - name: Preparing ${{ env.TEST_CLUSTER }} cluster for test
        if: env.TEST_CLUSTER != ''
        run: |
          make setup-helm-init
          make setup-test-env
      - name: Deploy dapr to ${{ env.TEST_CLUSTER }} cluster
        if: env.TEST_CLUSTER != ''
        run: make docker-deploy-k8s
      - name: Deploy test components
        if: env.TEST_CLUSTER != ''
        run: make setup-test-components
      - name: Run E2E tests
        if: env.TEST_CLUSTER != ''
        run: make test-e2e-all
      - name: Clean up ${{ env.TEST_CLUSTER }} cluster
        if: always()
        run: make clean-test-env
