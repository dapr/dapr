# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: dpar

on:
  push:
    branches:
      - master
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - master
      - release-*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Set up Go 1.13.3
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.3
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Run make test
        if: matrix.target_arch != 'arm'
        run: make test
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p $ARCHIVE_OUTDIR
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: dapr_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARCHIVE_OUTDIR }}
  push-docker:
    name: Build and Push Docker image
    env:
      OUT_BIN_DIR: ./dist
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: docker login
        run: |
          docker login -u ${{ sercrets.DOCKERHUB_ID }} -p ${{ sercrets.DOCKERHUB_TOKEN }}
      - name: download artifacts
        uses: actions/download-artifact@master
        with:
          name: dapr_linux_amd64
          path: ./dist/linux_amd64
