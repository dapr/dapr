# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: dpar

on:
  push:
    branches:
      - master
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - master
      - release-*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Set up Go 1.13.3
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.3
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Run make test
        if: matrix.target_arch != 'arm'
        run: make test
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p $ARCHIVE_OUTDIR
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: dapr_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARCHIVE_OUTDIR }}
  publish:
    name: Publish docker image and binaries
    needs: build
    env:
      ARTIFACT_DIR: ./release/
      DOCKER_REGISTRY: docker.io/youngp
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: download artifacts - dapr_linux_amd64
        uses: actions/download-artifact@master
        with:
          name: dapr_linux_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_linux_arm
        uses: actions/download-artifact@master
        with:
          name: dapr_linux_arm
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_windows_amd64
        uses: actions/download-artifact@master
        with:
          name: dapr_windows_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_darwin_amd64
        uses: actions/download-artifact@master
        with:
          name: dapr_darwin_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: docker login
        run: docker login -u ${{ secrets.DOCKERHUB_ID }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - name: build and publish docker image
        run: |
          IMAGE_ARCHS=(amd64 arm)

          for img_arch in "${IMAGE_ARCHS[@]}"; do
            echo "Preparing linux_${img_arch} image..."

            RELEASE_DIR=dist/linux_${img_arch}/release/
            mkdir -p $RELEASE_DIR

            for tgzfile in $ARTIFACT_DIR/*linux_${img_arch}.tar.gz; do
              echo "Extracting $tgzfile ..."
              tar xzvf $tgzfile -C $RELEASE_DIR
            done

            echo "Build docker image and push image ..."
            make docker-push DAPR_REGISTRY=${{ env.DOCKER_REGISTRY }} DAPR_TAG=$REL_VERSION GOARCH=${img_arch}
          done
      - name: publish binaries to github
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          echo "installing github-release-cli..."
          sudo npm install --slient --no-progress -g github-release-cli

          if [ "$LATEST_RELEASE" = "true" ]; then
            export RELEASE_BODY=`cat ./docs/release_notes/v${REL_VERSION}.md`
          else
            export RELEASE_BODY="This is the release candidate ${REL_VERSION}"
          fi

          echo $RELEASE_BODY

          export GITHUB_TOKEN=${{ secrets.RELEASE_USER_TOKEN }}
          echo "Uploading Dapr Runtime Binaries to GitHub Release"
          github-release upload \
            --owner dapr \
            --repo dapr \
            --tag "v${REL_VERSION}"
            --name "Dapr Runtime v${REL_VERSION}" \
            --body "${RELEASE_BODY}" \
            --prerelease true \
            "$ARTIFACT_DIR/*"

