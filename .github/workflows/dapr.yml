#
# Copyright 2021 The Dapr Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: dapr

on:
  schedule:
      - cron: '00 22 * * *'
  push:
    branches:
      - master
      - release-*
      - feature/*
    tags:
      - v*
  pull_request:
    branches:
      - master
      - release-*
      - feature/*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.17
      GOLANGCILINT_VER: v1.31
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      TEST_OUTPUT_FILE_PREFIX: test_report
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019, macOS-latest]
        target_arch: [arm, arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-2019
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-2019
            target_arch: arm
          - os: windows-2019
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Install Docker CE for buildx
        if: matrix.target_os == 'linux' && github.event_name != 'pull_request'
        run: |
          sudo apt update
          sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt update
          sudo apt install docker-ce
          docker -v
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}
      - name: Check white space in .md files
        if: matrix.target_os == 'linux' && github.event_name == 'pull_request'
        run: |
          TRAILING_WHITESPACE=0
          # only check changed docs in pr
          for file in $(git diff --cached --name-only --diff-filter=ACRMTU $GITHUB_BASE_REF | grep "\.md"); do
            if grep -r '[[:blank:]]$' "$1" > /dev/null; then
              echo "trailing whitespace: ${1}" >&2
              ERRORS=yes
              ((TRAILING_WHITESPACE=TRAILING_WHITESPACE+1))
            fi
          done
          if [[ -n "$ERRORS" ]]; then
            echo >&2
            echo "ERRORS found" >&2
            echo "${TRAILING_WHITESPACE} files with trailing whitespace" >&2
            echo >&2
            exit 1
          fi
      - name: golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v3.1.0
        with:
          version: ${{ env.GOLANGCILINT_VER }}
      - name: Run go mod tidy check diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make modtidy check-diff
      - name: Run gen-proto check diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip
          unzip protoc-3.14.0-linux-x86_64.zip -d protoc
          sudo cp -r protoc/include/google/ /usr/local/include/
          sudo chmod -R 755 /usr/local/include/google
          sudo cp protoc/bin/protoc /usr/local/bin/
          sudo chmod +x /usr/local/bin/protoc
          rm -r protoc protoc-3.14.0-linux-x86_64.zip
          make init-proto
          make gen-proto check-proto-diff
      - name: Run make test
        env:
          COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        if: matrix.target_arch == 'amd64'
        run: make test
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v1
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: dapr_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARCHIVE_OUTDIR }}
      - name: upload artifacts - grafana dashboards
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: actions/upload-artifact@master
        with:
          name: dapr_grafana_dashboards
          path: ./grafana/*.json
      - name: docker login
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        run: |
          docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Build and push docker images
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        run: |
          echo "Build docker image and push image..."
          make docker-push TARGET_OS=${{ matrix.target_os }} TARGET_ARCH=${{ matrix.target_arch }} DAPR_REGISTRY=${{ secrets.DOCKER_REGISTRY }} DAPR_TAG=${{ env.REL_VERSION }}
      - name: GitHub container registry login
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push docker images to GitHub container registry
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        run: |
          echo "Build docker image and push image..."
          make docker-push TARGET_OS=${{ matrix.target_os }} TARGET_ARCH=${{ matrix.target_arch }} DAPR_REGISTRY=ghcr.io/${{ github.repository_owner }} DAPR_TAG=${{ env.REL_VERSION }}
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target_os }}_${{ matrix.target_arch }}_test_unit.json
          path: ${{ env.TEST_OUTPUT_FILE_PREFIX }}_unit.json
  publish:
    name: Publish docker image and binaries
    needs: build
    if: github.event_name != 'pull_request'
    env:
      ARTIFACT_DIR: ./release
      HELM_PACKAGE_DIR: helm
      DAPR_VERSION_ARTIFACT: dapr_version
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      HELMVER: v3.7.2
    runs-on: ubuntu-latest
    steps:
      - name: Set up Helm ${{ env.HELMVER }}
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELMVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Install Docker CE for buildx
        run: |
          sudo apt update
          sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt update
          sudo apt install docker-ce
          docker -v
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}
      - name: Update Helm chart files for release version ${{ env.REL_VERSION }}
        run: bash ./.github/scripts/set_helm_dapr_version.sh
      - name: Generate helm chart manifest
        run: make manifest-gen DAPR_REGISTRY=${{ env.DOCKER_REGISTRY }} DAPR_TAG=$REL_VERSION
      - name: move helm chart manifest to artifact
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          mv ./dist/install/dapr.yaml ${{ env.ARTIFACT_DIR }}/dapr-operator.yaml
      - name: download artifacts - dapr_linux_amd64
        uses: actions/download-artifact@master
        with:
          name: dapr_linux_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_linux_arm
        uses: actions/download-artifact@master
        with:
          name: dapr_linux_arm
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_linux_arm64
        uses: actions/download-artifact@master
        with:
          name: dapr_linux_arm64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_windows_amd64
        uses: actions/download-artifact@master
        with:
          name: dapr_windows_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_darwin_amd64
        uses: actions/download-artifact@master
        with:
          name: dapr_darwin_amd64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_darwin_arm64
        uses: actions/download-artifact@master
        with:
          name: dapr_darwin_arm64
          path: ${{ env.ARTIFACT_DIR }}
      - name: download artifacts - dapr_grafana_dashboards
        uses: actions/download-artifact@master
        with:
          name: dapr_grafana_dashboards
          path: ${{ env.ARTIFACT_DIR }}
      - name: tar release binaries
        run: |
          IMAGE_ARCHS=(amd64 arm arm64)
          for img_arch in "${IMAGE_ARCHS[@]}"; do
            echo "Preparing linux_${img_arch} image..."
            RELEASE_DIR=dist/linux_${img_arch}/release/
            mkdir -p $RELEASE_DIR
            for tgzfile in $ARTIFACT_DIR/*linux_${img_arch}.tar.gz; do
              echo "Extracting $tgzfile ..."
              tar xzvf $tgzfile -C $RELEASE_DIR
            done
          done
      - name: generate checksum files
        run: cd ${ARTIFACT_DIR} && for i in *; do sha256sum -b $i > "$i.sha256"; done && cd -
      - name: lists artifacts
        run: ls -l ${{ env.ARTIFACT_DIR }}
      - name: publish binaries to github
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          echo "installing github-release-cli..."
          sudo npm install --silent --no-progress -g github-release-cli@1.3.1
          if [ "$LATEST_RELEASE" = "true" ]; then
            export RELEASE_BODY=`cat ./docs/release_notes/v${REL_VERSION}.md`
          else
            export RELEASE_BODY="This is the release candidate ${REL_VERSION}"
          fi
          # Get the list of files
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)
          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          export GITHUB_TOKEN=${{ secrets.DAPR_BOT_TOKEN }}
          echo "Uploading Dapr Runtime Binaries to GitHub Release"
          github-release upload \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${REL_VERSION}" \
            --name "Dapr Runtime v${REL_VERSION}" \
            --body "${RELEASE_BODY}" \
            --prerelease true \
            ${RELEASE_ARTIFACT[*]}
      - name: docker login
        run: |
          docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Build and push docker multiarch manifest
        if: matrix.target_os != 'darwin'
        run: |
          echo "Build docker multiarch image manifest and push it"
          make docker-publish DAPR_REGISTRY=${{ secrets.DOCKER_REGISTRY }} DAPR_TAG=${{ env.REL_VERSION }}
      - name: GitHub container registry login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push docker multiarch manifest to ghcr
        if: matrix.target_os != 'darwin'
        run: |
          echo "Build docker multiarch image manifest and push it"
          make docker-publish DAPR_REGISTRY=ghcr.io/${{ github.repository_owner }} DAPR_TAG=${{ env.REL_VERSION }}
      - name: Save release version
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          echo ${REL_VERSION} > ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/${{ env.DAPR_VERSION_ARTIFACT }}
      - name: Package Helm chart
        if: ${{ env.LATEST_RELEASE }} == "true"
        env:
              HELM_CHARTS_DIR: charts/dapr
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          helm package ${{ env.HELM_CHARTS_DIR }} --destination ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: Upload Helm charts package to artifacts
        if: ${{ env.LATEST_RELEASE }} == "true"
        uses: actions/upload-artifact@master
        with:
          name: dapr_helm_charts_package
          path: ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
  # This job downloads the helm charts package artifact uploaded by the publish job,
  # checks out the helm charts git hub pages repo and commits the latest version of
  # helm charts package.
  helmpublish:
    name: Publish helm charts to Helm github pages repo
    needs: publish
    if: startswith(github.ref, 'refs/tags/v')
    env:
      ARTIFACT_DIR: ./release
      DAPR_VERSION_ARTIFACT: dapr_version
      HELM_PACKAGE_DIR: helm
    runs-on: ubuntu-latest
    steps:
      - name: Create Helm charts directory
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: download artifacts - dapr_helm_charts_package
        uses: actions/download-artifact@master
        with:
          name: dapr_helm_charts_package
          path: ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: Checkout Helm Charts Repo
        uses: actions/checkout@v2
        env:
              DAPR_HELM_REPO: dapr/helm-charts
              DAPR_HELM_REPO_CODE_PATH: helm-charts
        with:
          repository: ${{ env.DAPR_HELM_REPO }}
          ref: refs/heads/master
          token: ${{ secrets.DAPR_BOT_TOKEN }}
          path: ${{ env.DAPR_HELM_REPO_CODE_PATH }}
      - name: Upload helm charts to Helm Repo
        env:
              DAPR_HELM_REPO_CODE_PATH: helm-charts
              DAPR_HELM_REPO: https://dapr.github.io/helm-charts/
        run: |
            daprVersion=`cat ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/${{ env.DAPR_VERSION_ARTIFACT }}`
            cd ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
            cp -r `ls -A | grep -v ${{ env.DAPR_VERSION_ARTIFACT }}` $GITHUB_WORKSPACE/${{ env.DAPR_HELM_REPO_CODE_PATH }}
            cd $GITHUB_WORKSPACE/${{ env.DAPR_HELM_REPO_CODE_PATH }}
            helm repo index --url ${{ env.DAPR_HELM_REPO }} --merge index.yaml .
            git config --global user.email "daprweb@microsoft.com"
            git config --global user.name "dapr-bot"
            git add --all
            # Check if the dapr-${daprVersion}.tgz file is modified.
            if git diff --name-only --staged | grep -q ${daprVersion}; then
              # If it is, we update the Helm chart, since this is an intentional update.
              git commit -m "Release - $daprVersion"
              git push
            else
              # If not, this update was accidentally triggered by tagging a release before updating the Helm chart.
              echo "::error::There is no change for ${daprVersion} Helm chart. Did you forget to update the chart version before tagging?"
              exit -1
            fi
