/*
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v1.10.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package client

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"errors"
	"io"
	"mime/multipart"
    "golang.org/x/oauth2"
    "golang.org/x/net/context"
	"net/http"
	"net/url"
	"time"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strings"
	"unicode/utf8"
	"strconv"
)

var (
	jsonCheck = regexp.MustCompile("(?i:[application|text]/json)")
	xmlCheck = regexp.MustCompile("(?i:[application|text]/xml)")
)

// APIClient manages communication with the Kubernetes API vv1.10.0
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg 	*Configuration
	common 	service 		// Reuse a single struct instead of allocating one for each service on the heap.

	 // API Services
	AdmissionregistrationApi	*AdmissionregistrationApiService
	AdmissionregistrationV1alpha1Api	*AdmissionregistrationV1alpha1ApiService
	AdmissionregistrationV1beta1Api	*AdmissionregistrationV1beta1ApiService
	ApiextensionsApi	*ApiextensionsApiService
	ApiextensionsV1beta1Api	*ApiextensionsV1beta1ApiService
	ApiregistrationApi	*ApiregistrationApiService
	ApiregistrationV1Api	*ApiregistrationV1ApiService
	ApiregistrationV1beta1Api	*ApiregistrationV1beta1ApiService
	ApisApi	*ApisApiService
	AppsApi	*AppsApiService
	AppsV1Api	*AppsV1ApiService
	AppsV1beta1Api	*AppsV1beta1ApiService
	AppsV1beta2Api	*AppsV1beta2ApiService
	AuthenticationApi	*AuthenticationApiService
	AuthenticationV1Api	*AuthenticationV1ApiService
	AuthenticationV1beta1Api	*AuthenticationV1beta1ApiService
	AuthorizationApi	*AuthorizationApiService
	AuthorizationV1Api	*AuthorizationV1ApiService
	AuthorizationV1beta1Api	*AuthorizationV1beta1ApiService
	AutoscalingApi	*AutoscalingApiService
	AutoscalingV1Api	*AutoscalingV1ApiService
	AutoscalingV2beta1Api	*AutoscalingV2beta1ApiService
	BatchApi	*BatchApiService
	BatchV1Api	*BatchV1ApiService
	BatchV1beta1Api	*BatchV1beta1ApiService
	BatchV2alpha1Api	*BatchV2alpha1ApiService
	CertificatesApi	*CertificatesApiService
	CertificatesV1beta1Api	*CertificatesV1beta1ApiService
	CoreApi	*CoreApiService
	CoreV1Api	*CoreV1ApiService
	CustomObjectsApi	*CustomObjectsApiService
	EventsApi	*EventsApiService
	EventsV1beta1Api	*EventsV1beta1ApiService
	ExtensionsApi	*ExtensionsApiService
	ExtensionsV1beta1Api	*ExtensionsV1beta1ApiService
	LogsApi	*LogsApiService
	NetworkingApi	*NetworkingApiService
	NetworkingV1Api	*NetworkingV1ApiService
	PolicyApi	*PolicyApiService
	PolicyV1beta1Api	*PolicyV1beta1ApiService
	RbacAuthorizationApi	*RbacAuthorizationApiService
	RbacAuthorizationV1Api	*RbacAuthorizationV1ApiService
	RbacAuthorizationV1alpha1Api	*RbacAuthorizationV1alpha1ApiService
	RbacAuthorizationV1beta1Api	*RbacAuthorizationV1beta1ApiService
	SchedulingApi	*SchedulingApiService
	SchedulingV1alpha1Api	*SchedulingV1alpha1ApiService
	SettingsApi	*SettingsApiService
	SettingsV1alpha1Api	*SettingsV1alpha1ApiService
	StorageApi	*StorageApiService
	StorageV1Api	*StorageV1ApiService
	StorageV1alpha1Api	*StorageV1alpha1ApiService
	StorageV1beta1Api	*StorageV1beta1ApiService
	VersionApi	*VersionApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.AdmissionregistrationApi = (*AdmissionregistrationApiService)(&c.common)
	c.AdmissionregistrationV1alpha1Api = (*AdmissionregistrationV1alpha1ApiService)(&c.common)
	c.AdmissionregistrationV1beta1Api = (*AdmissionregistrationV1beta1ApiService)(&c.common)
	c.ApiextensionsApi = (*ApiextensionsApiService)(&c.common)
	c.ApiextensionsV1beta1Api = (*ApiextensionsV1beta1ApiService)(&c.common)
	c.ApiregistrationApi = (*ApiregistrationApiService)(&c.common)
	c.ApiregistrationV1Api = (*ApiregistrationV1ApiService)(&c.common)
	c.ApiregistrationV1beta1Api = (*ApiregistrationV1beta1ApiService)(&c.common)
	c.ApisApi = (*ApisApiService)(&c.common)
	c.AppsApi = (*AppsApiService)(&c.common)
	c.AppsV1Api = (*AppsV1ApiService)(&c.common)
	c.AppsV1beta1Api = (*AppsV1beta1ApiService)(&c.common)
	c.AppsV1beta2Api = (*AppsV1beta2ApiService)(&c.common)
	c.AuthenticationApi = (*AuthenticationApiService)(&c.common)
	c.AuthenticationV1Api = (*AuthenticationV1ApiService)(&c.common)
	c.AuthenticationV1beta1Api = (*AuthenticationV1beta1ApiService)(&c.common)
	c.AuthorizationApi = (*AuthorizationApiService)(&c.common)
	c.AuthorizationV1Api = (*AuthorizationV1ApiService)(&c.common)
	c.AuthorizationV1beta1Api = (*AuthorizationV1beta1ApiService)(&c.common)
	c.AutoscalingApi = (*AutoscalingApiService)(&c.common)
	c.AutoscalingV1Api = (*AutoscalingV1ApiService)(&c.common)
	c.AutoscalingV2beta1Api = (*AutoscalingV2beta1ApiService)(&c.common)
	c.BatchApi = (*BatchApiService)(&c.common)
	c.BatchV1Api = (*BatchV1ApiService)(&c.common)
	c.BatchV1beta1Api = (*BatchV1beta1ApiService)(&c.common)
	c.BatchV2alpha1Api = (*BatchV2alpha1ApiService)(&c.common)
	c.CertificatesApi = (*CertificatesApiService)(&c.common)
	c.CertificatesV1beta1Api = (*CertificatesV1beta1ApiService)(&c.common)
	c.CoreApi = (*CoreApiService)(&c.common)
	c.CoreV1Api = (*CoreV1ApiService)(&c.common)
	c.CustomObjectsApi = (*CustomObjectsApiService)(&c.common)
	c.EventsApi = (*EventsApiService)(&c.common)
	c.EventsV1beta1Api = (*EventsV1beta1ApiService)(&c.common)
	c.ExtensionsApi = (*ExtensionsApiService)(&c.common)
	c.ExtensionsV1beta1Api = (*ExtensionsV1beta1ApiService)(&c.common)
	c.LogsApi = (*LogsApiService)(&c.common)
	c.NetworkingApi = (*NetworkingApiService)(&c.common)
	c.NetworkingV1Api = (*NetworkingV1ApiService)(&c.common)
	c.PolicyApi = (*PolicyApiService)(&c.common)
	c.PolicyV1beta1Api = (*PolicyV1beta1ApiService)(&c.common)
	c.RbacAuthorizationApi = (*RbacAuthorizationApiService)(&c.common)
	c.RbacAuthorizationV1Api = (*RbacAuthorizationV1ApiService)(&c.common)
	c.RbacAuthorizationV1alpha1Api = (*RbacAuthorizationV1alpha1ApiService)(&c.common)
	c.RbacAuthorizationV1beta1Api = (*RbacAuthorizationV1beta1ApiService)(&c.common)
	c.SchedulingApi = (*SchedulingApiService)(&c.common)
	c.SchedulingV1alpha1Api = (*SchedulingV1alpha1ApiService)(&c.common)
	c.SettingsApi = (*SettingsApiService)(&c.common)
	c.SettingsV1alpha1Api = (*SettingsV1alpha1ApiService)(&c.common)
	c.StorageApi = (*StorageApiService)(&c.common)
	c.StorageV1Api = (*StorageV1ApiService)(&c.common)
	c.StorageV1alpha1Api = (*StorageV1alpha1ApiService)(&c.common)
	c.StorageV1beta1Api = (*StorageV1beta1ApiService)(&c.common)
	c.VersionApi = (*VersionApiService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}


// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	if contains(contentTypes, "*/*") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insenstive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

// parameterToString convert interface{} parameters to string, using a delimiter if format is provided.
func parameterToString(obj interface{}, collectionFormat string) string {
	var delimiter string

	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	}

	return fmt.Sprintf("%v", obj)
}

// callAPI do the request. 
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	 return c.cfg.HTTPClient.Do(request)
}

// Change base path to allow switching to mocks
func (c *APIClient) ChangeBasePath (path string) {
	c.cfg.BasePath = path
}

// prepareRequest build the request
func (c *APIClient) prepareRequest (
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	fileName string,
	fileBytes []byte) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if len(formParams) > 0 || (len(fileBytes) > 0 && fileName != "") {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		if len(fileBytes) > 0 && fileName != "" {
			w.Boundary()
			//_, fileNm := filepath.Split(fileName)
			part, err := w.CreateFormFile("file", filepath.Base(fileName))
			if err != nil {
				return nil, err
			}
			_, err = part.Write(fileBytes)
			if err != nil {
				return nil, err
			}
			// Set the Boundary in the Content-Type
			headerParams["Content-Type"] = w.FormDataContentType()
		}
		
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = query.Encode()

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers.Set(h, v)
		}
		localVarRequest.Header = headers
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		localVarRequest.Host = c.cfg.Host
	}
	
	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)
	

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// Basic HTTP Authentication
		if auth, ok := ctx.Value(ContextBasicAuth).(BasicAuth); ok {
			localVarRequest.SetBasicAuth(auth.UserName, auth.Password)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer " + auth)
		}
	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}
	
	return localVarRequest, nil
}


// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(path)
	if err != nil {
		return err
	}
	defer file.Close()

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Prevent trying to import "fmt"
func reportError(format string, a ...interface{}) (error) {
	return fmt.Errorf(format, a...)
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if jsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if xmlCheck.MatchString(contentType) {
		xml.NewEncoder(bodyBuf).Encode(body)
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("Invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()
	
	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}


// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) (time.Time) {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)
	
	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		}
		expires = now.Add(lifetime)
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) (int) {
	return utf8.RuneCountInString(s)
}

